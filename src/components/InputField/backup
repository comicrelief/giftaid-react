/ getFieldValidation() {
  //   const constraints = {
  //     'tel': '',
  //   };
  // }


  // getEmptyFieldMessage() {
  //   let message;
  //   if (this.props.field.emptyFieldErrorText === undefined) {
  //     switch (this.props.field.type) {
  //       case 'number':
  //         if (this.props.field.min && !this.props.field.max) {
  //           message = 'Please enter a value above or equal to ' + this.props.field.min;
  //         }
  //         if (!this.props.field.min && this.props.field.max) {
  //           message = 'Please enter a value below or equal to ' + this.props.field.max;
  //         }
  //         if (this.props.field.min && this.props.field.max) {
  //           message = 'Please enter a value between ' + this.props.field.min + ' and ' + this.props.field.max;
  //         }
  //         break;
  //       case 'checkbox':
  //         message = 'Please check the ' + this.props.field.name + ' checkbox';
  //         break;
  //       default:
  //         message = 'Please fill in your ' + this.props.field.name;
  //         break;
  //     }
  //   } else {
  //     message = this.props.field.emptyFieldErrorText;
  //   }
  //   return message;
  // }

  // checkInputValue(value) {
  //   const validation = {
  //     valid: null,
  //     message: null,
  //   };
  //   let pattern =
  //     this.props.field.pattern !== undefined ?
  //       this.props.field.pattern : defaultValidationPatterns[this.props.field.type];
  //   pattern = new RegExp(pattern);
  //   const invalidMessage = this.props.field.invalidErrorText;
  //   // switch between field types
  //   switch (this.props.field.type) {
  //     case 'number': {
  //       console.log(pattern.test(value));
  //       const min = this.props.field.min;
  //       const max = this.props.field.max;
  //       const valueIsNumber = pattern.test(value);
  //       if ((((min && !max) && (value < min)) && (valueIsNumber === true)) ||
  //           (valueIsNumber === false)) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage : 'This field can only contain numbers above ' + min;
  //       } else if ((((!min && max) && (value > max)) && (valueIsNumber === true)) ||
  //           (valueIsNumber === false)) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage : 'This field can only contain numbers above ' + min;
  //       } else if ((((min && max) && (value < min || value > max)) &&
  //           (valueIsNumber === true))
  //           || (valueIsNumber === false)) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage :
  //           'This field can only contain numbers between ' + min + ' and ' + max;
  //       } else {
  //         validation.valid = true;
  //       }
  //       break;
  //     }
  //     case 'email': {
  //       console.log(pattern.test(value));
  //       if (pattern.test(value) === false) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage : 'Please enter a valid email address';
  //       } else {
  //         validation.valid = true;
  //       }
  //       break;
  //     }
  //     case 'tel': {
  //       console.log(pattern);
  //       console.log(pattern.test(value));
  //       if (pattern.test(value) === false) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage : 'Please enter a valid phone number';
  //       } else {
  //         validation.valid = true;
  //       }
  //       break;
  //     }
  //     case 'text': {
  //       console.log(pattern);
  //       console.log(pattern.test(value));
  //       if (pattern.test(value) === false) {
  //         validation.valid = false;
  //         validation.message = invalidMessage !== undefined ? invalidMessage : 'This field only accepts alphanumeric characters';
  //       } else {
  //         validation.valid = true;
  //       }
  //       break;
  //     }
  //     default:
  //       break;
  //   }
  //   return validation;
  // }
  // /**
  //  * Validate the input field.
  //  * Updates the state with the validity of the field and the correct error message
  //  */
  // validateField() {
  //   const field = this.inputField.current;
  //   let value = field.value;
  //   let checkbox = false;
  //   let validation = {
  //     valid: null,
  //     message: null,
  //   };
  //   // cheboxes return 'on' as value so change it
  //   if (field.getAttribute('type') === 'checkbox') {
  //     checkbox = true;
  //     value = field.checked;
  //   }
  //   // if field is required and empty or a unchecked checkbox get empty field message
  //   // otherwise validate the input value
  //   if (this.props.field.required && (!value || value === false)) {
  //     validation.valid = false;
  //     validation.message = this.getEmptyFieldMessage();
  //   } else if (value && checkbox === false) {
  //     validation = this.checkInputValue(value);
  //   } else {
  //     validation.valid = true;
  //     validation.message = '';
  //   }
  //   this.setState({
  //     valid: validation.valid,
  //     validationMessage: validation.message,
  //   });
  // }



 switch (this.props.field.type) {
    case 'number': {
      console.log(pattern.test(value));
      const min = this.props.field.min;
      const max = this.props.field.max;
      const valueIsNumber = pattern.test(value);
      if ((((min && !max) && (value < min)) && (valueIsNumber === true)) ||
            (valueIsNumber === false)) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage : 'This field can only contain numbers above ' + min;
      } else if ((((!min && max) && (value > max)) && (valueIsNumber === true)) ||
            (valueIsNumber === false)) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage : 'This field can only contain numbers above ' + min;
      } else if ((((min && max) && (value < min || value > max)) &&
            (valueIsNumber === true))
            || (valueIsNumber === false)) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage :
          'This field can only contain numbers between ' + min + ' and ' + max;
      } else {
        validation.valid = true;
      }
      break;
    }
    case 'email': {
      console.log(pattern.test(value));
      if (pattern.test(value) === false) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage : 'Please enter a valid email address';
      } else {
        validation.valid = true;
      }
      break;
    }
    case 'tel': {
      console.log(pattern);
      console.log(pattern.test(value));
      if (pattern.test(value) === false) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage : 'Please enter a valid phone number';
      } else {
        validation.valid = true;
      }
      break;
    }
    case 'text': {
      console.log(pattern);
      console.log(pattern.test(value));
      if (pattern.test(value) === false) {
        validation.valid = false;
        validation.message = invalidMessage !== undefined ? invalidMessage : 'This field only accepts alphanumeric characters';
      } else {
        validation.valid = true;
      }
      break;
    }
    default:
      break;
  }
