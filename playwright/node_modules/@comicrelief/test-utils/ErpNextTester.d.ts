import { ErpDocTypeMetadata, ErpResources } from '@comicrelief/data-models/schemas/erp/models/common';
import { QueryRequestProps } from '@comicrelief/data-models/schemas/erp/models/requests/QueryRequest';
import { AxiosInstance, AxiosResponse, Method } from 'axios';
import { Tester } from './Tester';
/**
 * Describes an ERP Next reference
 */
interface ErpNextReference {
    resource: ErpResources;
    name: string;
}
/**
 * Describes a response from Erp Next
 */
interface ErpResponse<T = unknown> {
    data: T;
}
/**
 * Retrieves and manages
 * entities on ERP Next
 *
 * @class
 */
export declare class ErpNextTester extends Tester<ErpNextReference> {
    apiUrl: string;
    apiClient: string;
    apiSecret: string;
    defaults: {
        retries: number;
        sleep: number;
    };
    /**
     * Constructs an ERP Next Tester instance.
     *
     * If `apiUrl`, `apiClient` or `apiClient` are falsy
     * tries to retrieve them from the environment.
     *
     * Retries defaults are designed to
     * retry the functions for 10 minutes.
     *
     * @param apiUrl - defaults to `process.env.TESTS_ERPNEXT_API_URL || process.env.ERPNEXT_API_URL`
     * @param apiClient - defaults to `process.env.TESTS_ERPNEXT_API_CLIENT || process.env.ERPNEXT_API_CLIENT`
     * @param apiSecret - defaults to `process.env.TESTS_ERPNEXT_API_SECRET || process.env.ERPNEXT_API_SECRET`
     * @param defaultRetries - defaults to 600
     * @param defaultSleep - defaults to 1000 (1 minute)
     */
    constructor(apiUrl?: string, apiClient?: string, apiSecret?: string, defaultRetries?: number, defaultSleep?: number);
    /**
     * Returns a pre-configured
     * axios instance.
     *
     * NB: This just makes tests easier
     */
    getClient(): AxiosInstance;
    /**
     * Queries ERP Next
     *
     * @param resource - Required
     * @param name - Optional, it is appended to the URL if provided
     * @param method - Optional, defaults to GET
     * @param data - Optional, defaults to undefined
     * @param params - Optional, extra params to be passed to `toEndpoint`
     */
    query<Data, Response>(resource: ErpResources, name?: string, method?: Method, data?: Data, params?: Partial<QueryRequestProps>): Promise<AxiosResponse<ErpResponse<Response>>>;
    /**
     * Lists the entities
     * for the given resource
     *
     * @param resource
     * @param params - Optional, extra params to be passed to `toEndpoint`
     */
    list<T = unknown>(resource: ErpResources, params?: Partial<QueryRequestProps>): Promise<T[]>;
    /**
     * Finds all the entities
     * matching the given parameters.
     * Retries if no entity is found.
     * Retries default to 600 requests
     * with 1000ms sleep time (10 minutes)
     *
     * @param resource
     * @param params
     * @param retries How many times we should retry if we don't find any result
     * @param sleep Time interval in milliseconds between each retry
     */
    find<T = unknown>(resource: ErpResources, params?: Partial<QueryRequestProps>, retries?: number, sleep?: number): Promise<T[]>;
    /**
     * Finds one entity matching
     * the search.
     *
     * Works like `find` but saves us
     * from storing to a temp variable,
     * i.e. `instances` to just get
     * the first item of the array.
     *
     * This is quite common when we
     * perform queries that in nature
     * should return just one entity.
     *
     * @param resource
     * @param params
     * @param retries
     * @param sleep
     * @param unique - Whether only one instance should be found
     */
    findOne<T = unknown>(resource: ErpResources, params?: Partial<QueryRequestProps>, retries?: number, sleep?: number, unique?: boolean): Promise<T>;
    /**
     * Gets a resource instance.
     * Retries if the request fails (i.e. 404).
     * Retries default to 600 requests
     * with 1000ms sleep time (10 minutes)
     *
     * @param resource
     * @param name
     * @param retries How many times we should retry if we don't find the resource
     * @param sleep Time interval in milliseconds between each retry
     */
    get<T = unknown>(resource: ErpResources, name: string, retries?: number, sleep?: number): Promise<T>;
    /**
     * Creates an entity in ERP Next
     *
     * @param resource
     * @param values
     * @param consume - Whether the entity should be deleted after the test
     */
    create<T>(resource: ErpResources, values: T, consume?: boolean): Promise<T & ErpDocTypeMetadata>;
    /**
     * Puts an entity in ERP Next
     *
     * @param resource
     * @param name
     * @param values
     * @param createIfNotFound - Creates the entry if it is not found. Throws otherwise
     */
    put<T>(resource: ErpResources, name: string, values: T, createIfNotFound?: boolean): Promise<T & ErpDocTypeMetadata>;
    /**
     * Deletes a resource instance
     *
     * @param resource
     * @param name
     */
    delete(resource: ErpResources, name: string): Promise<void>;
    /**
     * @inheritdoc
     */
    removeReference(reference: ErpNextReference): Promise<void>;
}
export {};
//# sourceMappingURL=ErpNextTester.d.ts.map