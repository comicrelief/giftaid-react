"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTester = exports.BACKOFF_WAIT_UNIT = exports.BATCH_WRITES_MAXIMUM_RETRIES = exports.BATCH_WRITES_MAXIMUM_OPERATIONS = void 0;
var aws_sdk_1 = __importDefault(require("aws-sdk"));
var Tester_1 = require("../../Tester");
var utils_1 = require("../../utils");
/**
 * Maximum operations that can be performed
 * as part of a batchWrite call.
 * See: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html
 */
exports.BATCH_WRITES_MAXIMUM_OPERATIONS = 25;
/**
 * Maximum retries for a failed batch
 */
exports.BATCH_WRITES_MAXIMUM_RETRIES = 10;
/**
 * Unit of time (ms), used in waiting between retries
 */
exports.BACKOFF_WAIT_UNIT = 1000;
/**
 * Manages cleanup of S3 files
 * during feature tests.
 *
 * @class
 */
var DynamoTester = /** @class */ (function (_super) {
    __extends(DynamoTester, _super);
    /**
     * Call parent constructor,
     * Setup client and needed operation props.
     *
     * @param maxAttempts = BATCH_WRITES_MAXIMUM_RETRIES Max number to retry failed attempts
     * @param waitUnit    = 1000                         Unit of time in ms, to be multiplied by a digit
     */
    function DynamoTester(maxAttempts, waitUnit) {
        if (maxAttempts === void 0) { maxAttempts = exports.BATCH_WRITES_MAXIMUM_RETRIES; }
        if (waitUnit === void 0) { waitUnit = exports.BACKOFF_WAIT_UNIT; }
        var _this = _super.call(this) || this;
        _this.client = new aws_sdk_1.default.DynamoDB.DocumentClient({
            region: process.env.REGION,
        });
        _this.maxAttempts = maxAttempts;
        _this.waitUnit = waitUnit;
        return _this;
    }
    /**
     * Puts a row in the specified DynamoDB Table
     *
     * @param row
     * @param item
     */
    DynamoTester.prototype.put = function (row, item) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                params = {
                    TableName: row.TableName,
                    Item: item,
                };
                this.addReference(row);
                return [2 /*return*/, this.client.put(params).promise()];
            });
        });
    };
    /**
     * Gets the specified row
     *
     * @param row
     */
    DynamoTester.prototype.get = function (row) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                params = row;
                return [2 /*return*/, this.client.get(params).promise()];
            });
        });
    };
    /**
     * Returns an iterator
     * that will iterate through
     * all the entries on a DynamoDB table
     *
     * @param TableName
     * @param Limit
     * @param ScanInput - Optional parameters to pass to the scan call
     */
    DynamoTester.prototype.iterate = function (TableName, Limit, ScanInput) {
        if (Limit === void 0) { Limit = 100; }
        if (ScanInput === void 0) { ScanInput = {}; }
        return __asyncGenerator(this, arguments, function iterate_1() {
            var params, ExclusiveStartKey, done, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = __assign({ TableName: TableName,
                            Limit: Limit, ConsistentRead: true }, ScanInput);
                        done = false;
                        _a.label = 1;
                    case 1:
                        if (!!done) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await(this.client.scan(__assign(__assign({}, params), { ExclusiveStartKey: ExclusiveStartKey })).promise())];
                    case 2:
                        response = _a.sent();
                        // response.LastEvaluatedKey is not undefined
                        // if the scan operation didn't fully scan the table
                        // so once we get the key as undefined
                        // we can deduct that the operation is completed
                        // and the iterator can return `done: true`
                        ExclusiveStartKey = response.LastEvaluatedKey;
                        done = Boolean(!ExclusiveStartKey);
                        return [4 /*yield*/, __await(response.Items || [])];
                    case 3: return [4 /*yield*/, _a.sent()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes the specified row
     *
     * @param row
     */
    DynamoTester.prototype.delete = function (row) {
        return __awaiter(this, void 0, void 0, function () {
            var params;
            return __generator(this, function (_a) {
                params = row;
                return [2 /*return*/, this.client.delete(params).promise()];
            });
        });
    };
    /**
     * @inheritdoc
     * @param row
     */
    DynamoTester.prototype.removeReference = function (row) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.delete(row);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Execute a batch write on a DynamoDB Table,
     * with retrials for unprocessed items due to throttling or whatever reason .
     *
     * @param batch
     * @param nextWait - Optional wait (ms) used for exponential backoff
     * @param attempt - Optional attempt counter to avoid infinite retries
     * @returns Promise
     */
    DynamoTester.prototype.batchWrite = function (batch, nextWait, attempt) {
        if (nextWait === void 0) { nextWait = 0; }
        if (attempt === void 0) { attempt = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var response, wait;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.batchWrite(batch).promise()];
                    case 1:
                        response = _a.sent();
                        if (!(response.UnprocessedItems && Object.entries(response.UnprocessedItems).length > 0)) return [3 /*break*/, 4];
                        if (!(attempt < this.maxAttempts)) return [3 /*break*/, 3];
                        wait = nextWait + Math.ceil(Math.random() * 10) * this.waitUnit;
                        return [4 /*yield*/, utils_1.sleep(wait)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.batchWrite({ RequestItems: response.UnprocessedItems }, wait, attempt + 1)];
                    case 3: throw new Error("Failed to process some of the requests: " + JSON.stringify(response));
                    case 4: return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Truncates a DynamoDB Table
     *
     * @param TableName
     * @param keyGenerator - Optional row key generator
     * @param ScanInput - Optional parameters to pass to the scan call
     * @returns Promise
     */
    DynamoTester.prototype.truncate = function (TableName, keyGenerator, ScanInput) {
        var e_1, _a;
        if (keyGenerator === void 0) { keyGenerator = null; }
        if (ScanInput === void 0) { ScanInput = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var batches, recordsIterator, recordsIterator_1, recordsIterator_1_1, records, batch, e_1_1;
            var _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        batches = [];
                        recordsIterator = this.iterate(TableName, exports.BATCH_WRITES_MAXIMUM_OPERATIONS, ScanInput);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, 7, 12]);
                        recordsIterator_1 = __asyncValues(recordsIterator);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, recordsIterator_1.next()];
                    case 3:
                        if (!(recordsIterator_1_1 = _c.sent(), !recordsIterator_1_1.done)) return [3 /*break*/, 5];
                        records = recordsIterator_1_1.value;
                        if (records.length > 0) {
                            batch = {
                                RequestItems: (_b = {},
                                    _b[TableName] = records.map(function (record) { return ({
                                        DeleteRequest: {
                                            // This needs to be an object
                                            Key: keyGenerator ? keyGenerator(record) : record,
                                        },
                                    }); }),
                                    _b),
                            };
                            batches.push(batch);
                        }
                        _c.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _c.trys.push([7, , 10, 11]);
                        if (!(recordsIterator_1_1 && !recordsIterator_1_1.done && (_a = recordsIterator_1.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _a.call(recordsIterator_1)];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, Promise.all(batches.map(function (batch) { return _this.batchWrite(batch); }))];
                }
            });
        });
    };
    return DynamoTester;
}(Tester_1.Tester));
exports.DynamoTester = DynamoTester;
//# sourceMappingURL=DynamoTester.js.map