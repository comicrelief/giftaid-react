/// <reference types="node" />
import http from 'http';
import { AxiosResponse } from 'axios';
import { Tester } from '../../Tester';
export interface QueueReference {
    server: http.Server;
    resolved: boolean;
    reject: (_reason: unknown) => void;
}
export interface QueueMessage {
    MessageBody: string;
}
/**
 * Type Guard assuring
 * the object is a QueueMessage
 *
 * @param obj
 */
export declare const isQueueMessage: (obj: unknown) => obj is QueueMessage;
/**
 * Thrown if a queue server times out
 */
export declare class QueueTimeout extends Error {
    /**
     * Clearly marks the exception as a QueueTimeout.
     * Runtime checks against Error subclasses are the worst
     * and they hardly map correctly during TypeScript compilation.
     */
    readonly isQueueTimeout: boolean;
    constructor(message?: string);
}
/**
 * Handles local queues and exposes
 * methods to redirect messages
 * so that they can be passed to local lambdas.
 */
export declare class QueueTester extends Tester<QueueReference> {
    static DEFAULT_PORT: number;
    /**
     * Listens at the given port and closes
     * the server once a request is received.
     * The server is closed once `cleanup`
     * is called, automatically, removing
     * the risk of having multiple instances
     * running at the same port.
     *
     * Resolves once the request has been
     * completely read.
     *
     * @param port
     * @param timeout Timeout for the server
     */
    listen(port?: number, timeout?: number): Promise<QueueMessage>;
    /**
     * Redirects a message received using
     * QueueTester.listen at the given port
     * (defaults to QueueTester.DEFAULT_PORT)
     * to the given HTTP endpoint
     *
     * Resolves once the message has been sent.
     *
     * @param endpoint Fully qualified HTTP address
     * @param headers Headers to be used against the endpoint
     * @param port Port to be used with QueueTester.listen
     * @param timeout Timeout for the server
     */
    queueTo(endpoint: string, headers?: {}, port?: number, timeout?: number): Promise<AxiosResponse<unknown>>;
    /**
     * @inheritdoc
     */
    removeReference(reference: QueueReference): Promise<void>;
}
//# sourceMappingURL=QueueTester.d.ts.map