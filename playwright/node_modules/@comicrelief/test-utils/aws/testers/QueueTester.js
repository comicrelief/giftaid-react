"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueTester = exports.QueueTimeout = exports.isQueueMessage = void 0;
/* eslint-disable max-classes-per-file */
var http_1 = __importDefault(require("http"));
var querystring_1 = __importDefault(require("querystring"));
var axios_1 = __importDefault(require("axios"));
var Tester_1 = require("../../Tester");
/**
 * Type Guard assuring
 * the object is a QueueMessage
 *
 * @param obj
 */
var isQueueMessage = function (obj) {
    if (typeof obj !== 'object') {
        return false;
    }
    if (!obj) {
        return false;
    }
    if (!('MessageBody' in obj)) {
        return false;
    }
    return true;
};
exports.isQueueMessage = isQueueMessage;
/**
 * Thrown if a queue server times out
 */
var QueueTimeout = /** @class */ (function (_super) {
    __extends(QueueTimeout, _super);
    function QueueTimeout(message) {
        if (message === void 0) { message = 'Listening server timed out'; }
        var _this = _super.call(this, message) || this;
        /**
         * Clearly marks the exception as a QueueTimeout.
         * Runtime checks against Error subclasses are the worst
         * and they hardly map correctly during TypeScript compilation.
         */
        _this.isQueueTimeout = true;
        return _this;
    }
    return QueueTimeout;
}(Error));
exports.QueueTimeout = QueueTimeout;
/**
 * Handles local queues and exposes
 * methods to redirect messages
 * so that they can be passed to local lambdas.
 */
var QueueTester = /** @class */ (function (_super) {
    __extends(QueueTester, _super);
    function QueueTester() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Listens at the given port and closes
     * the server once a request is received.
     * The server is closed once `cleanup`
     * is called, automatically, removing
     * the risk of having multiple instances
     * running at the same port.
     *
     * Resolves once the request has been
     * completely read.
     *
     * @param port
     * @param timeout Timeout for the server
     */
    QueueTester.prototype.listen = function (port, timeout) {
        if (timeout === void 0) { timeout = 10000; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var server = http_1.default.createServer();
                        var timeoutReference;
                        var reference = {
                            server: server,
                            resolved: false,
                            reject: reject,
                        };
                        /**
                         * Close the server and return
                         *
                         * @param parsed Possibly the result of our queued function
                         */
                        var close = function (parsed) {
                            if (timeoutReference) {
                                global.clearTimeout(timeoutReference);
                            }
                            server.close();
                            if (exports.isQueueMessage(parsed)) {
                                reference.resolved = true;
                                return resolve(parsed);
                            }
                            reference.resolved = true;
                            return reject(parsed);
                        };
                        timeoutReference = setTimeout(function () { return close(new QueueTimeout()); }, timeout);
                        server.on('request', function (request, response) {
                            var segments = [];
                            request.on('data', function (chunk) {
                                segments.push(chunk.toString());
                            });
                            request.on('end', function () {
                                response.end('ok', function () {
                                    var body = segments.join('');
                                    var parsed = querystring_1.default.decode(body);
                                    close(parsed);
                                });
                            });
                        });
                        _this.addReference(reference);
                        server.listen(port || _this.constructor.DEFAULT_PORT);
                    })];
            });
        });
    };
    /**
     * Redirects a message received using
     * QueueTester.listen at the given port
     * (defaults to QueueTester.DEFAULT_PORT)
     * to the given HTTP endpoint
     *
     * Resolves once the message has been sent.
     *
     * @param endpoint Fully qualified HTTP address
     * @param headers Headers to be used against the endpoint
     * @param port Port to be used with QueueTester.listen
     * @param timeout Timeout for the server
     */
    QueueTester.prototype.queueTo = function (endpoint, headers, port, timeout) {
        if (headers === void 0) { headers = {}; }
        if (timeout === void 0) { timeout = 10000; }
        return __awaiter(this, void 0, void 0, function () {
            var message, payload, config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listen(port, timeout)];
                    case 1:
                        message = _a.sent();
                        payload = {
                            Records: [{ body: message.MessageBody }],
                        };
                        config = { headers: headers };
                        return [2 /*return*/, axios_1.default.post(endpoint, payload, config)];
                }
            });
        });
    };
    /**
     * @inheritdoc
     */
    // eslint-disable-next-line class-methods-use-this
    QueueTester.prototype.removeReference = function (reference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, reference.server.close()];
                    case 1:
                        _a.sent();
                        if (!reference.resolved) {
                            reference.reject(null);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    QueueTester.DEFAULT_PORT = 4576;
    return QueueTester;
}(Tester_1.Tester));
exports.QueueTester = QueueTester;
//# sourceMappingURL=QueueTester.js.map