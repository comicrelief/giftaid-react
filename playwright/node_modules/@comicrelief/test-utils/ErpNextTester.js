"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErpNextTester = void 0;
var QueryRequest_1 = require("@comicrelief/data-models/schemas/erp/models/requests/QueryRequest");
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("./utils");
var Tester_1 = require("./Tester");
/**
 * Retrieves and manages
 * entities on ERP Next
 *
 * @class
 */
var ErpNextTester = /** @class */ (function (_super) {
    __extends(ErpNextTester, _super);
    /**
     * Constructs an ERP Next Tester instance.
     *
     * If `apiUrl`, `apiClient` or `apiClient` are falsy
     * tries to retrieve them from the environment.
     *
     * Retries defaults are designed to
     * retry the functions for 10 minutes.
     *
     * @param apiUrl - defaults to `process.env.TESTS_ERPNEXT_API_URL || process.env.ERPNEXT_API_URL`
     * @param apiClient - defaults to `process.env.TESTS_ERPNEXT_API_CLIENT || process.env.ERPNEXT_API_CLIENT`
     * @param apiSecret - defaults to `process.env.TESTS_ERPNEXT_API_SECRET || process.env.ERPNEXT_API_SECRET`
     * @param defaultRetries - defaults to 600
     * @param defaultSleep - defaults to 1000 (1 minute)
     */
    function ErpNextTester(apiUrl, apiClient, apiSecret, defaultRetries, defaultSleep) {
        if (apiUrl === void 0) { apiUrl = ''; }
        if (apiClient === void 0) { apiClient = ''; }
        if (apiSecret === void 0) { apiSecret = ''; }
        if (defaultRetries === void 0) { defaultRetries = 10 * 60; }
        if (defaultSleep === void 0) { defaultSleep = 1000; }
        var _this = _super.call(this) || this;
        _this.apiUrl = apiUrl || process.env.TESTS_ERPNEXT_API_URL || process.env.ERPNEXT_API_URL || '';
        _this.apiClient = apiClient || process.env.TESTS_ERPNEXT_API_CLIENT || process.env.ERPNEXT_API_CLIENT || '';
        _this.apiSecret = apiSecret || process.env.TESTS_ERPNEXT_API_SECRET || process.env.ERPNEXT_API_SECRET || '';
        _this.defaults = {
            retries: defaultRetries,
            sleep: defaultSleep,
        };
        return _this;
    }
    /**
     * Returns a pre-configured
     * axios instance.
     *
     * NB: This just makes tests easier
     */
    ErpNextTester.prototype.getClient = function () {
        return axios_1.default.create({
            headers: {
                'Content-Type': 'application/json',
                Authorization: "token " + this.apiClient + ":" + this.apiSecret,
            },
        });
    };
    /**
     * Queries ERP Next
     *
     * @param resource - Required
     * @param name - Optional, it is appended to the URL if provided
     * @param method - Optional, defaults to GET
     * @param data - Optional, defaults to undefined
     * @param params - Optional, extra params to be passed to `toEndpoint`
     */
    ErpNextTester.prototype.query = function (resource, name, method, data, params) {
        if (method === void 0) { method = 'GET'; }
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                url = QueryRequest_1.toEndpoint(this.apiUrl, __assign({ resource: resource,
                    name: name }, params));
                response = this.getClient().request({
                    url: url,
                    method: method,
                    data: data,
                });
                return [2 /*return*/, response];
            });
        });
    };
    /**
     * Lists the entities
     * for the given resource
     *
     * @param resource
     * @param params - Optional, extra params to be passed to `toEndpoint`
     */
    ErpNextTester.prototype.list = function (resource, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query(resource, undefined, 'GET', undefined, params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data.data];
                }
            });
        });
    };
    /**
     * Finds all the entities
     * matching the given parameters.
     * Retries if no entity is found.
     * Retries default to 600 requests
     * with 1000ms sleep time (10 minutes)
     *
     * @param resource
     * @param params
     * @param retries How many times we should retry if we don't find any result
     * @param sleep Time interval in milliseconds between each retry
     */
    ErpNextTester.prototype.find = function (resource, params, retries, sleep) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var attempt, instances;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        attempt = function () { return __awaiter(_this, void 0, void 0, function () {
                            var instances;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.list(resource, params)];
                                    case 1:
                                        instances = _a.sent();
                                        if (instances.length === 0) {
                                            throw new Error("No resources of type '" + resource + "' where found for the query: '" + JSON.stringify(params) + "'.");
                                        }
                                        return [2 /*return*/, instances];
                                }
                            });
                        }); };
                        return [4 /*yield*/, utils_1.retry(attempt, retries || this.defaults.retries, sleep || this.defaults.sleep)];
                    case 1:
                        instances = _a.sent();
                        return [2 /*return*/, instances];
                }
            });
        });
    };
    /**
     * Finds one entity matching
     * the search.
     *
     * Works like `find` but saves us
     * from storing to a temp variable,
     * i.e. `instances` to just get
     * the first item of the array.
     *
     * This is quite common when we
     * perform queries that in nature
     * should return just one entity.
     *
     * @param resource
     * @param params
     * @param retries
     * @param sleep
     * @param unique - Whether only one instance should be found
     */
    ErpNextTester.prototype.findOne = function (resource, params, retries, sleep, unique) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var instances;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.find(resource, params, retries, sleep)];
                    case 1:
                        instances = _a.sent();
                        if (unique && instances.length > 1) {
                            throw new Error("Found more than one instance of '" + resource + "': " + JSON.stringify(instances));
                        }
                        return [2 /*return*/, instances[0]];
                }
            });
        });
    };
    /**
     * Gets a resource instance.
     * Retries if the request fails (i.e. 404).
     * Retries default to 600 requests
     * with 1000ms sleep time (10 minutes)
     *
     * @param resource
     * @param name
     * @param retries How many times we should retry if we don't find the resource
     * @param sleep Time interval in milliseconds between each retry
     */
    ErpNextTester.prototype.get = function (resource, name, retries, sleep) {
        return __awaiter(this, void 0, void 0, function () {
            var attempt, instance;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!name) {
                            throw new Error("name is invalid: '" + JSON.stringify(name) + "'");
                        }
                        attempt = function () { return __awaiter(_this, void 0, void 0, function () {
                            var response, error_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, this.query(resource, name, 'GET')];
                                    case 1:
                                        response = _a.sent();
                                        return [2 /*return*/, response.data.data];
                                    case 2:
                                        error_1 = _a.sent();
                                        if (error_1.response && error_1.response.status === 404) {
                                            throw new Error("Resource '" + resource + "' with name '" + name + "' was not found on ERP Next.");
                                        }
                                        throw error_1;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, utils_1.retry(attempt, retries || this.defaults.retries, sleep || this.defaults.sleep)];
                    case 1:
                        instance = _a.sent();
                        return [2 /*return*/, instance];
                }
            });
        });
    };
    /**
     * Creates an entity in ERP Next
     *
     * @param resource
     * @param values
     * @param consume - Whether the entity should be deleted after the test
     */
    ErpNextTester.prototype.create = function (resource, values, consume) {
        if (consume === void 0) { consume = false; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query(resource, undefined, 'POST', values)];
                    case 1:
                        response = _a.sent();
                        if (consume) {
                            this.addReference({
                                resource: resource,
                                name: response.data.data.name,
                            });
                        }
                        return [2 /*return*/, response.data.data];
                }
            });
        });
    };
    /**
     * Puts an entity in ERP Next
     *
     * @param resource
     * @param name
     * @param values
     * @param createIfNotFound - Creates the entry if it is not found. Throws otherwise
     */
    ErpNextTester.prototype.put = function (resource, name, values, createIfNotFound) {
        if (createIfNotFound === void 0) { createIfNotFound = false; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.query(resource, name, 'PUT', values)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data.data];
                    case 2:
                        error_2 = _a.sent();
                        if (error_2.response && error_2.response.status === 404 && createIfNotFound) {
                            return [2 /*return*/, this.create(resource, values)];
                        }
                        throw error_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a resource instance
     *
     * @param resource
     * @param name
     */
    ErpNextTester.prototype.delete = function (resource, name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query(resource, name, 'DELETE')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @inheritdoc
     */
    ErpNextTester.prototype.removeReference = function (reference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.delete(reference.resource, reference.name)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ErpNextTester;
}(Tester_1.Tester));
exports.ErpNextTester = ErpNextTester;
//# sourceMappingURL=ErpNextTester.js.map