import { AxiosInstance } from 'axios';
import { Tester } from './Tester';
/**
 * Copied from comicrelief/data-models
 * NB: Should import it from there but it would make
 * data-models a dependency for test-utils
 */
export declare enum FetchEmailsRequestFilterKeys {
    UUID = "uuid",
    SENDER = "sender",
    RECEIVER = "receiver",
    SUBJECT = "subject",
    HTML = "html"
}
/**
 * Copied from comicrelief/data-models
 * NB: Should import it from there but it would make
 * data-models a dependency for test-utils
 */
export interface Email {
    uuid: string;
    sender: string;
    receiver: string;
    sendAt: string;
    receivedAt: string;
    html: string;
}
/**
 * Identifies an Email reference
 */
interface EmailReference {
    filterKey: FetchEmailsRequestFilterKeys;
    filterValue: string;
}
/**
 * Retrieves and cleans up email
 * references stored on
 * `serverless-tests-platform`
 *
 * @class
 */
export declare class EmailTester extends Tester<EmailReference> {
    apiKey: string;
    apiUrl: string;
    client: AxiosInstance;
    constructor(apiUrl?: string, apiKey?: string);
    /**
     * Returns the endpoints
     * of Serverless Tests Platform
     */
    get endpoints(): {
        FETCH: string;
    };
    /**
     * Queries Serverless Tests Platform
     * for a number of times
     *
     * @param reference
     * @param consume Whether the emails should be deleted upon retrieval
     * @param retries How many times we should retry if we don't find any email
     * @param ms Time interval in milliseconds between each retry
     */
    query(reference: EmailReference, consume?: boolean, retries?: number, ms?: number): Promise<Email[]>;
    /**
     * @inheritdoc
     */
    removeReference(reference: EmailReference): Promise<void>;
}
export {};
//# sourceMappingURL=EmailTester.d.ts.map