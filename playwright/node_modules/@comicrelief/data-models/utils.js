"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnapshottableForModel = exports.getSnapshottableValues = exports.generateList = exports.getDate = exports.getTimestamp = exports.getUnixTimestamp = exports.getMobile = exports.getEmail = exports.TEST_MOBILE_PREFIX = exports.TEST_EMAIL_DOMAIN = exports.getUrl = exports.getUuid = exports.getString = exports.getBoolean = exports.getInteger = exports.getNumber = exports.getCharacter = exports.ALPHABET = exports.ALPHABET_NUMBERS = exports.ALPHABET_LOWERCASE = exports.ALPHABET_UPPERCASE = exports.getRandomElement = exports.pick = exports.omit = exports.overrideFromMocks = exports.makeDefaultMocks = exports.makeNullOverrideMocks = exports.makeOmitMocks = exports.makeOverrideMocks = exports.override = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
var lodash_1 = __importDefault(require("lodash"));
var yup = __importStar(require("yup"));
var uuid_1 = require("uuid");
var validation_1 = require("./validation");
/**
 * Merges two objects, where the second
 * is a partial of the first.
 *
 * @param instance
 * @param overrides
 */
var override = function (instance, overrides) { return (__assign(__assign({}, instance), overrides)); };
exports.override = override;
/**
 * Makes a collection of override mocks.
 *
 * One for every key/value pair in `overrides`.
 *
 * @param instance
 * @param overrides
 * @param _prefix
 */
var makeOverrideMocks = function (instance, overrides, _prefix) {
    if (_prefix === void 0) { _prefix = ''; }
    var mocks = {};
    var prefix = _prefix ? _prefix + "_" : '';
    Object.entries(overrides).forEach(function (_a) {
        var _b;
        var key = _a[0], value = _a[1];
        var mockKey = prefix + lodash_1.default.snakeCase(key).toUpperCase();
        var overrideValues = (_b = {}, _b[key] = value, _b);
        mocks[mockKey] = exports.override(instance, overrideValues);
    });
    return mocks;
};
exports.makeOverrideMocks = makeOverrideMocks;
/**
 * Makes a collection of omit mocks.
 *
 * One for every key in `keys`.
 *
 * @param instance
 * @param keys
 * @param _prefix
 */
var makeOmitMocks = function (instance, keys, _prefix) {
    if (_prefix === void 0) { _prefix = 'MISSING'; }
    var mocks = {};
    var prefix = _prefix ? _prefix + "_" : '';
    keys.forEach(function (key) {
        var mockKey = prefix + lodash_1.default.snakeCase(String(key)).toUpperCase();
        mocks[mockKey] = exports.omit(instance, [key]);
    });
    return mocks;
};
exports.makeOmitMocks = makeOmitMocks;
/**
 * Makes a collection of override mocks based on `instance`.
 *
 * For every property in `keys`, a mock will be generated where that
 *  property is `null`.
 *
 * @param instance
 * @param keys
 */
var makeNullOverrideMocks = function (instance, keys) {
    var nullables = {};
    keys.forEach(function (key) {
        nullables[key] = null;
    });
    return exports.makeOverrideMocks(instance, nullables, 'NULL');
};
exports.makeNullOverrideMocks = makeNullOverrideMocks;
/**
 * Makes a selection of standard valid and invalid mocks.
 *
 * - `DEFAULT` mocks based on the `valid` and `invalid` objects.
 * - `INVALID_` mocks for every property on the `invalid` object.
 * - `MISSING_` and `NULL_` mocks for every property on the `valid` object.
 *     (`optional` and `nullable` params determine which of these should
 *     be valid and which ones should be invalid.)
 *
 * @param valid
 * @param invalid
 * @param nullable - array of keys for which the `NULL_` mock is valid.
 * @param optional - array of keys for which the `MISSING_` mock is valid.
 */
var makeDefaultMocks = function (valid, invalid, nullable, optional) {
    if (nullable === void 0) { nullable = []; }
    if (optional === void 0) { optional = []; }
    var keys = Object.keys(valid);
    var required = keys.filter(function (key) { return !optional.includes(key); });
    var nonNullable = keys.filter(function (key) { return !nullable.includes(key); });
    return {
        valid: __assign(__assign({ DEFAULT: valid }, exports.makeOmitMocks(valid, optional)), exports.makeNullOverrideMocks(valid, nullable)),
        invalid: __assign(__assign(__assign({ DEFAULT: invalid }, exports.makeOverrideMocks(valid, invalid, 'INVALID')), exports.makeOmitMocks(valid, required)), exports.makeNullOverrideMocks(valid, nonNullable))
    };
};
exports.makeDefaultMocks = makeDefaultMocks;
/**
 * Generates mocks overriding a property
 * from the given object of mocks.
 * Helpful for models that define a key
 * that is actually another model
 * and of which we have mocks.
 *
 * @param origin
 * @param property
 * @param mocks
 */
var overrideFromMocks = function (origin, property, mocks, commonOverrides) {
    if (commonOverrides === void 0) { commonOverrides = {}; }
    var mappedMocks = Object.fromEntries(Object.entries(mocks)
        .map(function (_a) {
        var _b;
        var key = _a[0], mock = _a[1];
        var mappedKey = "OVERRIDE_" + property.toUpperCase() + "_WITH_" + key;
        // We need to deeply merge with _.merge
        // our mocks overrides and the provided commonOverrides
        // as the origin mock might deviate from the mocks by one or two properties.
        var mappedValue = lodash_1.default.merge(exports.override(origin, (_b = {}, _b[property] = mock, _b)), commonOverrides);
        return [mappedKey, mappedValue];
    }));
    return mappedMocks;
};
exports.overrideFromMocks = overrideFromMocks;
/**
 * Clones an object, omitting a list of keys
 *
 * @param instance
 * @param keys
 */
var omit = function (instance, keys) {
    var entries = Object.entries(instance).filter(function (_a) {
        var key = _a[0];
        return !keys.includes(key);
    });
    var result = Object.fromEntries(entries);
    return result;
};
exports.omit = omit;
/**
 * Filters an object, returning
 * only the specified keys
 *
 * @param instance
 * @param keys
 */
var pick = function (instance, keys) {
    var entries = Object.entries(instance).filter(function (_a) {
        var key = _a[0];
        return keys.includes(key);
    });
    var result = Object.fromEntries(entries);
    return result;
};
exports.pick = pick;
/**
 * Gets a random element from an array
 *
 * @param items
 */
var getRandomElement = function (items) {
    var collection = Array.isArray(items)
        ? items
        : Object.values(items);
    return collection[exports.getInteger(0, collection.length - 1)];
};
exports.getRandomElement = getRandomElement;
exports.ALPHABET_UPPERCASE = 'QWERTYUIOPASDFGHJKLZXCVBNM';
exports.ALPHABET_LOWERCASE = 'qwertyuiopasdfghjklzxcvbnm';
exports.ALPHABET_NUMBERS = '1234567890';
exports.ALPHABET = {
    UPPERCASE: exports.ALPHABET_UPPERCASE,
    LOWERCASE: exports.ALPHABET_LOWERCASE,
    NUMBERS: exports.ALPHABET_NUMBERS,
};
/**
 * Returns a random character
 * given the provided options
 *
 * @param param0
 * @param param0.uppercase
 * @param param0.lowercase
 * @param param0.numbers
 */
var getCharacter = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.uppercase, uppercase = _c === void 0 ? true : _c, _d = _b.lowercase, lowercase = _d === void 0 ? true : _d, _e = _b.numbers, numbers = _e === void 0 ? true : _e;
    var alphabet = '';
    if (uppercase) {
        alphabet += exports.ALPHABET.UPPERCASE;
    }
    if (lowercase) {
        alphabet += exports.ALPHABET.LOWERCASE;
    }
    if (numbers) {
        alphabet += exports.ALPHABET.NUMBERS;
    }
    var index = Math.floor(Math.random() * alphabet.length);
    return alphabet[index];
};
exports.getCharacter = getCharacter;
/**
 * Returns a number between `min` and `max`
 *
 * @param min
 * @param max
 */
var getNumber = function (min, max, _a) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 10; }
    var _b = _a === void 0 ? {} : _a, _c = _b.decimals, decimals = _c === void 0 ? 2 : _c;
    if (min > max) {
        throw new Error("Cannot pick a min (" + min + ") greater than max (" + max + ").");
    }
    var randomNumber = (Math.random() * (max - min)) + min;
    if (decimals > -1) {
        var magnitude = Math.pow(10, decimals);
        return Math.round(randomNumber * magnitude) / magnitude;
    }
    return randomNumber;
};
exports.getNumber = getNumber;
/**
 * Returns a integer between `min` and `max` (inclusive)
 *
 * @param min
 * @param max
 */
var getInteger = function (min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 10; }
    return exports.getNumber(min, max, { decimals: 0 });
};
exports.getInteger = getInteger;
/**
 * Returns a random boolean value
 */
var getBoolean = function () { return exports.getRandomElement([true, false]); };
exports.getBoolean = getBoolean;
/**
 * Returns a random string
 * given the provided options
 *
 * @param length
 * @param param1
 * @param param1.uppercase
 * @param param1.lowercase
 * @param param1.numbers
 */
var getString = function (length, _a) {
    if (length === void 0) { length = 1; }
    var _b = _a === void 0 ? {} : _a, _c = _b.uppercase, uppercase = _c === void 0 ? true : _c, _d = _b.lowercase, lowercase = _d === void 0 ? true : _d, _e = _b.numbers, numbers = _e === void 0 ? true : _e;
    return Array.from({ length: length }, function () { return exports.getCharacter({ uppercase: uppercase, lowercase: lowercase, numbers: numbers }); }).join('');
};
exports.getString = getString;
/**
 * Re-exports uuid.v4
 * for convenience
 */
var getUuid = function () { return uuid_1.v4(); };
exports.getUuid = getUuid;
/**
 * Generates a random URL
 *
 * @param param0 Options
 * @param param0.baseUrl Defaults to 'www.comicrelief.com'
 * @param param0.path Defaults to '/'
 * @param param0.https Protocol to use, defaults to 'https'
 * @param param0.randomSuffix Whether a random suffix should be postpended to generate unique URLs
 */
var getUrl = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.baseUrl, baseUrl = _c === void 0 ? 'www.comicrelief.com' : _c, _d = _b.path, path = _d === void 0 ? '' : _d, _e = _b.proto, proto = _e === void 0 ? 'https' : _e, _f = _b.randomSuffix, randomSuffix = _f === void 0 ? true : _f;
    return [
        proto + "://",
        baseUrl,
        path,
        randomSuffix ? "/" + exports.getString(10) : ''
    ].join('');
};
exports.getUrl = getUrl;
/**
 * Domain for test emails.
 * Managed by `serverless-tests-platform`
 */
exports.TEST_EMAIL_DOMAIN = 'test.sls.comicrelief.com';
/**
 * Prefix for UK mobile numbers
 */
exports.TEST_MOBILE_PREFIX = '+447';
/**
 * Generates an email address
 */
var getEmail = function () { return exports.getString(16) + "@" + exports.TEST_EMAIL_DOMAIN; };
exports.getEmail = getEmail;
/**
 * Generates a mobile number
 */
var getMobile = function () { return "" + exports.TEST_MOBILE_PREFIX + exports.getString(9, { uppercase: false, lowercase: false, numbers: true }); };
exports.getMobile = getMobile;
/**
 * Returns a random unix timestamp
 * given the provided options
 *
 * @param base - Base timestamp from which we add/subtract the variance
 * @param magnitude - Variance coefficient (positive number for future dates, negative number for past dates)
 */
var getUnixTimestamp = function (base, magnitude) {
    if (base === void 0) { base = null; }
    if (magnitude === void 0) { magnitude = -7; }
    var start = base || Date.now();
    var variance = magnitude * Math.random() * 24 * 60 * 60 * 1000;
    return start + variance;
};
exports.getUnixTimestamp = getUnixTimestamp;
/**
 * Returns a random ISO timestamp
 * given the provided options
 *
 * @param base - Base timestamp from which we add/subtract the variance
 * @param magnitude - Variance coefficient (positive number for future dates, negative number for past dates)
 */
var getTimestamp = function (base, magnitude) {
    if (base === void 0) { base = null; }
    if (magnitude === void 0) { magnitude = -7; }
    var unixTimestamp = new Date(exports.getUnixTimestamp(base, magnitude));
    return unixTimestamp.toISOString();
};
exports.getTimestamp = getTimestamp;
/**
 * Returns a random date
 * given the provided options
 *
 * @param base - Base timestamp from which we add/subtract the variance
 * @param magnitude - Variance coefficient (positive number for future dates, negative number for past dates)
 */
var getDate = function (base, magnitude) {
    if (base === void 0) { base = null; }
    if (magnitude === void 0) { magnitude = -7; }
    return new Date(exports.getUnixTimestamp(base, magnitude));
};
exports.getDate = getDate;
/**
 * Returns an array of the requested length, with each element generated by
 * `itemGenerator`.
 *
 * @param length - Number of items.
 * @param itemGenerator - Function to generate an item in the array.
 */
var generateList = function (length, itemGenerator) { return Array.from(new Array(length), function () { return itemGenerator(); }); };
exports.generateList = generateList;
/**
 * Compares two objects or arrays recursively,
 * and returns a new object/array with just the values
 * that are identical between the two.
 *
 * Typing is not strict because the resulting object type
 * is something in the shape of a RecursivePartial<T>
 * which we don't care enough to define and maintain.
 * Since this util is to be used just to feed objects to
 * jest snapshots and nothing else, we can keep the loose type.
 *
 * A function can be provided that will be called with any mismatching
 * values. Its return value will be used for the current property.
 *
 * @param obj1
 * @param obj2
 * @param handleMismatches
 */
var getSnapshottableValues = function (obj1, obj2, handleMismatches) {
    var newObj1 = lodash_1.default.cloneDeep(obj1);
    var newObj2 = lodash_1.default.cloneDeep(obj2);
    var matches = {};
    Object.entries(newObj1).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        var typedKey = key;
        var typedValue = value;
        var otherValue = newObj2[typedKey];
        if (lodash_1.default.isEqual(typedValue, otherValue)) {
            matches[typedKey] = typedValue;
        }
        else if (lodash_1.default.isPlainObject(typedValue) || Array.isArray(typedValue)) {
            // Recursively compare nested values in objects and arrays.
            matches[typedKey] = exports.getSnapshottableValues(typedValue, otherValue, handleMismatches);
        }
        else if (handleMismatches) {
            matches[typedKey] = handleMismatches(typedValue, otherValue);
        }
    });
    return Array.isArray(obj1) ? Object.values(matches) : matches;
};
exports.getSnapshottableValues = getSnapshottableValues;
/**
 * Specialised version of `getSnapshottableValues` which takes a model and a
 * set of valid values, & runs validation twice to generate the two objects to
 * compare.
 *
 * Also provides a `handleMismatches` callback which will throw an error unless
 * there's special handling for a given mismatch.
 *
 * @param model
 * @param values
 * @param options
 */
var getSnapshottableForModel = function (model, values, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var validated1, validated2, handleMismatches;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, model.validate(values, options)];
                case 1:
                    validated1 = _a.sent();
                    // ensure any generated timestamps are different between validated1 and validated2.
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1); })];
                case 2:
                    // ensure any generated timestamps are different between validated1 and validated2.
                    _a.sent();
                    return [4 /*yield*/, model.validate(values, options)];
                case 3:
                    validated2 = _a.sent();
                    handleMismatches = function (value1, value2) {
                        // Replace UUIDs with hardcoded string.
                        if (yup.array().min(2).max(2).of(yup.string().uuid())
                            .isValidSync([value1, value2])) {
                            return '--- generated uuid ---';
                        }
                        // Replace timestamps with hardcoded string.
                        if (yup.array().min(2).max(2).of(validation_1.Timestamp)
                            .isValidSync([value1, value2])) {
                            return '--- generated timestamp ---';
                        }
                        // Throw error if any other kind of value.
                        throw new Error('Non-deterministic value is not uuid or timestamp.');
                    };
                    return [2 /*return*/, exports.getSnapshottableValues(validated1, validated2, handleMismatches)];
            }
        });
    });
};
exports.getSnapshottableForModel = getSnapshottableForModel;
//# sourceMappingURL=utils.js.map