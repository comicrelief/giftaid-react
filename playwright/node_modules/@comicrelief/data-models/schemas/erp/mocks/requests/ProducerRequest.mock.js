"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.producerRequestGenerator = exports.PRODUCER_REQUESTS = exports.PRODUCER_REQUESTS_INVALID = exports.PRODUCER_REQUESTS_VALID = exports.PRODUCER_REQUEST_VALUES = exports.PRODUCER_REQUEST_VALUES_INVALID = exports.PRODUCER_REQUEST_VALUES_VALID = exports.ACTIONS_MOCKS = void 0;
var utils_1 = require("../../../../utils");
var FundraiserSignupSubmit_mock_1 = require("../actions/FundraiserSignupSubmit.mock");
var GiftaidSubmit_mock_1 = require("../actions/GiftaidSubmit.mock");
var GiftaidUpdate_mock_1 = require("../actions/GiftaidUpdate.mock");
var IdentityAdd_mock_1 = require("../actions/IdentityAdd.mock");
var PayinSubmit_mock_1 = require("../actions/PayinSubmit.mock");
var SubscriptionExecute_mock_1 = require("../actions/SubscriptionExecute.mock");
var SubscriptionUpdate_mock_1 = require("../actions/SubscriptionUpdate.mock");
var TransactionExecute_mock_1 = require("../actions/TransactionExecute.mock");
var TransactionExecuteIvr_mock_1 = require("../actions/TransactionExecuteIvr.mock");
var TransactionSmsPut_mock_1 = require("../actions/TransactionSmsPut.mock");
var UserCreate_mock_1 = require("../actions/UserCreate.mock");
var GivingPagePut_mock_1 = require("../actions/justgiving/GivingPagePut.mock");
var PostalTicketPut_mock_1 = require("../actions/prize/PostalTicketPut.mock");
var PostalTicketSetState_mock_1 = require("../actions/prize/PostalTicketSetState.mock");
var PrizePut_mock_1 = require("../actions/prize/PrizePut.mock");
var TicketPut_mock_1 = require("../actions/prize/TicketPut.mock");
var PayinPut_mock_1 = require("../actions/psl/PayinPut.mock");
var OrderPut_mock_1 = require("../actions/shopify/OrderPut.mock");
// Please add the action mocks here
// so that they can all be tested
// against ProducerRequest
exports.ACTIONS_MOCKS = {
    PRIZE_PUTS: PrizePut_mock_1.PRIZE_PUTS,
    PAYIN_PUTS: PayinPut_mock_1.PAYIN_PUTS,
    TICKET_PUTS: TicketPut_mock_1.TICKET_PUTS,
    POSTAL_TICKET_PUTS: PostalTicketPut_mock_1.POSTAL_TICKET_PUTS,
    POSTAL_TICKET_SETSTATES: PostalTicketSetState_mock_1.POSTAL_TICKET_SETSTATES,
    IDENTITY_ADDS: IdentityAdd_mock_1.IDENTITY_ADDS,
    USER_CREATES: UserCreate_mock_1.USER_CREATES,
    TRANSACTION_EXECUTES: TransactionExecute_mock_1.TRANSACTION_EXECUTES,
    TRANSACTION_EXECUTES_IVR: TransactionExecuteIvr_mock_1.TRANSACTION_EXECUTES_IVR,
    TRANSACTION_SMS_PUTS: TransactionSmsPut_mock_1.TRANSACTION_SMS_PUTS,
    SUBSCRIPTION_EXECUTES: SubscriptionExecute_mock_1.SUBSCRIPTION_EXECUTES,
    SUBSCRIPTION_UPDATES: SubscriptionUpdate_mock_1.SUBSCRIPTION_UPDATES,
    GIFTAID_SUBMITS: GiftaidSubmit_mock_1.GIFTAID_SUBMITS,
    GIFTAID_UPDATES: GiftaidUpdate_mock_1.GIFTAID_UPDATES,
    PAYIN_SUBMITS: PayinSubmit_mock_1.PAYIN_SUBMITS,
    ORDER_PUTS: OrderPut_mock_1.ORDER_PUTS,
    FUNDRAISER_SIGNUP_SUBMIT_MOCKS: FundraiserSignupSubmit_mock_1.FUNDRAISER_SIGNUP_SUBMIT_MOCKS,
    GIVING_PAGE_PUT_MOCKS: GivingPagePut_mock_1.GIVING_PAGE_PUT_MOCKS,
};
exports.PRODUCER_REQUEST_VALUES_VALID = {
    actions: [
        UserCreate_mock_1.USER_CREATES.valid.DEFAULT,
        TransactionExecute_mock_1.TRANSACTION_EXECUTES.valid.DEFAULT,
    ],
};
exports.PRODUCER_REQUEST_VALUES_INVALID = {
    actions: [
        'abc',
    ],
};
exports.PRODUCER_REQUEST_VALUES = {
    valid: exports.PRODUCER_REQUEST_VALUES_VALID,
    invalid: exports.PRODUCER_REQUEST_VALUES_INVALID,
};
/**
 * Please add new models valid mocks to this list
 * of valid requests, so that mocks each model
 * can be tested as part of a ProducerRequest
 */
exports.PRODUCER_REQUESTS_VALID = {
    DEFAULT: exports.PRODUCER_REQUEST_VALUES.valid,
    VALID_PRIZE_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [PrizePut_mock_1.PRIZE_PUTS.valid.DEFAULT] }),
    VALID_TICKET_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TicketPut_mock_1.TICKET_PUTS.valid.DEFAULT] }),
    VALID_IDENTITY_ADD: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [IdentityAdd_mock_1.IDENTITY_ADDS.valid.DEFAULT] }),
    VALID_USER_CREATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [UserCreate_mock_1.USER_CREATES.valid.DEFAULT] }),
    VALID_TRANSACTION_EXECUTE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionExecute_mock_1.TRANSACTION_EXECUTES.valid.DEFAULT] }),
    VALID_TRANSACTION_EXECUTE_IVR: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionExecuteIvr_mock_1.TRANSACTION_EXECUTES_IVR.valid.DEFAULT] }),
    VALID_TRANSACTION_SMS_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionSmsPut_mock_1.TRANSACTION_SMS_PUTS.valid.DEFAULT] }),
    VALID_SUBSCRIPTION_EXECUTE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [SubscriptionExecute_mock_1.SUBSCRIPTION_EXECUTES.valid.DEFAULT] }),
    VALID_SUBSCRIPTION_UPDATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [SubscriptionUpdate_mock_1.SUBSCRIPTION_UPDATES.valid.DEFAULT] }),
    VALID_GIFTAID_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [GiftaidSubmit_mock_1.GIFTAID_SUBMITS.valid.DEFAULT] }),
    VALID_GIFTAID_UPDATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [GiftaidUpdate_mock_1.GIFTAID_UPDATES.valid.DEFAULT] }),
    VALID_SHOPIFY_ORDER_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [OrderPut_mock_1.ORDER_PUTS.valid.DEFAULT] }),
    VALID_PAYIN_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [PayinSubmit_mock_1.PAYIN_SUBMITS.valid.DEFAULT] }),
    VALID_FUNDRAISER_SIGNUP_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [FundraiserSignupSubmit_mock_1.FUNDRAISER_SIGNUP_SUBMIT_MOCKS.valid.DEFAULT] }),
    VALID_GIVING_PAGE_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [GivingPagePut_mock_1.GIVING_PAGE_PUT_MOCKS.valid.DEFAULT] }),
    VALID_ALL: exports.PRODUCER_REQUEST_VALUES.valid,
};
/**
 * Please add new models invalid mocks to this list
 * of invalid requests, so that mocks each model
 * can be tested as part of a ProducerRequest
 */
exports.PRODUCER_REQUESTS_INVALID = {
    DEFAULT: exports.PRODUCER_REQUEST_VALUES.invalid,
    INVALID_PRIZE_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [PrizePut_mock_1.PRIZE_PUTS.invalid.DEFAULT] }),
    INVALID_TICKET_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TicketPut_mock_1.TICKET_PUTS.invalid.DEFAULT] }),
    INVALID_IDENTITY_ADD: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [IdentityAdd_mock_1.IDENTITY_ADDS.invalid.DEFAULT] }),
    INVALID_USER_CREATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [UserCreate_mock_1.USER_CREATES.invalid.DEFAULT] }),
    INVALID_TRANSACTION_EXECUTE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionExecute_mock_1.TRANSACTION_EXECUTES.invalid.DEFAULT] }),
    INVALID_TRANSACTION_EXECUTE_IVR: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionExecuteIvr_mock_1.TRANSACTION_EXECUTES_IVR.invalid.DEFAULT] }),
    INVALID_TRANSACTION_SMS_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [TransactionSmsPut_mock_1.TRANSACTION_SMS_PUTS.invalid.DEFAULT] }),
    INVALID_SUBSCRIPTION_EXECUTE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [SubscriptionExecute_mock_1.SUBSCRIPTION_EXECUTES.invalid.DEFAULT] }),
    INVALID_SUBSCRIPTION_UPDATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [SubscriptionUpdate_mock_1.SUBSCRIPTION_UPDATES.invalid.DEFAULT] }),
    INVALID_GIFTAID_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [GiftaidSubmit_mock_1.GIFTAID_SUBMITS.invalid.DEFAULT] }),
    INVALID_GIFTAID_UPDATE: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [GiftaidUpdate_mock_1.GIFTAID_UPDATES.invalid.DEFAULT] }),
    INVALID_SHOPIFY_ORDER_PUT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [OrderPut_mock_1.ORDER_PUTS.invalid.DEFAULT] }),
    INVALID_PAYIN_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [PayinSubmit_mock_1.PAYIN_SUBMITS.invalid.DEFAULT] }),
    INVALID_FUNDRAISER_SIGNUP_SUBMIT: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [FundraiserSignupSubmit_mock_1.FUNDRAISER_SIGNUP_SUBMIT_MOCKS.invalid.DEFAULT] }),
    MANY_INVALID_ACTIONS: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, {
        actions: [
            PrizePut_mock_1.PRIZE_PUTS.invalid.DEFAULT,
            TicketPut_mock_1.TICKET_PUTS.invalid.DEFAULT,
            IdentityAdd_mock_1.IDENTITY_ADDS.invalid.DEFAULT,
            UserCreate_mock_1.USER_CREATES.invalid.DEFAULT,
            TransactionExecute_mock_1.TRANSACTION_EXECUTES.invalid.DEFAULT,
            TransactionExecuteIvr_mock_1.TRANSACTION_EXECUTES_IVR.invalid.DEFAULT,
            SubscriptionExecute_mock_1.SUBSCRIPTION_EXECUTES.invalid.DEFAULT,
            SubscriptionUpdate_mock_1.SUBSCRIPTION_UPDATES.invalid.DEFAULT,
            GiftaidSubmit_mock_1.GIFTAID_SUBMITS.invalid.DEFAULT,
            GiftaidUpdate_mock_1.GIFTAID_UPDATES.invalid.DEFAULT,
            OrderPut_mock_1.ORDER_PUTS.invalid.DEFAULT,
            PayinSubmit_mock_1.PAYIN_SUBMITS.invalid.DEFAULT,
            FundraiserSignupSubmit_mock_1.FUNDRAISER_SIGNUP_SUBMIT_MOCKS.invalid.DEFAULT,
            GivingPagePut_mock_1.GIVING_PAGE_PUT_MOCKS.invalid.DEFAULT,
        ],
    }),
    MISSING_ACTIONS: utils_1.omit(exports.PRODUCER_REQUEST_VALUES.valid, ['actions']),
    NO_ACTIONS: utils_1.override(exports.PRODUCER_REQUEST_VALUES.valid, { actions: [] }),
};
exports.PRODUCER_REQUESTS = {
    valid: exports.PRODUCER_REQUESTS_VALID,
    invalid: exports.PRODUCER_REQUESTS_INVALID,
};
/**
 * Generates a random ProducerRequest
 *
 * Please add new models generators to the list
 * of generated request, so that mocks each model
 * can be tested as part of a random ProducerRequest
 *
 * @param overrides
 * @param type
 */
var producerRequestGenerator = function (overrides, type) {
    if (overrides === void 0) { overrides = {}; }
    if (type === void 0) { type = null; }
    var generated = [
        IdentityAdd_mock_1.identityAddGenerator(),
        UserCreate_mock_1.userCreateGenerator(),
        PrizePut_mock_1.prizePutGenerator(),
        PostalTicketPut_mock_1.createPostalTicketPut(),
        PostalTicketSetState_mock_1.createPostalTicketSetState(),
        TicketPut_mock_1.ticketPutGenerator(),
        TransactionExecute_mock_1.transactionExecuteGenerator(),
        TransactionExecuteIvr_mock_1.transactionExecuteIvrGenerator(),
        TransactionSmsPut_mock_1.transactionSmsPutGenerator(),
        SubscriptionExecute_mock_1.subscriptionExecuteGenerator(),
        SubscriptionUpdate_mock_1.subscriptionUpdateGenerator(),
        GiftaidSubmit_mock_1.giftaidSubmitGenerator(),
        GiftaidUpdate_mock_1.giftaidUpdateGenerator(),
        OrderPut_mock_1.orderPutGenerator(),
        PayinSubmit_mock_1.payinSubmitGenerator(),
        PayinPut_mock_1.generatePayinPut(),
        FundraiserSignupSubmit_mock_1.fundraiserSignupSubmitGenerator(),
        GivingPagePut_mock_1.givingPagePutGenerator(),
    ];
    var action = generated.find(function (el) { return el.type === type; });
    if (!action) {
        var index = Math.floor(Math.random() * generated.length);
        action = generated[index];
    }
    var actions = [action];
    return __assign({ actions: actions }, overrides);
};
exports.producerRequestGenerator = producerRequestGenerator;
//# sourceMappingURL=ProducerRequest.mock.js.map