import { NumericBool } from '../../../../../validation';
import { ErpProductProps } from '../../../models/doctypes/shopify/Product';
export declare const PRODUCT_VALUES_VALID: Required<ErpProductProps>;
export declare const PRODUCT_VALUES_INVALID: {
    shopify_id: null;
    title: null;
    variants: never[];
    available: string;
    option1: string;
    option2: string;
    option3: string;
};
export declare const PRODUCT_VALUES: {
    valid: Required<ErpProductProps>;
    invalid: {
        shopify_id: null;
        title: null;
        variants: never[];
        available: string;
        option1: string;
        option2: string;
        option3: string;
    };
};
export declare const PRODUCTS_VALID: {
    DEFAULT: Required<ErpProductProps>;
    UNAVAILABLE: Required<ErpProductProps> & {
        available: NumericBool;
    };
    NO_OPTIONS: Required<ErpProductProps> & {
        option1: null;
        option2: null;
        option3: null;
    };
};
export declare const PRODUCTS_INVALID: {
    DEFAULT: {
        shopify_id: null;
        title: null;
        variants: never[];
        available: string;
        option1: string;
        option2: string;
        option3: string;
    };
    INVALID_SHOPIFY_ID: never;
    INVALID_TITLE: never;
    INVALID_VARIANTS: Required<ErpProductProps> & {
        variants: never[];
    };
    INVALID_AVAILABLE: never;
    INVALID_OPTION1: Required<ErpProductProps> & {
        option1: string;
    };
    INVALID_OPTION2: Required<ErpProductProps> & {
        option2: string;
    };
    INVALID_OPTION3: Required<ErpProductProps> & {
        option3: string;
    };
    MISSING_SHOPIFY_ID: Omit<Required<ErpProductProps>, "shopify_id">;
    MISSING_TITLE: Omit<Required<ErpProductProps>, "title">;
    MISSING_VARIANTS: Omit<Required<ErpProductProps>, "variants">;
    MISSING_AVAILABLE: Omit<Required<ErpProductProps>, "available">;
    MISSING_OPTION1: Omit<Required<ErpProductProps>, "option1">;
    MISSING_OPTION2: Omit<Required<ErpProductProps>, "option2">;
    MISSING_OPTION3: Omit<Required<ErpProductProps>, "option3">;
};
export declare const PRODUCTS: {
    invalid: {
        DEFAULT: {
            shopify_id: null;
            title: null;
            variants: never[];
            available: string;
            option1: string;
            option2: string;
            option3: string;
        };
        INVALID_SHOPIFY_ID: never;
        INVALID_TITLE: never;
        INVALID_VARIANTS: Required<ErpProductProps> & {
            variants: never[];
        };
        INVALID_AVAILABLE: never;
        INVALID_OPTION1: Required<ErpProductProps> & {
            option1: string;
        };
        INVALID_OPTION2: Required<ErpProductProps> & {
            option2: string;
        };
        INVALID_OPTION3: Required<ErpProductProps> & {
            option3: string;
        };
        MISSING_SHOPIFY_ID: Omit<Required<ErpProductProps>, "shopify_id">;
        MISSING_TITLE: Omit<Required<ErpProductProps>, "title">;
        MISSING_VARIANTS: Omit<Required<ErpProductProps>, "variants">;
        MISSING_AVAILABLE: Omit<Required<ErpProductProps>, "available">;
        MISSING_OPTION1: Omit<Required<ErpProductProps>, "option1">;
        MISSING_OPTION2: Omit<Required<ErpProductProps>, "option2">;
        MISSING_OPTION3: Omit<Required<ErpProductProps>, "option3">;
    };
    valid: {
        DEFAULT: Required<ErpProductProps>;
        UNAVAILABLE: Required<ErpProductProps> & {
            available: NumericBool;
        };
        NO_OPTIONS: Required<ErpProductProps> & {
            option1: null;
            option2: null;
            option3: null;
        };
    };
};
/**
 * Generates a random Product.
 *
 * @param overrides
 */
export declare const productGenerator: (overrides?: Partial<ErpProductProps>) => Required<ErpProductProps>;
//# sourceMappingURL=Product.mock.d.ts.map