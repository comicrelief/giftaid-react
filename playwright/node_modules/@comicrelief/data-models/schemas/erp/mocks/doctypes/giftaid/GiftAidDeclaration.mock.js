"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.giftAidDeclarationGenerator = exports.GIFT_AID_DECLARATION_MOCKS = exports.GIFT_AID_DECLARATION_INVALID = exports.GIFT_AID_DECLARATION_VALID = exports.GIFT_AID_DECLARATION_VALUES = exports.GIFT_AID_DECLARATION_VALUES_INVALID = exports.GIFT_AID_DECLARATION_VALUES_VALID = void 0;
var utils_1 = require("../../../../../utils");
var validation_1 = require("../../../../../validation");
var GiftAidDeclaration_1 = require("../../../models/doctypes/giftaid/GiftAidDeclaration");
exports.GIFT_AID_DECLARATION_VALUES_VALID = {
    declaration_transaction_id: 'bec25f1e-7d76-4dc1-9b08-be8bd4b2fa63',
    supporter_uuid: '1df868c3-5b5f-4e8f-90f7-7138fba00ef4',
    declaration_start_date: '2022-05-01',
    declaration_end_date: null,
    submission_date: '2022-08-22',
    first_name: 'first_name',
    last_name: 'last_name',
    source: GiftAidDeclaration_1.GiftAidSource.GIFTAID_SUBMIT,
    can_claim_giftaid: validation_1.NumericBool.NO,
    postal_id: '29f4e8af50',
};
exports.GIFT_AID_DECLARATION_VALUES_INVALID = {
    declaration_transaction_id: 'not-a-uuid',
    supporter_uuid: 'not-a-uuid',
    declaration_start_date: 'not-a-date',
    declaration_end_date: 'not-a-date',
    submission_date: 'not-a-date',
    first_name: null,
    last_name: null,
    source: 'invalid-giftaid-source',
    can_claim_giftaid: 'not-a-numeric-bool',
    postal_id: null,
};
exports.GIFT_AID_DECLARATION_VALUES = {
    valid: exports.GIFT_AID_DECLARATION_VALUES_VALID,
    invalid: exports.GIFT_AID_DECLARATION_VALUES_INVALID,
};
var _a = utils_1.makeDefaultMocks(exports.GIFT_AID_DECLARATION_VALUES.valid, exports.GIFT_AID_DECLARATION_VALUES.invalid, ['declaration_end_date'], ['declaration_end_date']), valid = _a.valid, invalid = _a.invalid;
exports.GIFT_AID_DECLARATION_VALID = __assign({}, valid);
exports.GIFT_AID_DECLARATION_INVALID = __assign({}, invalid);
exports.GIFT_AID_DECLARATION_MOCKS = {
    valid: exports.GIFT_AID_DECLARATION_VALID,
    invalid: exports.GIFT_AID_DECLARATION_INVALID,
};
/**
 * Creates a random Gift Aid Declaration
 *
 * @param overrides
 */
var giftAidDeclarationGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ declaration_transaction_id: utils_1.getUuid(), supporter_uuid: utils_1.getUuid(), declaration_start_date: utils_1.getDate().toISOString(), declaration_end_date: utils_1.getRandomElement([null, utils_1.getDate().toISOString()]), submission_date: utils_1.getDate().toISOString(), first_name: utils_1.getString(20), last_name: utils_1.getString(20), source: utils_1.getRandomElement(Object.values(GiftAidDeclaration_1.GiftAidSource)), can_claim_giftaid: utils_1.getRandomElement(validation_1.NumericBoolValues), postal_id: utils_1.getString(10) }, overrides));
};
exports.giftAidDeclarationGenerator = giftAidDeclarationGenerator;
//# sourceMappingURL=GiftAidDeclaration.mock.js.map