"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.payinGenerator = exports.PAYINS = exports.PAYINS_INVALID = exports.PAYINS_VALID = exports.PAYIN_VALUES = exports.PAYIN_VALUES_INVALID = exports.PAYIN_VALUES_VALID = void 0;
var enums_1 = require("../../../../../enums");
var utils_1 = require("../../../../../utils");
var Payin_mock_1 = require("../../../../payments/mocks/Payin.mock");
exports.PAYIN_VALUES_VALID = {
    id: 'd8c67c45-4349-414d-a9c6-364a5016bbb7',
    transaction_id: '1e61924d-994e-4747-8671-05f55c035dab',
    postal_id: 'f7a8f7a2-fe17-499e-9b63-6dd605e3123b',
    organisation_uuid: 'c3e4983d-b48a-4eec-8aa6-24915a796479',
    created: Payin_mock_1.PAYINS.valid.DEFAULT.created,
    updated: Payin_mock_1.PAYINS.valid.DEFAULT.updated,
    fundraising_segment: enums_1.FundraisingSegments.WORK,
    what_you_did: 'something',
    phone: '020 7820 2000',
    mobile: '0700 000 000',
    fundraising_activities: [],
};
exports.PAYIN_VALUES_INVALID = {
    id: 'not-a-uuid',
    transaction_id: 'not-a-uuid',
    postal_id: null,
    organisation_uuid: 'not-a-uuid',
    created: 'not-a-datetime',
    updated: 'not-a-datetime',
    fundraising_segment: false,
    what_you_did: null,
    phone: null,
    mobile: null,
    fundraising_activities: 'not-an-array',
};
exports.PAYIN_VALUES = {
    valid: exports.PAYIN_VALUES_VALID,
    invalid: exports.PAYIN_VALUES_INVALID,
};
exports.PAYINS_VALID = {
    DEFAULT: exports.PAYIN_VALUES.valid,
    EMPTY_PHONE: utils_1.override(exports.PAYIN_VALUES.valid, { phone: '' }),
    EMPTY_MOBILE: utils_1.override(exports.PAYIN_VALUES.valid, { mobile: '' }),
    NULL_ORGANISATION: utils_1.override(exports.PAYIN_VALUES.valid, { organisation_uuid: null }),
    MISSING_WHAT_YOU_DID: utils_1.omit(exports.PAYIN_VALUES.valid, ['what_you_did']),
    MISSING_PHONE: utils_1.omit(exports.PAYIN_VALUES.valid, ['phone']),
    MISSING_MOBILE: utils_1.omit(exports.PAYIN_VALUES.valid, ['mobile']),
    MISSING_ORGANISATION_UUID: utils_1.omit(exports.PAYIN_VALUES.valid, ['organisation_uuid']),
};
exports.PAYINS_INVALID = {
    DEFAULT: exports.PAYIN_VALUES.invalid,
    INVALID_ID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.id }),
    INVALID_TRANSACTION_ID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.transaction_id }),
    INVALID_TRANSACTION_POSTAL_ID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.postal_id }),
    INVALID_ORGANISATION_UUID: utils_1.override(exports.PAYIN_VALUES.valid, { organisation_uuid: exports.PAYIN_VALUES.invalid.organisation_uuid }),
    INVALID_CREATED: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.created }),
    INVALID_UPDATED: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.updated }),
    INVALID_FUNDRAISING_SEGMENT: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.fundraising_segment }),
    INVALID_WHAT_YOU_DID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.what_you_did }),
    INVALID_PHONE: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.phone }),
    INVALID_MOBILE: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.mobile }),
    MISSING_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['id']),
    MISSING_TRANSACTION_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['transaction_id']),
    MISSING_POSTAL_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['postal_id']),
    MISSING_FUNDRAISING_SEGMENT: utils_1.omit(exports.PAYIN_VALUES.valid, ['fundraising_segment']),
};
exports.PAYINS = {
    invalid: exports.PAYINS_INVALID,
    valid: exports.PAYINS_VALID,
};
/**
 * Generates a random Prize.
 *
 * @param overrides
 */
var payinGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ id: utils_1.getUuid(), transaction_id: utils_1.getUuid(), postal_id: utils_1.getString(10), organisation_uuid: utils_1.getUuid(), created: utils_1.getTimestamp(), updated: utils_1.getTimestamp(), fundraising_segment: utils_1.getRandomElement(enums_1.FundraisingSegments), what_you_did: utils_1.getString(), phone: utils_1.getString(), mobile: utils_1.getString(), fundraising_activities: [] }, overrides));
};
exports.payinGenerator = payinGenerator;
//# sourceMappingURL=Payin.mock.js.map