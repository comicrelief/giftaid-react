"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.productGenerator = exports.PRODUCTS = exports.PRODUCTS_INVALID = exports.PRODUCTS_VALID = exports.PRODUCT_VALUES = exports.PRODUCT_VALUES_INVALID = exports.PRODUCT_VALUES_VALID = void 0;
var utils_1 = require("../../../../../utils");
var validation_1 = require("../../../../../validation");
var ProductVariant_mock_1 = require("./ProductVariant.mock");
exports.PRODUCT_VALUES_VALID = {
    shopify_id: '2512985473219',
    title: 'Box of 40 Red Noses for schools',
    variants: [ProductVariant_mock_1.PRODUCT_VARIANTS_VALID.DEFAULT],
    available: validation_1.NumericBool.YES,
    option1: 'Deposit option',
    option2: null,
    option3: null,
};
exports.PRODUCT_VALUES_INVALID = {
    shopify_id: null,
    title: null,
    variants: [],
    available: 'YES',
    option1: '',
    option2: '',
    option3: '',
};
exports.PRODUCT_VALUES = {
    valid: exports.PRODUCT_VALUES_VALID,
    invalid: exports.PRODUCT_VALUES_INVALID,
};
exports.PRODUCTS_VALID = {
    DEFAULT: exports.PRODUCT_VALUES.valid,
    UNAVAILABLE: utils_1.override(exports.PRODUCT_VALUES.valid, { available: validation_1.NumericBool.NO }),
    NO_OPTIONS: utils_1.override(exports.PRODUCT_VALUES.valid, { option1: null, option2: null, option3: null }),
};
exports.PRODUCTS_INVALID = {
    DEFAULT: exports.PRODUCT_VALUES.invalid,
    INVALID_SHOPIFY_ID: utils_1.override(exports.PRODUCT_VALUES.valid, { shopify_id: exports.PRODUCT_VALUES.invalid.shopify_id }),
    INVALID_TITLE: utils_1.override(exports.PRODUCT_VALUES.valid, { title: exports.PRODUCT_VALUES.invalid.title }),
    INVALID_VARIANTS: utils_1.override(exports.PRODUCT_VALUES.valid, { variants: exports.PRODUCT_VALUES.invalid.variants }),
    INVALID_AVAILABLE: utils_1.override(exports.PRODUCT_VALUES.valid, { available: exports.PRODUCT_VALUES.invalid.available }),
    INVALID_OPTION1: utils_1.override(exports.PRODUCT_VALUES.valid, { option1: exports.PRODUCT_VALUES.invalid.option1 }),
    INVALID_OPTION2: utils_1.override(exports.PRODUCT_VALUES.valid, { option2: exports.PRODUCT_VALUES.invalid.option2 }),
    INVALID_OPTION3: utils_1.override(exports.PRODUCT_VALUES.valid, { option3: exports.PRODUCT_VALUES.invalid.option3 }),
    MISSING_SHOPIFY_ID: utils_1.omit(exports.PRODUCT_VALUES.valid, ['shopify_id']),
    MISSING_TITLE: utils_1.omit(exports.PRODUCT_VALUES.valid, ['title']),
    MISSING_VARIANTS: utils_1.omit(exports.PRODUCT_VALUES.valid, ['variants']),
    MISSING_AVAILABLE: utils_1.omit(exports.PRODUCT_VALUES.valid, ['available']),
    MISSING_OPTION1: utils_1.omit(exports.PRODUCT_VALUES.valid, ['option1']),
    MISSING_OPTION2: utils_1.omit(exports.PRODUCT_VALUES.valid, ['option2']),
    MISSING_OPTION3: utils_1.omit(exports.PRODUCT_VALUES.valid, ['option3']),
};
exports.PRODUCTS = {
    invalid: exports.PRODUCTS_INVALID,
    valid: exports.PRODUCTS_VALID,
};
/**
 * Generates a random Product.
 *
 * @param overrides
 */
var productGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var variants = utils_1.generateList(utils_1.getInteger(1, 4), ProductVariant_mock_1.productVariantGenerator);
    var singleVariant = variants.length === 1;
    return __assign({ shopify_id: utils_1.getString(14, { uppercase: false, lowercase: false }), title: utils_1.getString(40), variants: variants.map(function (variant) { return (__assign(__assign({}, variant), { option1: singleVariant ? 'Default' : utils_1.getString(10), option2: null, option3: null })); }), available: utils_1.getRandomElement(validation_1.NumericBoolValues), option1: singleVariant ? null : utils_1.getString(10), option2: null, option3: null }, overrides);
};
exports.productGenerator = productGenerator;
//# sourceMappingURL=Product.mock.js.map