"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.regularGivingGenerator = exports.REGULAR_GIVINGS = exports.REGULAR_GIVING_INVALID = exports.REGULAR_GIVING_VALID = exports.REGULAR_GIVING_VALUES = exports.REGULAR_GIVING_VALUES_INVALID = exports.REGULAR_GIVING_VALUES_VALID = void 0;
var utils_1 = require("../../../../../utils");
var validation_1 = require("../../../../../validation");
var Transaction_mock_1 = require("../../../../payments/mocks/Transaction.mock");
var RegularGiving_1 = require("../../../models/doctypes/psl/RegularGiving");
exports.REGULAR_GIVING_VALUES_VALID = {
    id: Transaction_mock_1.TRANSACTIONS.valid.DEFAULT.id,
    supporter: 'a527b493-7d23-4ab4-ae22-a1cec3987625',
    status: RegularGiving_1.SubscriptionStatus.ACTIVE,
    amount: 10,
    billing_day: '15',
    giftaid: validation_1.NumericBool.YES,
    provider: RegularGiving_1.SubscriptionProvider.GO_CARDLESS,
    provider_reference: 'GH4r4jzMADZK8cVQdjCPBFCMzZPBYN9TMRMSfBCS',
    cart_id: 'example-cart-id',
};
exports.REGULAR_GIVING_VALUES_INVALID = {
    id: 'not-a-uuid',
    supporter: 'not-a-uuid',
    status: 'not-a-status',
    amount: 'not-a-number',
    billing_day: null,
    giftaid: 'not-a-boolean',
    provider: 'not-a-provider',
    provider_reference: null,
    cart_id: null, // no clear invalid value
};
exports.REGULAR_GIVING_VALUES = {
    valid: exports.REGULAR_GIVING_VALUES_VALID,
    invalid: exports.REGULAR_GIVING_VALUES_INVALID,
};
exports.REGULAR_GIVING_VALID = {
    DEFAULT: exports.REGULAR_GIVING_VALUES.valid,
    MISSING_PROVIDER_REFERENCE: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['provider_reference']),
    MISSING_CART_ID: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['cart_id']),
    NULL_GIFTAID: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { giftaid: null }),
    NULL_PROVIDER_REFERENCE: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { provider_reference: null }),
    NULL_CART_ID: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { cart_id: null }),
};
exports.REGULAR_GIVING_INVALID = {
    DEFAULT: exports.REGULAR_GIVING_VALUES.invalid,
    INVALID_ID: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { id: exports.REGULAR_GIVING_VALUES.invalid.id }),
    INVALID_SUPPORTER: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { supporter: exports.REGULAR_GIVING_VALUES.invalid.supporter }),
    INVALID_STATUS: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { status: exports.REGULAR_GIVING_VALUES.invalid.status }),
    INVALID_AMOUNT: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { amount: exports.REGULAR_GIVING_VALUES.invalid.amount }),
    INVALID_GIFTAID: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { giftaid: exports.REGULAR_GIVING_VALUES.invalid.giftaid }),
    INVALID_PROVIDER: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { provider: exports.REGULAR_GIVING_VALUES.invalid.provider }),
    MISSING_ID: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['id']),
    MISSING_SUPPORTER: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['supporter']),
    MISSING_STATUS: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['status']),
    MISSING_AMOUNT: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['amount']),
    MISSING_BILLING_DAY: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['billing_day']),
    MISSING_GIFTAID: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['giftaid']),
    MISSING_PROVIDER: utils_1.omit(exports.REGULAR_GIVING_VALUES.valid, ['provider']),
    NULL_BILLING_DAY: utils_1.override(exports.REGULAR_GIVING_VALUES.valid, { billing_day: null }),
};
exports.REGULAR_GIVINGS = {
    invalid: exports.REGULAR_GIVING_INVALID,
    valid: exports.REGULAR_GIVING_VALID,
};
/**
 * Generates a random Regular Giving document.
 *
 * @param overrides
 */
var regularGivingGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ id: utils_1.getUuid(), supporter: utils_1.getUuid(), status: utils_1.getRandomElement(RegularGiving_1.SubscriptionStatus), amount: utils_1.getInteger(1, 100), billing_day: utils_1.getInteger(1, 30).toString(), giftaid: utils_1.getRandomElement(validation_1.NumericBoolValues), provider: utils_1.getRandomElement(RegularGiving_1.SubscriptionProvider), provider_reference: null, cart_id: null }, overrides));
};
exports.regularGivingGenerator = regularGivingGenerator;
//# sourceMappingURL=RegularGiving.mock.js.map