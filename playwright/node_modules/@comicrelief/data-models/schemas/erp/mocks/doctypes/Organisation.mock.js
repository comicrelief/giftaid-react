"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.organisationGenerator = exports.ORGANISATION_MOCKS = exports.ORGANISATION_INVALID = exports.ORGANISATION_VALID = exports.ORGANISATION_VALUES = exports.ORGANISATION_VALUES_INVALID = exports.ORGANISATION_VALUES_VALID = void 0;
var enums_1 = require("../../../../enums");
var utils_1 = require("../../../../utils");
exports.ORGANISATION_VALUES_VALID = {
    uuid: 'a676ea2b-fe4a-4aa1-b323-e8ad7f1e12ef',
    parent_uuid: 'ed45346e-0927-40f1-baf1-97dd1da15528',
    organisation_name: 'Organisation Name',
    fundraising_segment: 'primary_school',
    postal_id: 'fab8166b-dc86-4bfa-9c24-57c5e4eec890',
    external_id_type: enums_1.OrganisationIdTypes.EDCO,
    external_id: '12345',
    computed_id: 'NW51UJ_A745316494',
};
exports.ORGANISATION_VALUES_INVALID = {
    uuid: 'not-a-uuid',
    parent_uuid: 'not-a-uuid',
    organisation_name: 12345,
    fundraising_segment: ['this is wrong'],
    postal_id: null,
    external_id_type: false,
    external_id: 12345,
    computed_id: false,
};
exports.ORGANISATION_VALUES = {
    valid: exports.ORGANISATION_VALUES_VALID,
    invalid: exports.ORGANISATION_VALUES_INVALID,
};
var _a = utils_1.makeDefaultMocks(exports.ORGANISATION_VALUES.valid, exports.ORGANISATION_VALUES.invalid, 
// nullable fields.
[
    'parent_uuid',
], 
// optional fields
[
    'uuid',
    'parent_uuid',
]), valid = _a.valid, invalid = _a.invalid;
exports.ORGANISATION_VALID = __assign(__assign({}, valid), { MISSING_EXTERNAL_ID_AND_TYPE: utils_1.omit(exports.ORGANISATION_VALUES.valid, ['external_id', 'external_id_type']), NULL_EXTERNAL_ID_AND_TYPE: utils_1.override(exports.ORGANISATION_VALUES.valid, { external_id: null, external_id_type: null }), EMPTY_STRING_PARENT_UUID: utils_1.override(exports.ORGANISATION_VALUES.valid, { parent_uuid: '' }), EMPTY_STRING_EXTERNAL_ID_AND_TYPE: utils_1.override(exports.ORGANISATION_VALUES.valid, { external_id: '', external_id_type: '' }) });
exports.ORGANISATION_INVALID = __assign({}, invalid);
exports.ORGANISATION_MOCKS = {
    valid: exports.ORGANISATION_VALID,
    invalid: exports.ORGANISATION_INVALID,
};
/**
 * Creates a random Organisation
 *
 * Note: external_id and external_id_type are dependant upon one another in the yup validation schema - they must both
 *  be truthy values or both be null.
 *
 * @param originalOverrides
 */
var organisationGenerator = function (originalOverrides) {
    if (originalOverrides === void 0) { originalOverrides = {}; }
    var newOverrides = __assign({}, originalOverrides);
    var randomExternalId = String(utils_1.getInteger(1000, 10000));
    var randomExternalIdType = utils_1.getRandomElement(Object.values(enums_1.OrganisationIdTypes));
    // These will only be used if neither property is overridden.
    var withExternalId = utils_1.getRandomElement([true, false]);
    var external_id = withExternalId ? randomExternalId : '';
    var external_id_type = withExternalId ? randomExternalIdType : '';
    // If either external_id or external_id_type is overridden, ensure the other one is overridden with a valid value.
    if (newOverrides.external_id === undefined && newOverrides.external_id_type !== undefined) {
        newOverrides.external_id = newOverrides.external_id_type ? randomExternalId : '';
    }
    if (newOverrides.external_id_type === undefined && newOverrides.external_id !== undefined) {
        newOverrides.external_id_type = newOverrides.external_id ? randomExternalIdType : '';
    }
    return __assign({ uuid: utils_1.getUuid(), parent_uuid: utils_1.getRandomElement([utils_1.getUuid(), '']), organisation_name: utils_1.getString(10), fundraising_segment: utils_1.getRandomElement(Object.values(enums_1.FundraisingSegments)), postal_id: utils_1.getString(10), external_id: external_id,
        external_id_type: external_id_type, computed_id: utils_1.getString(10) }, newOverrides);
};
exports.organisationGenerator = organisationGenerator;
//# sourceMappingURL=Organisation.mock.js.map