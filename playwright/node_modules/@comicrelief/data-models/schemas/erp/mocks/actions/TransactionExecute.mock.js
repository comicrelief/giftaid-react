"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transactionExecuteGenerator = exports.TRANSACTION_EXECUTES = exports.TRANSACTION_EXECUTES_INVALID = exports.TRANSACTION_EXECUTES_VALID = exports.TRANSACTION_EXECUTE_VALUES = exports.TRANSACTION_EXECUTE_VALUES_VALID = exports.TRANSACTION_EXECUTE_VALUES_INVALID = void 0;
var uuid_1 = require("uuid");
var enums_1 = require("../../../../enums");
var utils_1 = require("../../../../utils");
var common_1 = require("../../../payments/models/common");
var SupporterInfo_mock_1 = require("../../../shared/mocks/SupporterInfo.mock");
var common_2 = require("../../models/common");
exports.TRANSACTION_EXECUTE_VALUES_INVALID = {
    type: 'some-type',
    data: {},
};
exports.TRANSACTION_EXECUTE_VALUES_VALID = {
    type: common_2.ErpPayloadTypes.TRANSACTION__EXECUTE,
    data: {
        id: '2fadac8d-02c3-4e6b-bbf7-cd4e75bd49d8',
        supporter_uuid: '389d0996-4682-43fe-b90a-f53855dcf7dc',
        amount: 5,
        currency: 'GBP',
        giftaid: 0,
        affiliate: null,
        campaign: 'CR',
        transSource: enums_1.Sources.CR_SITE,
        transSourceUrl: 'https://donation-staging.spa.comicrelief.com/',
        transType: 'Donation',
        client: 'test',
        provider: common_1.TransactionProvider.DUMMY,
        providerReference: 'D00001',
        cartId: 'DEFAULT-COMICRELIEF',
        status: common_1.TransactionStatus.PENDING,
        created: 1603660247,
        updated: 1603660247,
        address1: SupporterInfo_mock_1.ADDRESSES.valid.address1,
        address2: null,
        address3: null,
        postcode: SupporterInfo_mock_1.ADDRESSES.valid.postcode,
        town: SupporterInfo_mock_1.ADDRESSES.valid.town,
        country: SupporterInfo_mock_1.ADDRESSES.valid.country,
    },
};
var overrideData = function (overridedData) { return ({
    type: common_2.ErpPayloadTypes.TRANSACTION__EXECUTE,
    data: utils_1.override(exports.TRANSACTION_EXECUTE_VALUES_VALID.data, overridedData),
}); };
var omitData = function (key) { return ({
    type: common_2.ErpPayloadTypes.TRANSACTION__EXECUTE,
    data: utils_1.omit(exports.TRANSACTION_EXECUTE_VALUES_VALID.data, [key]),
}); };
exports.TRANSACTION_EXECUTE_VALUES = {
    valid: exports.TRANSACTION_EXECUTE_VALUES_VALID,
    invalid: exports.TRANSACTION_EXECUTE_VALUES_INVALID,
};
exports.TRANSACTION_EXECUTES_VALID = {
    DEFAULT: exports.TRANSACTION_EXECUTE_VALUES.valid,
    UPPERCASE_PROVIDER: overrideData({ provider: common_1.TransactionProvider.DUMMY.toUpperCase() }),
    EMPTY_SUPPORTER_UUID: overrideData({ supporter_uuid: null }),
};
exports.TRANSACTION_EXECUTES_INVALID = {
    DEFAULT: utils_1.override(exports.TRANSACTION_EXECUTE_VALUES.valid, { data: exports.TRANSACTION_EXECUTE_VALUES.invalid.data }),
    INVALID_TYPE: utils_1.override(exports.TRANSACTION_EXECUTE_VALUES.valid, { type: exports.TRANSACTION_EXECUTE_VALUES.invalid.type }),
    INVALID_ID: overrideData({ id: null }),
    INVALID_SUPPORTER_UUID: overrideData({ supporter_uuid: 'not-a-uuid' }),
    INVALID_AMOUNT: overrideData({ amount: -2 }),
    INVALID_CURRENCY: overrideData({ currency: null }),
    INVALID_CLIENT: overrideData({ client: null }),
    INVALID_PROVIDER: overrideData({ provider: null }),
    INVALID_CREATED: overrideData({ created: null }),
    INVALID_UPDATED: overrideData({ updated: null }),
    INVALID_STATUS: overrideData({ status: null }),
    INVALID_ADDRESS1: overrideData({ address1: null }),
    INVALID_POSTCODE: overrideData({ postcode: null }),
    INVALID_TOWN: overrideData({ town: null }),
    INVALID_COUNTRY: overrideData({ country: null }),
    MISSING_ID: omitData('id'),
    MISSING_AMOUNT: omitData('amount'),
    MISSING_CURRENCY: omitData('currency'),
    MISSING_CLIENT: omitData('client'),
    MISSING_PROVIDER: omitData('provider'),
    MISSING_CREATED: omitData('created'),
    MISSING_UPDATED: omitData('updated'),
    MISSING_STATUS: omitData('status'),
    MISSING_SUPPORTER_UUID: omitData('supporter_uuid'),
    MISSING_ADDRESS1: omitData('address1'),
    MISSING_POSTCODE: omitData('postcode'),
    MISSING_TOWN: omitData('town'),
    MISSING_COUNTRY: omitData('country'),
};
exports.TRANSACTION_EXECUTES = {
    valid: exports.TRANSACTION_EXECUTES_VALID,
    invalid: exports.TRANSACTION_EXECUTES_INVALID,
};
/**
 * Generates a random TransactionExecute
 *
 * @param overrides
 */
var transactionExecuteGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var date = Math.floor(utils_1.getUnixTimestamp() / 1000);
    return {
        type: common_2.ErpPayloadTypes.TRANSACTION__EXECUTE,
        data: __assign({ id: uuid_1.v4(), supporter_uuid: uuid_1.v4(), amount: Math.floor(Math.random() * 10) + 1, currency: utils_1.getRandomElement(['GBP', 'USD']), giftaid: 0, affiliate: null, campaign: utils_1.getRandomElement([enums_1.Campaigns.RND21, enums_1.Campaigns.SR20]), transSource: utils_1.getRandomElement([enums_1.Sources.CR_SITE, enums_1.Sources.SR_SITE]), transSourceUrl: 'https://donation-staging.spa.comicrelief.com/', transType: 'Donation', client: utils_1.getRandomElement(['test', 'payin', 'donation']), provider: utils_1.getRandomElement(common_1.TransactionProvider), providerReference: null, cartId: utils_1.getRandomElement(['DEFAULT-COMICRELIEF', 'DEFAULT-SPORTRELIEF']), status: utils_1.getRandomElement(common_1.TransactionStatus), created: date, updated: date, address1: utils_1.getString(10), address2: utils_1.getRandomElement([utils_1.getString(10), null]), address3: utils_1.getRandomElement([utils_1.getString(10), null]), postcode: utils_1.getString(5), town: utils_1.getString(10), country: utils_1.getString(10) }, overrides),
    };
};
exports.transactionExecuteGenerator = transactionExecuteGenerator;
//# sourceMappingURL=TransactionExecute.mock.js.map