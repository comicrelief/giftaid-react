"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.giftaidSubmitGenerator = exports.GIFTAID_SUBMITS = exports.GIFTAID_SUBMITS_INVALID = exports.GIFTAID_SUBMITS_VALID = exports.GIFTAID_SUBMIT_VALUES = exports.GIFTAID_SUBMIT_VALUES_VALID = exports.GIFTAID_SUBMIT_VALUES_INVALID = void 0;
var utils_1 = require("../../../../utils");
var common_1 = require("../../models/common");
var GiftAidDeclaration_1 = require("../../models/doctypes/giftaid/GiftAidDeclaration");
exports.GIFTAID_SUBMIT_VALUES_INVALID = {
    type: 'some-type',
    data: {},
};
exports.GIFTAID_SUBMIT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.GIFTAID__SUBMIT,
    data: {
        declaration_transaction_id: 'f4bc1c50-0c04-4984-bb3c-6f032866b2ac',
        supporter_uuid: '389d0996-4682-43fe-b90a-f53855dcf7dc',
        declaration_start_date: '2021-02-08T08:31:02.160Z',
        declaration_end_date: '2021-02-08T08:31:02.160Z',
        submission_date: '2021-02-08T08:31:02.160Z',
        first_name: 'first_name',
        last_name: 'last_name',
        source: GiftAidDeclaration_1.GiftAidSource.GIFTAID_SUBMIT,
        can_claim_giftaid: 1,
        address_line_1: 'CAMELFORD HOUSE 87-90',
        address_line_2: 'ALBERT EMBANKMENT',
        address_line_3: '',
        town: 'LONDON',
        postcode: 'SE1 7TP',
    },
};
var overrideData = function (overridedData) { return ({
    type: common_1.ErpPayloadTypes.GIFTAID__SUBMIT,
    data: utils_1.override(exports.GIFTAID_SUBMIT_VALUES_VALID.data, overridedData),
}); };
var omitData = function (key) { return ({
    type: common_1.ErpPayloadTypes.GIFTAID__SUBMIT,
    data: utils_1.omit(exports.GIFTAID_SUBMIT_VALUES_VALID.data, [key]),
}); };
exports.GIFTAID_SUBMIT_VALUES = {
    valid: exports.GIFTAID_SUBMIT_VALUES_VALID,
    invalid: exports.GIFTAID_SUBMIT_VALUES_INVALID,
};
exports.GIFTAID_SUBMITS_VALID = {
    DEFAULT: exports.GIFTAID_SUBMIT_VALUES.valid,
    CAN_CLAIM_0: overrideData({ can_claim_giftaid: 0 }),
    CAN_CLAIM_1: overrideData({ can_claim_giftaid: 1 }),
    EMPTY_SUPPORTER_UUID: overrideData({ supporter_uuid: null }),
    NULL_DECLARATION_END_DATE: overrideData({ declaration_end_date: null }),
    MISSING_DECLARATION_END_DATE: omitData('declaration_end_date'),
    NULL_ADDRESS_LINE2: overrideData({ address_line_2: null }),
    MISSING_ADDRESS_LINE2: omitData('address_line_2'),
    NULL_ADDRESS_LINE3: overrideData({ address_line_3: null }),
    MISSING_ADDRESS_LINE3: omitData('address_line_3'),
    NULL_TOWN: overrideData({ town: null }),
    MISSING_TOWN: omitData('town'),
};
exports.GIFTAID_SUBMITS_INVALID = {
    DEFAULT: utils_1.override(exports.GIFTAID_SUBMIT_VALUES.valid, { data: exports.GIFTAID_SUBMIT_VALUES.invalid.data }),
    INVALID_TYPE: utils_1.override(exports.GIFTAID_SUBMIT_VALUES.valid, { type: exports.GIFTAID_SUBMIT_VALUES.invalid.type }),
    INVALID_SUPPORTER_UUID: overrideData({ supporter_uuid: 'not-a-uuid' }),
    INVALID_CLAIMED_NEGATIVE: overrideData({ can_claim_giftaid: -1 }),
    INVALID_CLAIMED_POSITIVE: overrideData({ can_claim_giftaid: 2 }),
    MISSING_CAN_CLAIM: omitData('can_claim_giftaid'),
    MISSING_SUPPORTER_UUID: omitData('supporter_uuid'),
    INVALID_SOURCE: overrideData({ source: 'invalid-giftaid-source' }),
    NULL_SUBMISSION_DATE: overrideData({ submission_date: null }),
    MISSING_SUBMISSION_DATE: omitData('submission_date'),
    NULL_FIRST_NAME: overrideData({ first_name: null }),
    MISSING_FIRST_NAME: omitData('first_name'),
    NULL_LAST_NAME: overrideData({ last_name: null }),
    MISSING_LAST_NAME: omitData('last_name'),
};
exports.GIFTAID_SUBMITS = {
    valid: exports.GIFTAID_SUBMITS_VALID,
    invalid: exports.GIFTAID_SUBMITS_INVALID,
};
/**
 * Generates a random GiftaidSubmit
 *
 * @param overrides
 */
var giftaidSubmitGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return ({
        type: common_1.ErpPayloadTypes.GIFTAID__SUBMIT,
        data: __assign({ declaration_transaction_id: utils_1.getUuid(), supporter_uuid: utils_1.getUuid(), declaration_start_date: utils_1.getDate().toISOString(), declaration_end_date: utils_1.getRandomElement([null, utils_1.getDate().toISOString()]), submission_date: utils_1.getDate().toISOString(), first_name: utils_1.getString(20), last_name: utils_1.getString(20), source: GiftAidDeclaration_1.GiftAidSource.GIFTAID_SUBMIT, can_claim_giftaid: 1, address_line_1: utils_1.getString(100), address_line_2: utils_1.getRandomElement([utils_1.getString(10), null]), address_line_3: utils_1.getRandomElement([utils_1.getString(10), null]), town: utils_1.getRandomElement([utils_1.getString(25), null]), postcode: 'SE1 7TP' }, overrides),
    });
};
exports.giftaidSubmitGenerator = giftaidSubmitGenerator;
//# sourceMappingURL=GiftaidSubmit.mock.js.map