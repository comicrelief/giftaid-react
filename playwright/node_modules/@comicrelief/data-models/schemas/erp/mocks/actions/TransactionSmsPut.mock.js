"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transactionSmsPutGenerator = exports.TRANSACTION_SMS_PUTS = exports.TRANSACTION_SMS_PUTS_INVALID = exports.TRANSACTION_SMS_PUTS_VALID = exports.VALUES = exports.INVALID_VALUES = exports.VALID_VALUES = exports.INVALID_DATA = exports.VALID_DATA = void 0;
var utils_1 = require("../../../../utils");
var common_1 = require("../../../payments/models/common");
var common_2 = require("../../models/common");
exports.VALID_DATA = {
    transaction_id: '2fadac8d02c34e6bbbf7cd4e75bd49d8',
    supporter_uuid: '389d0996-4682-43fe-b90a-f53855dcf7dc',
    initiated_at: 1603660247945,
    status: common_1.TransactionStatus.COMPLETE,
    amount: 10,
    provider: common_1.TransactionProvider.FONIX,
    provider_reference: '7fcf58e4-55a6-402f-a79e-d55e9dd704d9',
    mobile_number: '+447712345678',
    fund: 'GOTH',
    project: 'RNXX',
    activity: 'F00',
    keyword: 'test',
    short_code: '70000',
};
exports.INVALID_DATA = {
    transaction_id: '',
    supporter_uuid: 'not-a-uuid',
    initiated_at: null,
    status: 'not-a-status',
    amount: -10,
    provider: 'not-a-provider',
    provider_reference: 0,
    mobile_number: null,
    fund: null,
    project: null,
    activity: null,
    keyword: null,
    short_code: null,
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var fromData = function (data, type) {
    if (type === void 0) { type = common_2.ErpPayloadTypes.TRANSACTION__SMS__PUT; }
    return ({
        type: type,
        data: data,
    });
};
exports.VALID_VALUES = fromData(exports.VALID_DATA);
exports.INVALID_VALUES = fromData(exports.INVALID_DATA, 'not-a-type');
exports.VALUES = {
    valid: exports.VALID_VALUES,
    invalid: exports.INVALID_VALUES,
};
exports.TRANSACTION_SMS_PUTS_VALID = {
    DEFAULT: exports.VALUES.valid,
    EMPTY_KEYWORD: fromData(utils_1.override(exports.VALID_DATA, { keyword: '' })),
    NULL_PROVIDER_REFERENCE: fromData(utils_1.override(exports.VALID_DATA, { provider_reference: null })),
};
exports.TRANSACTION_SMS_PUTS_INVALID = {
    DEFAULT: utils_1.override(exports.VALID_VALUES, { data: exports.INVALID_VALUES.data }),
    INVALID_TYPE: utils_1.override(exports.VALID_VALUES, { type: exports.VALUES.invalid.type }),
    INVALID_DATA: utils_1.override(exports.VALID_VALUES, { data: null }),
    INVALID_TRANSACTION_ID: fromData(utils_1.override(exports.VALID_DATA, { transaction_id: exports.INVALID_DATA.transaction_id })),
    INVALID_SUPPORTER_UUID: fromData(utils_1.override(exports.VALID_DATA, { supporter_uuid: exports.INVALID_DATA.supporter_uuid })),
    INVALID_INITIATED_AT: fromData(utils_1.override(exports.VALID_DATA, { initiated_at: exports.INVALID_DATA.initiated_at })),
    INVALID_STATUS: fromData(utils_1.override(exports.VALID_DATA, { status: exports.INVALID_DATA.status })),
    INVALID_AMOUNT: fromData(utils_1.override(exports.VALID_DATA, { amount: exports.INVALID_DATA.amount })),
    INVALID_PROVIDER: fromData(utils_1.override(exports.VALID_DATA, { provider: exports.INVALID_DATA.provider })),
    INVALID_PROVIDER_REFERENCE: fromData(utils_1.override(exports.VALID_DATA, { provider_reference: exports.INVALID_DATA.provider_reference })),
    INVALID_MOBILE_NUMBER: fromData(utils_1.override(exports.VALID_DATA, { mobile_number: exports.INVALID_DATA.mobile_number })),
    INVALID_FUND: fromData(utils_1.override(exports.VALID_DATA, { fund: exports.INVALID_DATA.fund })),
    INVALID_PROJECT: fromData(utils_1.override(exports.VALID_DATA, { project: exports.INVALID_DATA.project })),
    INVALID_ACTIVITY: fromData(utils_1.override(exports.VALID_DATA, { activity: exports.INVALID_DATA.activity })),
    INVALID_KEYWORD: fromData(utils_1.override(exports.VALID_DATA, { keyword: exports.INVALID_DATA.keyword })),
    INVALID_SHORT_CODE: fromData(utils_1.override(exports.VALID_DATA, { short_code: exports.INVALID_DATA.short_code })),
    MISSING_TYPE: utils_1.omit(exports.VALUES.valid, ['type']),
    MISSING_DATA: utils_1.omit(exports.VALUES.valid, ['data']),
    MISSING_TRANSACTION_ID: fromData(utils_1.omit(exports.VALID_DATA, ['transaction_id'])),
    MISSING_SUPPORTER_UUID: fromData(utils_1.omit(exports.VALID_DATA, ['supporter_uuid'])),
    MISSING_INITIATED_AT: fromData(utils_1.omit(exports.VALID_DATA, ['initiated_at'])),
    MISSING_STATUS: fromData(utils_1.omit(exports.VALID_DATA, ['status'])),
    MISSING_AMOUNT: fromData(utils_1.omit(exports.VALID_DATA, ['amount'])),
    MISSING_PROVIDER: fromData(utils_1.omit(exports.VALID_DATA, ['provider'])),
    MISSING_PROVIDER_REFERENCE: fromData(utils_1.omit(exports.VALID_DATA, ['provider_reference'])),
    MISSING_MOBILE_NUMBER: fromData(utils_1.omit(exports.VALID_DATA, ['mobile_number'])),
    MISSING_FUND: fromData(utils_1.omit(exports.VALID_DATA, ['fund'])),
    MISSING_PROJECT: fromData(utils_1.omit(exports.VALID_DATA, ['project'])),
    MISSING_ACTIVITY: fromData(utils_1.omit(exports.VALID_DATA, ['activity'])),
    MISSING_KEYWORD: fromData(utils_1.omit(exports.VALID_DATA, ['keyword'])),
    MISSING_SHORT_CODE: fromData(utils_1.omit(exports.VALID_DATA, ['short_code'])),
};
exports.TRANSACTION_SMS_PUTS = {
    invalid: exports.TRANSACTION_SMS_PUTS_INVALID,
    valid: exports.TRANSACTION_SMS_PUTS_VALID,
};
/**
 * Generates a random `TransactionSmsPut` action.
 *
 * Note that `type` cannot be overridden.
 *
 * @param overrides
 * @param overrides.data
 */
var transactionSmsPutGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return ({
        type: common_2.ErpPayloadTypes.TRANSACTION__SMS__PUT,
        data: __assign({ transaction_id: utils_1.getUuid(), supporter_uuid: utils_1.getUuid(), initiated_at: Date.now(), status: utils_1.getRandomElement([
                // not all transaction statuses are valid (some apply only to subscriptions)
                common_1.TransactionStatus.PENDING,
                common_1.TransactionStatus.COMPLETE,
                common_1.TransactionStatus.ABANDONED,
            ]), amount: utils_1.getRandomElement([5, 10, 20, 30]), provider: common_1.TransactionProvider.FONIX, provider_reference: utils_1.getRandomElement([null, utils_1.getString(40)]), mobile_number: '+447712345678', fund: 'GOTH', project: 'RNXX', activity: 'F00', keyword: 'test', short_code: '70000' }, overrides.data),
    });
};
exports.transactionSmsPutGenerator = transactionSmsPutGenerator;
//# sourceMappingURL=TransactionSmsPut.mock.js.map