"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.payinSubmitGenerator = exports.PAYIN_SUBMITS = exports.PAYIN_SUBMITS_INVALID = exports.PAYIN_SUBMITS_VALID = exports.PAYIN_SUBMIT_VALUES = exports.PAYIN_SUBMIT_VALUES_VALID = exports.PAYIN_SUBMIT_VALUES_INVALID = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../../../../utils");
var SupporterInfo_mock_1 = require("../../../shared/mocks/SupporterInfo.mock");
var common_1 = require("../../models/common");
exports.PAYIN_SUBMIT_VALUES_INVALID = {
    type: 'some-type',
    data: {},
};
exports.PAYIN_SUBMIT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.PAYIN__SUBMIT,
    data: {
        id: '2fadac8d-02c3-4e6b-bbf7-cd4e75bd49d8',
        transactionId: 'f3ba0e0c-faf5-4a77-8b92-b983bc393f6c',
        audience: 'public',
        address1: SupporterInfo_mock_1.ADDRESSES.valid.address1,
        address2: null,
        address3: null,
        postcode: SupporterInfo_mock_1.ADDRESSES.valid.postcode,
        town: SupporterInfo_mock_1.ADDRESSES.valid.town,
        country: SupporterInfo_mock_1.ADDRESSES.valid.country,
    },
};
var overrideData = function (overridedData) { return ({
    type: common_1.ErpPayloadTypes.PAYIN__SUBMIT,
    data: utils_1.override(exports.PAYIN_SUBMIT_VALUES_VALID.data, overridedData),
}); };
var omitData = function (key) { return ({
    type: common_1.ErpPayloadTypes.PAYIN__SUBMIT,
    data: utils_1.omit(exports.PAYIN_SUBMIT_VALUES_VALID.data, [key]),
}); };
exports.PAYIN_SUBMIT_VALUES = {
    valid: exports.PAYIN_SUBMIT_VALUES_VALID,
    invalid: exports.PAYIN_SUBMIT_VALUES_INVALID,
};
exports.PAYIN_SUBMITS_VALID = {
    DEFAULT: exports.PAYIN_SUBMIT_VALUES.valid,
};
exports.PAYIN_SUBMITS_INVALID = {
    DEFAULT: utils_1.override(exports.PAYIN_SUBMIT_VALUES.valid, { data: exports.PAYIN_SUBMIT_VALUES.invalid.data }),
    INVALID_TYPE: utils_1.override(exports.PAYIN_SUBMIT_VALUES.valid, { type: exports.PAYIN_SUBMIT_VALUES.invalid.type }),
    INVALID_ID: overrideData({ id: null }),
    INVALID_TRANSACTION_ID: overrideData({ transactionId: null }),
    INVALID_AUDIENCE: overrideData({ audience: null }),
    INVALID_ADDRESS1: overrideData({ address1: null }),
    INVALID_POSTCODE: overrideData({ postcode: null }),
    INVALID_TOWN: overrideData({ town: null }),
    INVALID_COUNTRY: overrideData({ country: null }),
    MISSING_ID: omitData('id'),
    MISSING_TRANSACTION_ID: omitData('transactionId'),
    MISSING_AUDIENCE: omitData('audience'),
    MISSING_ADDRESS1: omitData('address1'),
    MISSING_POSTCODE: omitData('postcode'),
    MISSING_TOWN: omitData('town'),
    MISSING_COUNTRY: omitData('country'),
};
exports.PAYIN_SUBMITS = {
    valid: exports.PAYIN_SUBMITS_VALID,
    invalid: exports.PAYIN_SUBMITS_INVALID,
};
/**
 * Generates a random PayinSubmit
 *
 * @param overrides
 */
var payinSubmitGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return ({
        type: common_1.ErpPayloadTypes.PAYIN__SUBMIT,
        data: __assign({ id: uuid_1.v4(), transactionId: uuid_1.v4(), audience: utils_1.getRandomElement(['school', 'work', 'youth', 'public']), address1: utils_1.getString(10), address2: utils_1.getRandomElement([utils_1.getString(10), null]), address3: utils_1.getRandomElement([utils_1.getString(10), null]), postcode: utils_1.getString(5), town: utils_1.getString(10), country: utils_1.getString(10) }, overrides),
    });
};
exports.payinSubmitGenerator = payinSubmitGenerator;
//# sourceMappingURL=PayinSubmit.mock.js.map