"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.donationPutGenerator = exports.DONATION_PUT_MOCKS = exports.DONATION_PUT_INVALID = exports.DONATION_PUT_VALID = exports.DONATION_PUT_VALUES = exports.DONATION_PUT_VALUES_INVALID = exports.DONATION_PUT_VALUES_VALID = exports.ANONYMOUS_DONATION_PUT_VALUES_VALID = exports.ANONYMOUS_DONATION_DATA_VALID_VALUES = void 0;
var utils_1 = require("../../../../../utils");
var common_1 = require("../../../models/common");
var Postal_mock_1 = require("../../doctypes/Postal.mock");
var validData = {
    supporter_uuid: '4fd1dd59-0d09-4ec8-a042-f56748908a46',
    id: 123456789012,
    amount: 20,
    giftaid: 0,
    justgivingPage: '48641608',
    isAnonymous: false,
    address1: Postal_mock_1.POSTAL_VALUES.valid.address1,
    address2: Postal_mock_1.POSTAL_VALUES.valid.address2,
    country: Postal_mock_1.POSTAL_VALUES.valid.country,
    county: 'Region',
    postcode: Postal_mock_1.POSTAL_VALUES.valid.postcode,
    paymentFrequency: 'Single',
};
var invalidData = {
    supporter_uuid: 'not-uuid',
    id: { key: 'not-a-number' },
    amount: { key: 'not-a-number' },
    giftaid: { key: 'not-a-boolean' },
    justgivingPage: { key: 'not-a-number' },
    isAnonymous: null,
    address1: Postal_mock_1.POSTAL_VALUES.invalid.address1,
    address2: Postal_mock_1.POSTAL_VALUES.invalid.address2,
    country: Postal_mock_1.POSTAL_VALUES.invalid.country,
    county: null,
    postcode: Postal_mock_1.POSTAL_VALUES.invalid.postcode,
    paymentFrequency: { key: 'not-a-string' },
};
exports.ANONYMOUS_DONATION_DATA_VALID_VALUES = {
    id: 345678901234,
    amount: 10.50,
    giftaid: 0,
    justgivingPage: '48641608',
    isAnonymous: true,
    address1: null,
    address2: null,
    country: null,
    county: null,
    postcode: null,
    paymentFrequency: 'Single',
};
exports.ANONYMOUS_DONATION_PUT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.JUSTGIVING__DONATION__PUT,
    data: exports.ANONYMOUS_DONATION_DATA_VALID_VALUES,
};
exports.DONATION_PUT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.JUSTGIVING__DONATION__PUT,
    data: validData,
};
exports.DONATION_PUT_VALUES_INVALID = {
    type: 'invalid',
    data: invalidData,
};
exports.DONATION_PUT_VALUES = {
    valid: exports.DONATION_PUT_VALUES_VALID,
    invalid: exports.DONATION_PUT_VALUES_INVALID,
};
var overrideData = function (keys) { return ({
    type: common_1.ErpPayloadTypes.JUSTGIVING__DONATION__PUT,
    data: utils_1.override(validData, keys),
}); };
exports.DONATION_PUT_VALID = {
    DEFAULT: exports.DONATION_PUT_VALUES.valid,
    ANONYMOUS_DONATION: exports.ANONYMOUS_DONATION_PUT_VALUES_VALID,
    NULL_JUSTGIVING_PAGE: overrideData({ justgivingPage: null }),
};
exports.DONATION_PUT_INVALID = {
    DEFAULT: exports.DONATION_PUT_VALUES.invalid,
};
exports.DONATION_PUT_MOCKS = {
    valid: exports.DONATION_PUT_VALID,
    invalid: exports.DONATION_PUT_INVALID,
};
/**
 * Creates a random DonationPut
 *
 * @param overrides
 */
var donationPutGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ type: common_1.ErpPayloadTypes.JUSTGIVING__DONATION__PUT, data: {
            supporter_uuid: utils_1.getUuid(),
            id: utils_1.getNumber(1000000000, 9000000000),
            amount: Math.floor(Math.random() * 100) + 1,
            giftaid: 0,
            justgivingPage: utils_1.getNumber(10000000, 90000000).toString(),
            isAnonymous: utils_1.getBoolean(),
            address1: utils_1.getString(10),
            address2: utils_1.getRandomElement([utils_1.getString(10), null]),
            country: utils_1.getString(10),
            county: utils_1.getString(10),
            postcode: utils_1.getString(5),
            paymentFrequency: utils_1.getString(6),
        } }, overrides));
};
exports.donationPutGenerator = donationPutGenerator;
//# sourceMappingURL=DonationPut.mock.js.map