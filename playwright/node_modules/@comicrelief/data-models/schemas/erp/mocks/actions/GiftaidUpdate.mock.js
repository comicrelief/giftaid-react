"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.giftaidUpdateGenerator = exports.GIFTAID_UPDATES = exports.GIFTAID_UPDATES_INVALID = exports.GIFTAID_UPDATES_VALID = exports.GIFTAID_UPDATE_VALUES = exports.GIFTAID_UPDATE_VALUES_VALID = exports.GIFTAID_UPDATE_VALUES_INVALID = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../../../../utils");
var common_1 = require("../../models/common");
exports.GIFTAID_UPDATE_VALUES_INVALID = {
    type: 'some-type',
    data: {},
};
exports.GIFTAID_UPDATE_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.GIFTAID__UPDATE,
    data: {
        transactionId: 'f3ba0e0c-faf5-4a77-8b92-b983bc393f6c',
        claimed: 0,
    },
};
var overrideData = function (overridedData) { return ({
    type: common_1.ErpPayloadTypes.GIFTAID__UPDATE,
    data: utils_1.override(exports.GIFTAID_UPDATE_VALUES_VALID.data, overridedData),
}); };
var omitData = function (key) { return ({
    type: common_1.ErpPayloadTypes.GIFTAID__UPDATE,
    data: utils_1.omit(exports.GIFTAID_UPDATE_VALUES_VALID.data, [key]),
}); };
exports.GIFTAID_UPDATE_VALUES = {
    valid: exports.GIFTAID_UPDATE_VALUES_VALID,
    invalid: exports.GIFTAID_UPDATE_VALUES_INVALID,
};
exports.GIFTAID_UPDATES_VALID = {
    DEFAULT: exports.GIFTAID_UPDATE_VALUES.valid,
    TRANSACTION_ID_NON_UUID: overrideData({ transactionId: 'nonuuid' }),
    CLAIMED_0: overrideData({ claimed: 0 }),
    CLAIMED_1: overrideData({ claimed: 1 }),
};
exports.GIFTAID_UPDATES_INVALID = {
    DEFAULT: utils_1.override(exports.GIFTAID_UPDATE_VALUES.valid, { data: exports.GIFTAID_UPDATE_VALUES.invalid.data }),
    INVALID_TYPE: utils_1.override(exports.GIFTAID_UPDATE_VALUES.valid, { type: exports.GIFTAID_UPDATE_VALUES.invalid.type }),
    INVALID_TRANSACTION_ID: overrideData({ transactionId: null }),
    INVALID_CLAIMED_NEGATIVE: overrideData({ claimed: -1 }),
    INVALID_CLAIMED_POSITIVE: overrideData({ claimed: 2 }),
    MISSING_TRANSACTION_ID: omitData('transactionId'),
    MISSING_CLAIMED: omitData('claimed'),
};
exports.GIFTAID_UPDATES = {
    valid: exports.GIFTAID_UPDATES_VALID,
    invalid: exports.GIFTAID_UPDATES_INVALID,
};
/**
 * Generates a random GiftaidUpdate
 *
 * @param overrides
 */
var giftaidUpdateGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return ({
        type: common_1.ErpPayloadTypes.GIFTAID__UPDATE,
        data: __assign({ transactionId: uuid_1.v4(), claimed: Math.round(Math.random()) }, overrides),
    });
};
exports.giftaidUpdateGenerator = giftaidUpdateGenerator;
//# sourceMappingURL=GiftaidUpdate.mock.js.map