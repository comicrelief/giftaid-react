"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.givingPagePutGenerator = exports.GIVING_PAGE_PUT_MOCKS = exports.GIVING_PAGE_PUT_INVALID = exports.GIVING_PAGE_PUT_VALID = exports.GIVING_PAGE_PUT_VALUES = exports.GIVING_PAGE_PUT_VALUES_INVALID = exports.GIVING_PAGE_PUT_VALUES_VALID = void 0;
var utils_1 = require("../../../../../utils");
var Postal_mock_1 = require("../../../mocks/doctypes/Postal.mock");
var common_1 = require("../../../models/common");
var validData = {
    supporter_uuid: '1956a589-5c00-4cc6-94be-33457c320c0d',
    id: 1,
    url: 'https://www.justgiving.com/fundraising/jack-chester',
    title: 'Jack Chester',
    targetAmount: 1000,
    totalDonations: 5,
    totalDonationsPlusGiftAid: 2,
    offlineAmount: 400,
    totalSmsDonations: 2,
    eventName: 'Sport Relief 2020 - Schools',
    eventId: 434232,
    charity: 187415,
    /** Marketing Preferences */
    emailConsent: false,
    postConsent: true,
    /** Postal */
    addressLine1: Postal_mock_1.POSTAL_VALUES.valid.address1,
    addressLine2: Postal_mock_1.POSTAL_VALUES.valid.address2,
    town: Postal_mock_1.POSTAL_VALUES.valid.town,
    postcode: Postal_mock_1.POSTAL_VALUES.valid.postcode,
    region: '',
    country: Postal_mock_1.POSTAL_VALUES.valid.country,
    /** User */
    firstName: 'Amy',
    lastName: 'Due',
    email: 'test@hotmail.co.uk',
};
var invalidData = {
    supporter_uuid: '1956a589-5c00-4cc6-94be-33457c320c0d',
    id: 'invalid',
    url: { key: 'not-a-string' },
    title: { key: 'not-a-string' },
    targetAmount: -1000,
    totalDonations: Number.NaN,
    totalDonationsPlusGiftAid: Number.NaN,
    offlineAmount: Number.NaN,
    totalSmsDonations: Number.NaN,
    eventName: { key: 'not-a-string' },
    eventId: { key: 'not-a-number' },
    charity: 'invalid',
    /** Marketing Preferences */
    emailConsent: { key: 'not-a-boolean' },
    postConsent: { key: 'not-a-boolean' },
    /** Postal */
    addressLine1: Postal_mock_1.POSTAL_VALUES.invalid.address1,
    addressLine2: Postal_mock_1.POSTAL_VALUES.invalid.address2,
    town: Postal_mock_1.POSTAL_VALUES.invalid.town,
    postcode: Postal_mock_1.POSTAL_VALUES.invalid.postcode,
    region: false,
    country: Postal_mock_1.POSTAL_VALUES.invalid.country,
    /** User */
    firstName: { key: 'not-a-string' },
    lastName: { key: 'not-a-string' },
    email: { key: 'not-a-string' },
};
exports.GIVING_PAGE_PUT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.JUSTGIVING__GIVINGPAGE__PUT,
    data: validData,
};
exports.GIVING_PAGE_PUT_VALUES_INVALID = {
    type: 'invalid',
    data: invalidData,
};
exports.GIVING_PAGE_PUT_VALUES = {
    valid: exports.GIVING_PAGE_PUT_VALUES_VALID,
    invalid: exports.GIVING_PAGE_PUT_VALUES_INVALID,
};
var omitData = function (keys) { return ({
    type: common_1.ErpPayloadTypes.JUSTGIVING__GIVINGPAGE__PUT,
    data: utils_1.omit(validData, keys),
}); };
var overrideData = function (data) { return ({
    type: common_1.ErpPayloadTypes.JUSTGIVING__GIVINGPAGE__PUT,
    data: utils_1.override(validData, data),
}); };
exports.GIVING_PAGE_PUT_VALID = {
    DEFAULT: exports.GIVING_PAGE_PUT_VALUES.valid,
    MISSING_ADDRESS_LINE1: omitData(['addressLine1']),
    MISSING_TOWN: omitData(['town']),
    MISSING_POSTAL_CODE: omitData(['postcode']),
    MISSING_REGION: omitData(['region']),
    MISSING_COUNTRY: omitData(['country']),
    MISSING_FIRST_NAME: omitData(['firstName']),
    NULL_FIRST_NAME: overrideData({ firstName: null }),
    MISSING_LAST_NAME: omitData(['lastName']),
    NULL_LAST_NAME: overrideData({ lastName: null }),
};
exports.GIVING_PAGE_PUT_INVALID = __assign({ DEFAULT: exports.GIVING_PAGE_PUT_VALUES.invalid, MISSING_TYPE: utils_1.omit(exports.GIVING_PAGE_PUT_VALUES.valid, ['type']), MISSING_DATA: utils_1.omit(exports.GIVING_PAGE_PUT_VALUES.valid, ['data']) }, utils_1.overrideFromMocks(exports.GIVING_PAGE_PUT_VALUES.valid, 'data', exports.GIVING_PAGE_PUT_VALUES.invalid));
exports.GIVING_PAGE_PUT_MOCKS = {
    valid: exports.GIVING_PAGE_PUT_VALID,
    invalid: exports.GIVING_PAGE_PUT_INVALID,
};
/**
 * Creates a random GivingPagePut
 *
 * @param overrides
 */
var givingPagePutGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ type: common_1.ErpPayloadTypes.JUSTGIVING__GIVINGPAGE__PUT, data: {
            supporter_uuid: utils_1.getUuid(),
            id: utils_1.getInteger(1, 9999),
            url: utils_1.getUrl(),
            title: utils_1.getString(),
            targetAmount: utils_1.getInteger(100, 1000),
            totalDonations: utils_1.getInteger(0, 100),
            totalDonationsPlusGiftAid: utils_1.getInteger(0, 100),
            offlineAmount: utils_1.getInteger(100, 1000),
            totalSmsDonations: utils_1.getInteger(100, 1000),
            eventName: utils_1.getString(),
            eventId: utils_1.getInteger(1000, 10000),
            charity: utils_1.getInteger(1000, 10000),
            /** Marketing Preferences */
            emailConsent: utils_1.getBoolean(),
            postConsent: utils_1.getBoolean(),
            /** Postal */
            addressLine1: utils_1.getString(),
            addressLine2: utils_1.getString(),
            town: utils_1.getString(),
            postcode: utils_1.getString(),
            region: utils_1.getString(),
            country: utils_1.getString(),
            /** User */
            firstName: utils_1.getString(),
            lastName: utils_1.getString(),
            email: utils_1.getEmail(),
        } }, overrides));
};
exports.givingPagePutGenerator = givingPagePutGenerator;
//# sourceMappingURL=GivingPagePut.mock.js.map