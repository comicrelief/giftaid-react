"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fundraiserSignupSubmitGenerator = exports.FUNDRAISER_SIGNUP_SUBMIT_MOCKS = void 0;
var enums_1 = require("../../../../enums");
var utils_1 = require("../../../../utils");
var common_1 = require("../../models/common");
var validData = {
    supporter_uuid: '797320c2-82a9-46f4-8404-df8813cbdb1f',
    uuid: 'b3e9a1c5-c855-4aa2-8b96-1f68f08d134b',
    campaign_code: enums_1.Campaigns.RND21,
    fundraising_segment: enums_1.FundraisingSegments.SECONDARY,
    org_name: 'Comic Relief',
    org_id: null,
    org_id_type: null,
    job_title: 'Head Teacher',
    address_id: 123456,
    address_line_1: 'CAMELFORD HOUSE 87-90',
    address_line_2: 'ALBERT EMBANKMENT',
    address_line_3: '',
    town: 'LONDON',
    postcode: 'SE1 7TP',
    phone: '020 7820 2000',
    fundraising_tools: [
        enums_1.FundraisingTools.JUSTGIVING_PAGE,
        enums_1.FundraisingTools.FUNDRAISING_PACK,
        enums_1.FundraisingTools.DIGITAL_PACK,
        enums_1.FundraisingTools.DOWNLOADABLE_TOOLS,
    ],
    fundraising_ideas: [
        enums_1.FundraisingActivities.BAKING,
        enums_1.FundraisingActivities.FANCY_DRESS,
        enums_1.FundraisingActivities.QUIZ_OR_GAMES,
    ],
    justgiving_page_id: null,
    justgiving_page_url: null,
    target: '£100 - £200',
    received_at: '2021-02-08T08:31:02.160Z',
};
var invalidData = {
    supporter_uuid: 'not-a-uuid',
    uuid: 'not a uuid',
    campaign_code: true,
    fundraising_segment: [],
    org_name: 1234,
    org_id: 12345,
    org_id_type: false,
    job_title: {},
    address_id: true,
    address_line_1: '',
    address_line_2: false,
    address_line_3: false,
    town: '',
    postcode: 'not a postcode',
    phone: '1234',
    fundraising_tools: 'Blah',
    fundraising_ideas: null,
    justgiving_page_id: 'not-a-number',
    justgiving_page_url: 'not-a-url',
    target: 100,
    received_at: 'not-a-date',
};
var dataMocks = utils_1.makeDefaultMocks(validData, invalidData, 
// nullable
[
    'org_name',
    'org_id',
    'org_id_type',
    'job_title',
    'address_id',
    'address_line_2',
    'address_line_3',
    'justgiving_page_id',
    'justgiving_page_url',
    'target',
    'phone',
], 
// optional
[
    'address_id',
    'address_line_2',
    'address_line_3',
    'justgiving_page_id',
    'justgiving_page_url',
    'phone',
]);
var FUNDRAISER_SIGNUP_SUBMIT_VALUES_VALID = {
    type: common_1.ErpPayloadTypes.FUNDRAISER__SIGNUP__SUBMIT,
    data: validData,
};
var FUNDRAISER_SIGNUP_SUBMIT_VALUES_INVALID = {
    type: 'invalid-type',
    data: invalidData,
};
var FUNDRAISER_SIGNUP_SUBMIT_VALUES = {
    valid: FUNDRAISER_SIGNUP_SUBMIT_VALUES_VALID,
    invalid: FUNDRAISER_SIGNUP_SUBMIT_VALUES_INVALID,
};
var overrideData = function (overrides) { return ({
    type: common_1.ErpPayloadTypes.FUNDRAISER__SIGNUP__SUBMIT,
    data: utils_1.override(validData, overrides),
}); };
var FUNDRAISER_SIGNUP_SUBMIT_VALID = __assign(__assign({ DEFAULT: FUNDRAISER_SIGNUP_SUBMIT_VALUES.valid }, utils_1.overrideFromMocks(FUNDRAISER_SIGNUP_SUBMIT_VALUES.valid, 'data', dataMocks.valid)), { EMPTY_STRING_ORG_NAME: overrideData({ org_name: '' }), EMPTY_STRING_JOB_TITLE: overrideData({ job_title: '' }), EMPTY_STRING_ORG_ID: overrideData({ org_id: '' }), EMPTY_STRING_ORG_ID_TYPE: overrideData({ org_id_type: '' }), EMPTY_TOOLS_ARRAY: overrideData({ fundraising_tools: [] }), EMPTY_IDEAS_ARRAY: overrideData({ fundraising_ideas: [] }), HAS_ORG_ID: overrideData({
        org_id: '12345',
        org_id_type: enums_1.OrganisationIdTypes.EDCO,
    }), HAS_JUSTGIVING_PAGE: overrideData({
        justgiving_page_id: 12345,
        justgiving_page_url: 'https://www.justgiving.com/fundraising/page-name',
    }), HAS_JUSTGIVING_PAGE_STRING_ID: overrideData({
        justgiving_page_id: '12345',
        justgiving_page_url: 'https://www.justgiving.com/fundraising/page-name',
    }), STRING_ADDRESS_ID: overrideData({ address_id: '1234' }) });
var FUNDRAISER_SIGNUP_SUBMIT_INVALID = __assign(__assign({ DEFAULT: FUNDRAISER_SIGNUP_SUBMIT_VALUES.invalid }, utils_1.overrideFromMocks(FUNDRAISER_SIGNUP_SUBMIT_VALUES.valid, 'data', dataMocks.invalid)), { HAS_ORG_ID_ONLY: overrideData({
        org_id: '12345',
        org_id_type: null,
    }), HAS_JUSTGIVING_PAGE_ID_ONLY: overrideData({
        justgiving_page_id: 12345,
        justgiving_page_url: null,
    }), HAS_JUSTGIVING_PAGE_URL_ONLY: overrideData({
        justgiving_page_id: null,
        justgiving_page_url: 'https://www.justgiving.com/fundraising/page-name',
    }), HAS_JUSTGIVING_PAGE_INVALID_ID: overrideData({
        justgiving_page_id: invalidData.justgiving_page_id,
        justgiving_page_url: 'https://www.justgiving.com/fundraising/page-name',
    }), HAS_JUSTGIVING_PAGE_INVALID_URL: overrideData({
        justgiving_page_id: 12345,
        justgiving_page_url: invalidData.justgiving_page_url,
    }) });
exports.FUNDRAISER_SIGNUP_SUBMIT_MOCKS = {
    valid: FUNDRAISER_SIGNUP_SUBMIT_VALID,
    invalid: FUNDRAISER_SIGNUP_SUBMIT_INVALID,
};
/**
 * Generates a random fundraiser signup submit action
 *
 * @param overrides
 */
var fundraiserSignupSubmitGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var justGivingPageId = utils_1.getRandomElement([utils_1.getInteger(1, 9999), null]);
    var justGivingPageUrl = justGivingPageId ? utils_1.getUrl() : null;
    var orgId = utils_1.getRandomElement([String(utils_1.getInteger(1000, 2000)), null]);
    return __assign({ type: common_1.ErpPayloadTypes.FUNDRAISER__SIGNUP__SUBMIT, data: {
            supporter_uuid: utils_1.getUuid(),
            uuid: utils_1.getUuid(),
            campaign_code: utils_1.getString(5),
            fundraising_segment: utils_1.getRandomElement(Object.values(enums_1.FundraisingSegments)),
            org_name: utils_1.getString(10),
            org_id: orgId,
            org_id_type: orgId && 'edco',
            job_title: utils_1.getRandomElement([utils_1.getString(10), null]),
            address_id: utils_1.getRandomElement([utils_1.getInteger(1, 10000), null]),
            address_line_1: utils_1.getString(10),
            address_line_2: utils_1.getRandomElement([utils_1.getString(10), '']),
            address_line_3: utils_1.getRandomElement([utils_1.getString(10), '']),
            town: utils_1.getString(10),
            // todo: add random postcode generator.
            postcode: 'SE1 7TP',
            fundraising_tools: [
                utils_1.getRandomElement(Object.values(enums_1.FundraisingTools)),
            ],
            fundraising_ideas: [
                utils_1.getRandomElement(Object.values(enums_1.FundraisingActivities)),
            ],
            justgiving_page_id: justGivingPageId,
            justgiving_page_url: justGivingPageUrl,
            target: "\u00A3" + String(utils_1.getInteger(1, 1000)),
            received_at: utils_1.getDate().toISOString(),
        } }, overrides);
};
exports.fundraiserSignupSubmitGenerator = fundraiserSignupSubmitGenerator;
//# sourceMappingURL=FundraiserSignupSubmit.mock.js.map