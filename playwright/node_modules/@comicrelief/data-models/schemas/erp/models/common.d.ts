import * as yup from 'yup';
/**
 * Enumerates all resources
 * defined on ERP Next
 */
export declare enum ErpResources {
    EMAIL_ADDRESS = "Email Address",
    GIFTAID_CLAIM = "Gift Aid Claim",
    GIFTAID_MANDATE = "Gift Aid Mandate",
    GIFTAID_DECLARATION = "Gift Aid Declaration",
    HMRC_CLAIM = "Swiftaid HMRC Claim",
    PHONE_NUMBER = "Phone Number",
    PRODUCT = "Product",
    PRODUCT_VARIANT = "Product Variant",
    SHOPIFY_ORDER = "Shopify Order",
    SHOPIFY_ORDER_LINE_ITEM = "Shopify Order Line Item",
    SUBSCRIPTION = "Regular Giving",
    SUPPORTER = "Supporter",
    PRIZE = "Prize",
    PRIZE_TICKET = "Prize Ticket",
    PRIZE_POSTAL_TICKET = "Prize Postal Ticket",
    TRANSACTION = "Donation",
    POSTAL = "Postal",
    POSTAL_ADDRESS = "Postal Address",
    FUNDRAISER_SIGNUP = "Fundraiser Signup",
    ORGANISATION = "Organisation",
    FUNDRAISING_SEGMENT = "Fundraising Segment",
    SUPPORTER_ORGANISATION = "SupporterOrganisation",
    SUPPORTER_ADDRESS = "SupporterAddress",
    JUSTGIVING_PAGE = "JustGiving Page",
    FUNDRAISING_TOOL = "Fundraising Tool",
    FUNDRAISING_ACTIVITY = "Fundraising Activity",
    FUNDRAISER_SIGNUP_TOOL = "Fundraiser Signup Tool",
    FUNDRAISER_SIGNUP_IDEA = "Fundraiser Signup Idea",
    PAYIN = "Payin",
    PAYIN_ACTIVITY = "Payin Activity"
}
/**
 * Describes the metadata ERP Next
 * adds to each entity.
 */
export interface ErpDocTypeMetadata {
    /**
     * Field used to identify the entity.
     * This is also used for detail requests.
     */
    name: string;
    owner: string;
    creation: string;
    modified: string;
    modified_by: string;
    parent: string | null;
    parentfield: string | null;
    parenttype: string | null;
    idx: number;
    docstatus: number;
    doctype: string;
}
/**
 * Enumerates all payload types
 * defined on `serverless-erp-service`
 */
export declare enum ErpPayloadTypes {
    IDENTITY__ADD = "identity:add",
    PRIZE__PRIZE__PUT = "prize:prize:put",
    PRIZE__POSTALTICKET__PUT = "prize:postalticket:put",
    PRIZE__POSTALTICKET__SETSTATE = "prize:postalticket:setstate",
    PRIZE__TICKET__PUT = "prize:ticket:put",
    SHOPIFY__ORDER__PUT = "shopify:order:put",
    SUBSCRIPTION__EXECUTE = "subscription:execute",
    SUBSCRIPTION__UPDATE = "subscription:update",
    TRANSACTION__EXECUTE = "transaction:execute",
    TRANSACTION__SMS__PUT = "transaction:sms:put",
    TRANSACTION__EXECUTE_IVR = "transaction:execute:ivr",
    PAYIN__SUBMIT = "payin:submit",
    GIFTAID__SUBMIT = "giftaid:submit",
    GIFTAID__UPDATE = "giftaid:update",
    POSTAL__PUT = "postal:put",
    USER__CREATE = "user:create",
    FUNDRAISER__SIGNUP__SUBMIT = "fundraiser:signup:submit",
    PAYIN__PUT = "psl:payin:put",
    JUSTGIVING__GIVINGPAGE__PUT = "justgiving:givingpage:put",
    JUSTGIVING__DONATION__PUT = "justgiving:donation:put"
}
export interface IdentityField {
    id: string;
    hidden?: boolean;
    verified?: boolean;
}
export interface EmailField extends IdentityField {
    email: string;
}
export interface MobileField extends IdentityField {
    number: string;
}
export declare const EmailList: yup.ObjectSchema<{
    id: string;
    email: string;
    hidden: boolean | undefined;
    verified: boolean | undefined;
}, object>;
export declare const MobileList: yup.ObjectSchema<{
    id: string;
    number: string;
    hidden: boolean | undefined;
    verified: boolean | undefined;
}, object>;
/**
 * ERP Payloads sometimes need to be assigned
 * a `supporter_uuid`, which is not available to
 * upstream services, but only to `serverless-user-service`.
 * However, they can specify an `identity_hash` instead
 * that `supporter-event-service` will use to retrieve
 * the `supporter_uuid` and "complete" the payload.
 * This test makes sure that either `supporter_uuid`
 * or `identity_hash` is provided to the payload.
 */
export declare const supporterIdentityTest: {
    name: string;
    message: string;
    exclusive: boolean;
    test: (value: unknown) => boolean;
};
export interface ErpChildEntryProps {
    /** The child doc type */
    doctype: ErpResources;
    /** The parent doctype */
    parenttype: ErpResources;
    /** The parent entry's ID */
    parent: string;
    /** The field on the parent */
    parentfield: string;
}
export declare enum ConflictRules {
    ERROR = "error",
    DUPLICATE = "duplicate",
    PREFER_EMAIL = "prefer_email",
    PREFER_PHONE = "prefer_phone"
}
export declare const ActionTypeConflictRules: {
    "giftaid:submit": ConflictRules;
};
//# sourceMappingURL=common.d.ts.map