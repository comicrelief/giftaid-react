import { TransactionProvider, TransactionStatus } from '../../../payments/models/common';
import { ErpPayloadTypes } from '../common';
/**
 * Properties required by a `TransactionSmsPut` action.
 *
 * Note that the `data` payload does not correspond to a DocType, but more with
 * the original transaction record from the Transactional Store. SMS donations
 * will be created as `Donation` documents in ERP.
 */
export interface TransactionSmsPutProps {
    type: ErpPayloadTypes.TRANSACTION__SMS__PUT;
    data: {
        /** The unique transaction ID */
        transaction_id: string;
        /** Link to Supporter entity */
        supporter_uuid?: string | null;
        /** Transaction time as Unix timestamp (milliseconds) */
        initiated_at: number;
        /**
         * Transaction status
         *
         * Note that only `PENDING`, `COMPLETE`, and `ABANDONED` statuses are valid
         * for donations. Other statuses apply to subscriptions.
         */
        status: TransactionStatus;
        /** Donation value */
        amount: number;
        /** Transaction provider */
        provider: TransactionProvider;
        /** Reference value from provider, if available */
        provider_reference: string | null;
        /** The phone number used to donate */
        mobile_number: string;
        /** Financial attribution fund */
        fund: string;
        /** Financial attribution project */
        project: string;
        /** Financial attribution activity */
        activity: string;
        /** SMS keyword (the word that was texted) */
        keyword: string;
        /** SMS short code (the number the SMS was sent to) */
        short_code: string;
    };
}
/**
 * The `TransactionSmsPut` action.
 *
 * This action is used by the Transactional Store to send SMS donations to ERP.
 */
export declare const TransactionSmsPut: import("../../../../validation").Model<TransactionSmsPutProps>;
//# sourceMappingURL=TransactionSmsPut.d.ts.map