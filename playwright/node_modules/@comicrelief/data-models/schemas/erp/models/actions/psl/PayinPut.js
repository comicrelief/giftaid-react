"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPayin = exports.toSupporterOrganisation = exports.toOrganisation = exports.toPostalAddress = exports.getFundraisingSegment = exports.getOrganisationName = exports.PayinPut = void 0;
var uuid_1 = require("uuid");
var yup = __importStar(require("yup"));
var enums_1 = require("../../../../../enums");
var validation_1 = require("../../../../../validation");
var models_1 = require("../../../../payments/models");
var common_1 = require("../../common");
var Organisation_1 = require("../../doctypes/Organisation");
var SupporterOrganisation_1 = require("../../doctypes/SupporterOrganisation");
var Payin_1 = require("../../doctypes/psl/Payin");
/**
 * Payin Put model
 */
exports.PayinPut = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, 'PayinPut', function () { return yup.object({
    type: yup.string().oneOf([common_1.ErpPayloadTypes.PAYIN__PUT]).required(),
    data: models_1.Payin.schema().required(),
}); });
/**
 * Returns the organisation name
 *
 * @param data
 */
var getOrganisationName = function (data) { return (data.establishment_name
    || data.organisation
    || data.organisationFreetext
    || null); };
exports.getOrganisationName = getOrganisationName;
/**
 * Returns the Fundraising Segment
 * associated to a given PayinProps
 *
 * @param data
 */
var getFundraisingSegment = function (data) {
    switch (data.audience) {
        case 'public':
            return enums_1.FundraisingSegments.PUBLIC;
        case 'school':
            // data.schoolType will be a FundraisingSegmentsType
            // but we can't enforce this relationship on PSL for the moment
            // and we don't want to refuse other string values
            // so we are going to keep it lean
            return (data.schoolType || enums_1.FundraisingSegments.SCHOOL);
        case 'youth':
            return enums_1.FundraisingSegments.YOUTH_GROUP;
        case 'work':
            return enums_1.FundraisingSegments.WORK;
        default:
            throw new Error("Unrecognised audience: '" + data.audience + "'");
    }
};
exports.getFundraisingSegment = getFundraisingSegment;
/**
 * Transforms a PayinProps
 * into an PostalDocTypeProps instance
 *
 * @param data
 */
var toPostalAddress = function (data) { return ({
    type: '',
    line_1: data.address1,
    line_2: data.address2 || '',
    line_3: data.address3 || '',
    post_code: data.postcode,
    town: data.town,
    country: data.country,
}); };
exports.toPostalAddress = toPostalAddress;
/**
 * Transforms a PayinProps
 * and a PostalDocTypeProps
 * into an Organisation instance
 *
 * @param data
 * @param address
 */
var toOrganisation = function (data, address) {
    var name = exports.getOrganisationName(data);
    if (!name) {
        return null;
    }
    var segment = exports.getFundraisingSegment(data);
    return Organisation_1.Organisation.validateSync({
        uuid: uuid_1.v4(),
        organisation_name: name,
        fundraising_segment: segment,
        postal_id: address.name,
        external_id_type: data.establishmentId ? 'edco' : '',
        external_id: data.establishmentId || '',
        computed_id: 'TEMP',
    });
};
exports.toOrganisation = toOrganisation;
/**
 * Transforms a PayinProps
 * and a OrganisationProps
 * into an Organisation instance
 *
 * @param data
 * @param organisation
 * @param supporter_uuid
 */
var toSupporterOrganisation = function (data, organisation, supporter_uuid) { return SupporterOrganisation_1.SupporterOrganisation.validateSync({
    supporter_uuid: supporter_uuid,
    organisation_uuid: organisation.uuid,
    job_title: data.jobTitle || '',
    source: enums_1.Sources.PSL_PAYIN,
    source_id: data.id,
    start: data.created,
}); };
exports.toSupporterOrganisation = toSupporterOrganisation;
/**
 * Transforms a PayinProps
 * into a Payin instance
 *
 * @param data
 * @param address
 * @param organisation
 */
var toPayin = function (data, address, organisation) {
    var segment = exports.getFundraisingSegment(data);
    return Payin_1.Payin.validateSync({
        id: data.id,
        transaction_id: data.transactionId,
        postal_id: address.name,
        organisation_uuid: organisation ? organisation.uuid : null,
        created: data.created,
        updated: data.updated,
        event: data.Event,
        fundraising_segment: segment,
        what_you_did: data.WhatYouDid,
        phone: data.phone,
        mobile: data.mobile,
    });
};
exports.toPayin = toPayin;
//# sourceMappingURL=PayinPut.js.map