"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionExecute = void 0;
var yup = __importStar(require("yup"));
var StrictString_1 = require("../../../../fields/StrictString");
var validation_1 = require("../../../../validation");
var common_1 = require("../../../payments/models/common");
var common_2 = require("../common");
var Donation_1 = require("../doctypes/psl/Donation");
/**
 * SubscriptionExecute Action.
 */
exports.SubscriptionExecute = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, 'SubscriptionExecute', function () {
    var validator = yup.object({
        type: yup.string().oneOf([common_2.ErpPayloadTypes.SUBSCRIPTION__EXECUTE]).required(),
        data: yup.object({
            id: yup.string().uuid().required(),
            supporter_uuid: yup.string().uuid().nullable().defined(),
            subscriptionId: yup.string().uuid().required(),
            amount: yup.number().positive().required(),
            currency: yup.string().required(),
            client: yup.string().required(),
            provider: StrictString_1.LowercaseString.oneOf(Object.values(common_1.TransactionProvider)).required(),
            created: yup.number().integer().positive().required(),
            updated: yup.number().integer().positive().required(),
            status: yup.string().oneOf(Object.values(common_1.TransactionStatus)).required(),
            campaign: yup.string().nullable(),
            transSource: yup.string().nullable(),
            transSourceUrl: yup.string().nullable(),
            transType: yup.string().nullable(),
            cartId: yup.string().nullable(),
            providerReference: yup.string().nullable(),
            affiliate: yup.string().nullable(),
            giftaid: yup.number().integer().nullable(),
            method: yup.string().oneOf(Object.values(Donation_1.DonationMethod))
                .when('provider', function (provider, schema) {
                if (provider === common_1.TransactionProvider.FONIX) {
                    return schema.default(Donation_1.DonationMethod.SMS);
                }
                return schema.default(Donation_1.DonationMethod.ONLINE);
            }),
        }).required(),
    });
    return validator;
});
//# sourceMappingURL=SubscriptionExecute.js.map