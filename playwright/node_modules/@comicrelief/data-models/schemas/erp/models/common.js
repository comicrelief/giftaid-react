"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionTypeConflictRules = exports.ConflictRules = exports.supporterIdentityTest = exports.MobileList = exports.EmailList = exports.ErpPayloadTypes = exports.ErpResources = void 0;
var yup = __importStar(require("yup"));
/**
 * Enumerates all resources
 * defined on ERP Next
 */
var ErpResources;
(function (ErpResources) {
    ErpResources["EMAIL_ADDRESS"] = "Email Address";
    ErpResources["GIFTAID_CLAIM"] = "Gift Aid Claim";
    ErpResources["GIFTAID_MANDATE"] = "Gift Aid Mandate";
    ErpResources["GIFTAID_DECLARATION"] = "Gift Aid Declaration";
    ErpResources["HMRC_CLAIM"] = "Swiftaid HMRC Claim";
    ErpResources["PHONE_NUMBER"] = "Phone Number";
    ErpResources["PRODUCT"] = "Product";
    ErpResources["PRODUCT_VARIANT"] = "Product Variant";
    ErpResources["SHOPIFY_ORDER"] = "Shopify Order";
    ErpResources["SHOPIFY_ORDER_LINE_ITEM"] = "Shopify Order Line Item";
    ErpResources["SUBSCRIPTION"] = "Regular Giving";
    ErpResources["SUPPORTER"] = "Supporter";
    ErpResources["PRIZE"] = "Prize";
    ErpResources["PRIZE_TICKET"] = "Prize Ticket";
    ErpResources["PRIZE_POSTAL_TICKET"] = "Prize Postal Ticket";
    ErpResources["TRANSACTION"] = "Donation";
    ErpResources["POSTAL"] = "Postal";
    ErpResources["POSTAL_ADDRESS"] = "Postal Address";
    ErpResources["FUNDRAISER_SIGNUP"] = "Fundraiser Signup";
    ErpResources["ORGANISATION"] = "Organisation";
    ErpResources["FUNDRAISING_SEGMENT"] = "Fundraising Segment";
    ErpResources["SUPPORTER_ORGANISATION"] = "SupporterOrganisation";
    ErpResources["SUPPORTER_ADDRESS"] = "SupporterAddress";
    ErpResources["JUSTGIVING_PAGE"] = "JustGiving Page";
    ErpResources["FUNDRAISING_TOOL"] = "Fundraising Tool";
    ErpResources["FUNDRAISING_ACTIVITY"] = "Fundraising Activity";
    ErpResources["FUNDRAISER_SIGNUP_TOOL"] = "Fundraiser Signup Tool";
    ErpResources["FUNDRAISER_SIGNUP_IDEA"] = "Fundraiser Signup Idea";
    ErpResources["PAYIN"] = "Payin";
    ErpResources["PAYIN_ACTIVITY"] = "Payin Activity";
})(ErpResources = exports.ErpResources || (exports.ErpResources = {}));
/**
 * Enumerates all payload types
 * defined on `serverless-erp-service`
 */
var ErpPayloadTypes;
(function (ErpPayloadTypes) {
    ErpPayloadTypes["IDENTITY__ADD"] = "identity:add";
    ErpPayloadTypes["PRIZE__PRIZE__PUT"] = "prize:prize:put";
    ErpPayloadTypes["PRIZE__POSTALTICKET__PUT"] = "prize:postalticket:put";
    ErpPayloadTypes["PRIZE__POSTALTICKET__SETSTATE"] = "prize:postalticket:setstate";
    ErpPayloadTypes["PRIZE__TICKET__PUT"] = "prize:ticket:put";
    ErpPayloadTypes["SHOPIFY__ORDER__PUT"] = "shopify:order:put";
    ErpPayloadTypes["SUBSCRIPTION__EXECUTE"] = "subscription:execute";
    ErpPayloadTypes["SUBSCRIPTION__UPDATE"] = "subscription:update";
    ErpPayloadTypes["TRANSACTION__EXECUTE"] = "transaction:execute";
    ErpPayloadTypes["TRANSACTION__SMS__PUT"] = "transaction:sms:put";
    ErpPayloadTypes["TRANSACTION__EXECUTE_IVR"] = "transaction:execute:ivr";
    ErpPayloadTypes["PAYIN__SUBMIT"] = "payin:submit";
    ErpPayloadTypes["GIFTAID__SUBMIT"] = "giftaid:submit";
    ErpPayloadTypes["GIFTAID__UPDATE"] = "giftaid:update";
    ErpPayloadTypes["POSTAL__PUT"] = "postal:put";
    ErpPayloadTypes["USER__CREATE"] = "user:create";
    ErpPayloadTypes["FUNDRAISER__SIGNUP__SUBMIT"] = "fundraiser:signup:submit";
    ErpPayloadTypes["PAYIN__PUT"] = "psl:payin:put";
    ErpPayloadTypes["JUSTGIVING__GIVINGPAGE__PUT"] = "justgiving:givingpage:put";
    ErpPayloadTypes["JUSTGIVING__DONATION__PUT"] = "justgiving:donation:put";
})(ErpPayloadTypes = exports.ErpPayloadTypes || (exports.ErpPayloadTypes = {}));
exports.EmailList = yup
    .object({
    id: yup.string().required(),
    email: yup.string().email().required(),
    hidden: yup.boolean().default(function () { return false; }),
    verified: yup.boolean().default(function () { return false; }),
})
    .required();
exports.MobileList = yup
    .object({
    id: yup.string().required(),
    number: yup.string().required(),
    hidden: yup.boolean().default(function () { return false; }),
    verified: yup.boolean().default(function () { return false; }),
})
    .required();
/**
 * ERP Payloads sometimes need to be assigned
 * a `supporter_uuid`, which is not available to
 * upstream services, but only to `serverless-user-service`.
 * However, they can specify an `identity_hash` instead
 * that `supporter-event-service` will use to retrieve
 * the `supporter_uuid` and "complete" the payload.
 * This test makes sure that either `supporter_uuid`
 * or `identity_hash` is provided to the payload.
 */
exports.supporterIdentityTest = {
    name: 'supporter-uuid-or-identity-hash-required',
    message: '`supporter_uuid` or `identity_hash` must be provided.',
    exclusive: true,
    test: function (value) {
        if (typeof value !== 'object') {
            return false;
        }
        if (!value) {
            return false;
        }
        var casted = value;
        return Boolean(casted.supporter_uuid || casted.identity_hash);
    },
};
var ConflictRules;
(function (ConflictRules) {
    ConflictRules["ERROR"] = "error";
    ConflictRules["DUPLICATE"] = "duplicate";
    ConflictRules["PREFER_EMAIL"] = "prefer_email";
    ConflictRules["PREFER_PHONE"] = "prefer_phone";
})(ConflictRules = exports.ConflictRules || (exports.ConflictRules = {}));
exports.ActionTypeConflictRules = (_a = {},
    _a[ErpPayloadTypes.GIFTAID__SUBMIT] = ConflictRules.DUPLICATE,
    _a);
//# sourceMappingURL=common.js.map