"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JustGivingPage = exports.DOCTYPE = exports.ConsentType = void 0;
var yup = __importStar(require("yup"));
var StrictString_1 = require("../../../../fields/StrictString");
var validation_1 = require("../../../../validation");
var common_1 = require("../common");
/**
 * ConsentType enum
 */
var ConsentType;
(function (ConsentType) {
    ConsentType["YES"] = "Yes";
    ConsentType["NO"] = "No";
    ConsentType["UNANSWERED"] = "Unanswered";
})(ConsentType = exports.ConsentType || (exports.ConsentType = {}));
exports.DOCTYPE = common_1.ErpResources.JUSTGIVING_PAGE;
exports.JustGivingPage = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, function () { return yup.object({
    id: yup.string().uuid().nullable().default(function () { return null; }),
    supporter: StrictString_1.StrictString.uuid().nullable().default(function () { return null; }),
    justgiving_id: yup.string().required(),
    url: StrictString_1.StrictString.url().required(),
    title: StrictString_1.StrictString.nullable().default(function () { return null; }).defined(),
    target: yup.string().nullable().default(function () { return null; }).defined(),
    grand_total_raised_plus_gift_aid: yup.string().nullable().default(function () { return null; }).defined(),
    grand_total_raised_excluding_gift_aid: yup.string().nullable().default(function () { return null; }).defined(),
    total_estimated_gift_aid: yup.string().nullable().default(function () { return null; }).defined(),
    total_raised_percentage_of_fundraising_target: yup.string().nullable().default(function () { return null; }).defined(),
    total_raised_online: yup.string().nullable().default(function () { return null; }).defined(),
    total_raised_offline: yup.string().nullable().default(function () { return null; }).defined(),
    total_raised_sms: yup.string().nullable().default(function () { return null; }).defined(),
    event_name: yup.string().nullable().default(function () { return null; }).defined(),
    event_id: yup.string().nullable().default(function () { return null; }).defined(),
    charity: yup.string().nullable().default(function () { return null; }).defined(),
    marketing_email: yup.string().oneOf(Object.values(ConsentType)).nullable(),
    marketing_postal: yup.string().oneOf(Object.values(ConsentType)).nullable(),
    marketing_phone: yup.string().oneOf(Object.values(ConsentType)).nullable(),
    marketing_sms: yup.string().oneOf(Object.values(ConsentType)).nullable(),
}); });
//# sourceMappingURL=JustGivingPage.js.map