"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organisation = exports.DOCTYPE = exports.ExternalIdTypes = void 0;
var uuid_1 = require("uuid");
var yup = __importStar(require("yup"));
var StrictString_1 = require("../../../../fields/StrictString");
var validation_1 = require("../../../../validation");
var common_1 = require("../common");
var ExternalIdTypes;
(function (ExternalIdTypes) {
    ExternalIdTypes["EDCO"] = "edco";
})(ExternalIdTypes = exports.ExternalIdTypes || (exports.ExternalIdTypes = {}));
exports.DOCTYPE = common_1.ErpResources.ORGANISATION;
/* eslint-disable no-template-curly-in-string */
// The standard uuid validator rejects empty strings.
var uuidOrEmptyString = function () { return StrictString_1.StrictString.ensure().test('is-uuid', '${path} must be a valid UUID', function (value) {
    if (value === '') {
        return true;
    }
    return StrictString_1.StrictString.uuid().isValidSync(value);
}); };
/**
 * ERP Organisation model
 */
exports.Organisation = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, function () { return yup.object().shape({
    uuid: StrictString_1.StrictString.uuid().defined().nullable(false).default(uuid_1.v4),
    parent_uuid: uuidOrEmptyString(),
    organisation_name: StrictString_1.StrictString.required(),
    fundraising_segment: StrictString_1.StrictString.required(),
    postal_id: StrictString_1.StrictString.required(),
    // If either of external_id or external_id_type is truthy,
    //  then the other one must be truthy too.
    external_id_type: StrictString_1.StrictString.ensure().when('external_id', {
        is: function (value) { return !!value; },
        then: StrictString_1.StrictString.required('${path} is required when external_id is present').oneOf(Object.values(ExternalIdTypes)),
    }),
    external_id: StrictString_1.StrictString.ensure().when('external_id_type', {
        is: function (value) { return !!value; },
        then: StrictString_1.StrictString.required('${path} is required when external_id_type is present'),
    }),
    computed_id: StrictString_1.StrictString.required(),
}, 
// yup requires this additional parameter if you have 'cyclic dependencies' such as .when() conditions that
//  reference one another.
// It's an array of field pairs. If you have circular references involving more than two fields, you need to add all
//  the possible pair combinations of those fields.
// It's not really documented other than in this test:
// https://github.com/jquense/yup/blob/0fca0a49c7305a22dc264d9f42c11040dd63a491/test/object.js#L767
[['external_id_type', 'external_id']]); });
//# sourceMappingURL=Organisation.js.map