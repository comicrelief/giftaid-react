"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErpShopifyOrder = exports.CancelledReason = exports.FulfilmentStatus = exports.PaymentStatus = exports.DOCTYPE = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../../validation");
var common_1 = require("../../common");
var ShopifyOrderLineItem_1 = require("./ShopifyOrderLineItem");
/**
 * Name of this doctype in ERP.
 */
exports.DOCTYPE = common_1.ErpResources.SHOPIFY_ORDER;
/**
 * Shopify order financial status.
 */
var PaymentStatus;
(function (PaymentStatus) {
    /**
     * The payments are pending. Payment might fail in this state. Check again to
     * confirm whether the payments have been paid successfully.
     */
    PaymentStatus["PENDING"] = "Pending";
    /** The payments have been authorized. */
    PaymentStatus["AUTHORIZED"] = "Authorized";
    /** The order has been partially paid for. */
    PaymentStatus["PARTIALLY_PAID"] = "Partially paid";
    /** The payments have been paid. */
    PaymentStatus["PAID"] = "Paid";
    /** The payments have been partially refunded. */
    PaymentStatus["PARTIALLY_REFUNDED"] = "Partially refunded";
    /** The payments have been refunded. */
    PaymentStatus["REFUNDED"] = "Refunded";
    /** The payments have been voided. */
    PaymentStatus["VOIDED"] = "Voided";
})(PaymentStatus = exports.PaymentStatus || (exports.PaymentStatus = {}));
/**
 * Shopify order fulfilment status.
 */
var FulfilmentStatus;
(function (FulfilmentStatus) {
    /** Every line item in the order has been fulfilled. */
    FulfilmentStatus["FULFILLED"] = "Fulfilled";
    /** None of the line items in the order have been fulfilled. */
    FulfilmentStatus["UNFULFILLED"] = "Unfulfilled";
    /** At least one line item in the order has been fulfilled. */
    FulfilmentStatus["PARTIAL"] = "Partial";
    /** Every line item in the order has been restocked and the order canceled. */
    FulfilmentStatus["RESTOCKED"] = "Restocked";
})(FulfilmentStatus = exports.FulfilmentStatus || (exports.FulfilmentStatus = {}));
/**
 * Shopify order cancellation reason.
 */
var CancelledReason;
(function (CancelledReason) {
    /** The customer canceled the order. */
    CancelledReason["CUSTOMER"] = "Customer";
    /** The order was fraudulent. */
    CancelledReason["FRAUD"] = "Fraud";
    /** Items in the order were not in inventory. */
    CancelledReason["INVENTORY"] = "Inventory";
    /** The payment was declined. */
    CancelledReason["DECLINED"] = "Declined";
    /** A reason not in this list. */
    CancelledReason["OTHER"] = "Other";
})(CancelledReason = exports.CancelledReason || (exports.CancelledReason = {}));
/**
 * Model for a `Shopify Order` document in ERP.
 */
exports.ErpShopifyOrder = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, 
/* eslint-disable newline-per-chained-call */
function () { return yup.object({
    shopify_id: yup.string().required(),
    shopify_processed_at: validation_1.Timestamp.required(),
    shopify_updated_at: validation_1.Timestamp.required(),
    shopify_cancelled_at: validation_1.Timestamp.nullable().defined(),
    shopify_customer_id: yup.string().required(),
    supporter_uuid: validation_1.SupporterUUID,
    order_number: yup.string().required(),
    cancel_reason: yup.string().nullable().oneOf(__spreadArray([null], Object.values(CancelledReason))).defined(),
    payment_status: yup.string().oneOf(Object.values(PaymentStatus)).required(),
    fulfilment_status: yup.string().oneOf(Object.values(FulfilmentStatus)).required(),
    postcode: yup.string().uppercase().required(),
    total_line_items_price: validation_1.ErpCurrencyField.min(0).required(),
    total_discounts: validation_1.ErpCurrencyField.min(0).required(),
    subtotal_price: validation_1.ErpCurrencyField.min(0).required(),
    subtotal_includes_vat: validation_1.NumericBoolField.required(),
    total_outstanding: validation_1.ErpCurrencyField.min(0).required(),
    total_donation_received: validation_1.ErpCurrencyField.min(0).required(),
    total_postage: validation_1.ErpCurrencyField.min(0).required(),
    total_price: validation_1.ErpCurrencyField.min(0).required(),
    total_vat: validation_1.ErpCurrencyField.min(0).required(),
    total_refunded: validation_1.ErpCurrencyField.min(0).required(),
    currency: yup.string().required(),
    line_items: yup.array(ShopifyOrderLineItem_1.ErpShopifyOrderLineItem.schema().required()).min(1).required(),
}); });
//# sourceMappingURL=ShopifyOrder.js.map