"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromSupporterInfo = exports.toPostal = exports.toDocType = exports.PostalDocType = exports.Postal = exports.DOCTYPE = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../validation");
var common_1 = require("../common");
/**
 * Name of this doctype in ERP.
 */
exports.DOCTYPE = common_1.ErpResources.POSTAL;
/**
 * Model for a `Postal` in transit
 * in our serverless services.
 */
exports.Postal = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, 'PostalServerless', function () { return yup.object({
    name: yup.string().notRequired(),
    address_id: yup.number().default(function () { return null; }).nullable(),
    address1: yup.string().required(),
    address2: yup.string().default(function () { return ''; }).defined(),
    address3: yup.string().default(function () { return ''; }).defined(),
    postcode: yup.string().required(),
    town: yup.string().required(),
    country: yup.string().required(),
    supporter_uuid: validation_1.SupporterUUID,
    identity_hash: yup.string().default(function () { return ''; }).defined(),
}); });
/**
 * Model for a `Postal` mirroring the doctype
 * defined on ERP Next
 */
exports.PostalDocType = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, function () { return yup.object({
    name: yup.string().notRequired(),
    address_id: yup.number().default(function () { return null; }).nullable(),
    type: yup.string().default(function () { return ''; }).defined(),
    line_1: yup.string().required(),
    line_2: yup.string().default(function () { return ''; }).defined(),
    line_3: yup.string().default(function () { return ''; }).defined(),
    post_code: yup.string().required(),
    town: yup.string().default(function () { return ''; }).defined(),
    country: yup.string().default(function () { return ''; }).defined(),
    parent: yup.string().optional(),
    parenttype: yup.string().oneOf([common_1.ErpResources.SUPPORTER]).optional(),
    parentfield: yup.string().oneOf(['postal']).optional(),
}); });
/**
 * Tranforms a PostalProps object
 * into a PostalDocTypeProps object.
 *
 * @param postal
 */
var toDocType = function (postal) {
    if (!postal.supporter_uuid) {
        throw new Error('supporter_uuid must be a valid UUID');
    }
    return {
        name: postal.name || '',
        type: '',
        address_id: postal.address_id || null,
        line_1: postal.address1,
        line_2: postal.address2 || '',
        line_3: postal.address3 || '',
        post_code: postal.postcode,
        town: postal.town,
        country: postal.country,
        parent: postal.supporter_uuid,
        parenttype: common_1.ErpResources.SUPPORTER,
        parentfield: 'postal',
    };
};
exports.toDocType = toDocType;
/**
 * Transforms an PostalDocTypeProps object
 * into a PostalProps object
 *
 * @param document
 */
var toPostal = function (document) { return ({
    name: document.name,
    address_id: document.address_id || null,
    address1: document.line_1,
    address2: document.line_2,
    address3: document.line_3,
    postcode: document.post_code,
    town: document.town,
    country: document.country,
    supporter_uuid: document.parent,
}); };
exports.toPostal = toPostal;
/**
 * Transforms a SupporterInfoProps object
 * into a PostalProps object
 *
 * @param supporter
 */
var fromSupporterInfo = function (supporter) { return ({
    address1: supporter.address1,
    postcode: supporter.postcode,
    town: supporter.town,
    country: supporter.country,
    supporter_uuid: null,
}); };
exports.fromSupporterInfo = fromSupporterInfo;
//# sourceMappingURL=Postal.js.map