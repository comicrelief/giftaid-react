"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegularGiving = exports.PROVIDER_MAP = exports.STATUS_MAP = exports.SubscriptionProvider = exports.SubscriptionStatus = exports.DOCTYPE = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../../validation");
var common_1 = require("../../../../payments/models/common");
var common_2 = require("../../common");
/**
 * Name of this doctype in ERP.
 */
exports.DOCTYPE = common_2.ErpResources.SUBSCRIPTION;
/**
 * Represents subscription status in ERP.
 *
 * These values are capitalised because they're user-facing.
 *
 * For subscription status in PSL, see src/schemas/payments/models/common.ts
 */
var SubscriptionStatus;
(function (SubscriptionStatus) {
    SubscriptionStatus["ACTIVE"] = "Active";
    SubscriptionStatus["CANCELLED"] = "Cancelled";
    SubscriptionStatus["FAILED"] = "Failed";
    SubscriptionStatus["PENDING"] = "Pending";
    SubscriptionStatus["POST_DUE"] = "PostDue";
})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
/**
 * Subscription payment providers in ERP.
 *
 * Currently GoCardless is the only provider used in production, but the other
 * values appear in dev/staging.
 *
 * See also subscription providers in PSL: src/schemas/payments/models/common.ts
 */
var SubscriptionProvider;
(function (SubscriptionProvider) {
    SubscriptionProvider["BRAINTREE"] = "Braintree";
    SubscriptionProvider["DUMMY"] = "Dummy";
    SubscriptionProvider["GO_CARDLESS"] = "GoCardless";
})(SubscriptionProvider = exports.SubscriptionProvider || (exports.SubscriptionProvider = {}));
/**
 * Mapping from PSL subscription status to ERP subscription status values.
 */
exports.STATUS_MAP = (_a = {},
    _a[common_1.SubscriptionStatus.ACTIVE] = SubscriptionStatus.ACTIVE,
    _a[common_1.SubscriptionStatus.CANCELLED] = SubscriptionStatus.CANCELLED,
    _a[common_1.SubscriptionStatus.FAILED] = SubscriptionStatus.FAILED,
    _a[common_1.SubscriptionStatus.PENDING] = SubscriptionStatus.PENDING,
    _a[common_1.SubscriptionStatus.POST_DUE] = SubscriptionStatus.POST_DUE,
    _a);
/**
 * Mapping from PSL subscription provider to ERP subscription provider values.
 */
exports.PROVIDER_MAP = (_b = {},
    _b[common_1.SubscriptionProvider.BRAINTREE] = SubscriptionProvider.BRAINTREE,
    _b[common_1.SubscriptionProvider.DUMMY] = SubscriptionProvider.DUMMY,
    _b[common_1.SubscriptionProvider.GO_CARDLESS] = SubscriptionProvider.GO_CARDLESS,
    _b);
/**
 * Model for a `Regular Giving` doctype in ERP.
 */
exports.RegularGiving = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, function () { return yup.object({
    id: yup.string().uuid().required(),
    supporter: yup.string().uuid().required(),
    status: yup.string().oneOf(Object.values(SubscriptionStatus)).required(),
    amount: yup.number().required(),
    billing_day: yup.string().required(),
    // giftaid can be submitted as null, but this translates to 'No' in ERP
    giftaid: validation_1.NumericBoolField.transform(function (value, originalValue) { return (originalValue === null ? validation_1.NumericBool.NO : value); }).required(),
    provider: yup.string().oneOf(Object.values(SubscriptionProvider)).required(),
    provider_reference: yup.string().nullable().default(function () { return null; }).defined(),
    cart_id: yup.string().nullable().default(function () { return null; }).defined(),
}); });
//# sourceMappingURL=RegularGiving.js.map