import { NumericBool } from '../../../../../validation';
import { TransactionProvider, TransactionStatus } from '../../../../payments/models/common';
import { ErpResources } from '../../common';
/**
 * Name of this doctype in ERP.
 */
export declare const DOCTYPE = ErpResources.TRANSACTION;
/**
 * Describes the donation type
 */
export declare enum DonationType {
    DONATION = "Donation",
    PAYIN = "Payin",
    PRIZE = "Prize Ticket Bundle",
    FUNDRAISING = "Fundraising",
    UNKNOWN = "Unknown"
}
/**
 * Represents how the transaction was performed.
 *
 * These are historic values stored on ERP Next.
 */
export declare enum DonationMethod {
    SMS = "SMS",
    ONLINE = "Online",
    IVR = "IVR"
}
/**
 * Represents donation status in ERP.
 *
 * These values are capitalised because they're user-facing.
 *
 * For transaction status in PSL, see src/schemas/payments/models/common.ts
 */
export declare enum DonationStatus {
    ABANDONED = "Abandoned",
    CANCELLED = "Cancelled",
    COMPLETE = "Complete",
    DECLINED = "Declined",
    ERROR = "Error",
    FAILED = "Failed",
    PENDING = "Pending",
    REFUNDED = "Refunded"
}
/**
 * Payment providers in ERP.
 *
 * See also payment providers in PSL: src/schemas/payments/models/common.ts
 */
export declare enum DonationProvider {
    BRAINTREE = "Braintree",
    DUMMY = "Dummy",
    FONIX = "Fonix",
    GO_CARDLESS = "GoCardless",
    PAYPAL = "Paypal",
    STRIPE = "Stripe",
    UNKNOWN = "N/A",
    WORLDPAY = "Worldpay",
    JUST_GIVING = "Just Giving",
    UPWARD_COMMS = "UpwardComms"
}
/**
 * Mapping from PSL transaction status to ERP donation status values.
 */
export declare const STATUS_MAP: Record<TransactionStatus, DonationStatus>;
/**
 * Mapping from PSL transaction provider to ERP donation provider values.
 */
export declare const PROVIDER_MAP: Record<TransactionProvider, DonationProvider>;
/**
 * Type representing the `Donation` doctype in ERP.
 */
export interface DonationProps {
    /** PSL UUID */
    id: string;
    /** Donation Type */
    type: DonationType;
    /** Transaction Method, i.e. online, sms, etc */
    method: DonationMethod;
    /** Donation amount */
    amount: number;
    /** Transaction Status */
    status: DonationStatus;
    /** Date of the transaction */
    transaction_date: string;
    fund: string | null;
    project: string | null;
    activity: string | null;
    /** Transaction provider */
    provider: DonationProvider;
    account_identifier: string | null;
    /** Transaction provider reference */
    provider_reference: string | null;
    /** Related supporter */
    supporter: string;
    /** Related subscription, if any */
    subscription: string | null;
    /** Related Giftaid claim */
    giftaid_claim: string | null;
    /** Related Cart ID */
    cart_id: string | null;
    /** Payment client */
    client: string | null;
    /** For SMS donations: the mobile number used to make the donation. */
    sms_mobile_number?: string | null;
    /** For SMS donations: the SMS keyword. */
    sms_keyword?: string | null;
    /** For SMS donations: the SMS short code. */
    sms_short_code?: string | null;
    /** Fundraiser giving page Id */
    justgiving_page?: string | null;
    /** Is Anonymous donation */
    is_anonymous?: NumericBool | null;
}
/**
 * Model for a `Donation` doctype in ERP.
 */
export declare const Donation: import("../../../../../validation").Model<DonationProps>;
//# sourceMappingURL=Donation.d.ts.map