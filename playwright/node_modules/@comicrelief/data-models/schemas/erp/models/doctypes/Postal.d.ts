import { SupporterInfoProps } from '../../../../validation';
import { ErpResources } from '../common';
/**
 * Name of this doctype in ERP.
 */
export declare const DOCTYPE = ErpResources.POSTAL;
/**
 * Our serverless representation of the `Postal` doctype in ERP.
 * Close to PostalDocTypeProps but doesn't match 1 to 1
 * because we need extra information in our services.
 */
export interface PostalProps {
    /**
     * Identifies a Postal entry.
     *
     * This field is generated by ERP Next
     * so we can't rename it.
     */
    name?: string;
    /**
     * The ID of the address, which we get back from our address lookup.
     *
     * Optional as not all addresses will come from the lookup.
     *
     * Note: Usinga Data field on ERP as number fields aren't nullable.
     */
    address_id?: number | null;
    /** First line of address. Required */
    address1: string;
    /** Second line of address. Optional */
    address2?: string;
    /** Third line of address. Optional */
    address3?: string;
    /** UK Postcode */
    postcode: string;
    /** UK Town */
    town: string;
    /** UK Country */
    country: string;
    /** Associated supporter */
    supporter_uuid?: string | null;
    /** Associated identity_hash */
    identity_hash?: string;
}
/**
 * Exact representation of the Postal doctype
 */
export interface PostalDocTypeProps {
    /**
     * Identifies a Postal entry.
     *
     * This field is generated by ERP Next
     * so we can't rename it.
     */
    name?: string;
    /** See above * */
    address_id?: number | null;
    /**
     * Legacy field. Should be removed.
     * Postal Address type
     */
    type: string;
    /** First line of address */
    line_1: string;
    /** Second line of address */
    line_2: string;
    /** Third line of address */
    line_3: string;
    /** UK Postcode */
    post_code: string;
    /** UK Town */
    town: string;
    /** UK Country */
    country: string;
    /**
     * Legacy field. Should be removed.
     * Supporter UUID
     */
    parent?: string;
    /**
     * Legacy field. Should be removed.
     * Informs ERP Next that the parent
     * is of doctype `ErpResources.SUPPORTER`
     */
    parenttype?: ErpResources.SUPPORTER;
    /**
     * Legacy field. Should be removed.
     * Informs ERP Next that the parent field
     * to be used is `postal`
     */
    parentfield?: 'postal';
}
/**
 * Model for a `Postal` in transit
 * in our serverless services.
 */
export declare const Postal: import("../../../../validation").Model<PostalProps>;
/**
 * Model for a `Postal` mirroring the doctype
 * defined on ERP Next
 */
export declare const PostalDocType: import("../../../../validation").Model<PostalDocTypeProps>;
/**
 * Tranforms a PostalProps object
 * into a PostalDocTypeProps object.
 *
 * @param postal
 */
export declare const toDocType: (postal: PostalProps) => PostalDocTypeProps;
/**
 * Transforms an PostalDocTypeProps object
 * into a PostalProps object
 *
 * @param document
 */
export declare const toPostal: (document: PostalDocTypeProps) => PostalProps;
/**
 * Transforms a SupporterInfoProps object
 * into a PostalProps object
 *
 * @param supporter
 */
export declare const fromSupporterInfo: (supporter: SupporterInfoProps) => PostalProps;
//# sourceMappingURL=Postal.d.ts.map