"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Donation = exports.PROVIDER_MAP = exports.STATUS_MAP = exports.DonationProvider = exports.DonationStatus = exports.DonationMethod = exports.DonationType = exports.DOCTYPE = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../../validation");
var common_1 = require("../../../../payments/models/common");
var common_2 = require("../../common");
/**
 * Name of this doctype in ERP.
 */
exports.DOCTYPE = common_2.ErpResources.TRANSACTION;
/**
 * Describes the donation type
 */
var DonationType;
(function (DonationType) {
    DonationType["DONATION"] = "Donation";
    DonationType["PAYIN"] = "Payin";
    DonationType["PRIZE"] = "Prize Ticket Bundle";
    DonationType["FUNDRAISING"] = "Fundraising";
    DonationType["UNKNOWN"] = "Unknown";
})(DonationType = exports.DonationType || (exports.DonationType = {}));
/**
 * Represents how the transaction was performed.
 *
 * These are historic values stored on ERP Next.
 */
var DonationMethod;
(function (DonationMethod) {
    DonationMethod["SMS"] = "SMS";
    DonationMethod["ONLINE"] = "Online";
    DonationMethod["IVR"] = "IVR";
})(DonationMethod = exports.DonationMethod || (exports.DonationMethod = {}));
/**
 * Represents donation status in ERP.
 *
 * These values are capitalised because they're user-facing.
 *
 * For transaction status in PSL, see src/schemas/payments/models/common.ts
 */
var DonationStatus;
(function (DonationStatus) {
    DonationStatus["ABANDONED"] = "Abandoned";
    DonationStatus["CANCELLED"] = "Cancelled";
    DonationStatus["COMPLETE"] = "Complete";
    DonationStatus["DECLINED"] = "Declined";
    DonationStatus["ERROR"] = "Error";
    DonationStatus["FAILED"] = "Failed";
    DonationStatus["PENDING"] = "Pending";
    DonationStatus["REFUNDED"] = "Refunded";
})(DonationStatus = exports.DonationStatus || (exports.DonationStatus = {}));
/**
 * Payment providers in ERP.
 *
 * See also payment providers in PSL: src/schemas/payments/models/common.ts
 */
var DonationProvider;
(function (DonationProvider) {
    DonationProvider["BRAINTREE"] = "Braintree";
    DonationProvider["DUMMY"] = "Dummy";
    DonationProvider["FONIX"] = "Fonix";
    DonationProvider["GO_CARDLESS"] = "GoCardless";
    DonationProvider["PAYPAL"] = "Paypal";
    DonationProvider["STRIPE"] = "Stripe";
    DonationProvider["UNKNOWN"] = "N/A";
    DonationProvider["WORLDPAY"] = "Worldpay";
    DonationProvider["JUST_GIVING"] = "Just Giving";
    DonationProvider["UPWARD_COMMS"] = "UpwardComms";
})(DonationProvider = exports.DonationProvider || (exports.DonationProvider = {}));
/**
 * Mapping from PSL transaction status to ERP donation status values.
 */
exports.STATUS_MAP = (_a = {},
    _a[common_1.TransactionStatus.ABANDONED] = DonationStatus.ABANDONED,
    _a[common_1.TransactionStatus.CANCELLED] = DonationStatus.CANCELLED,
    _a[common_1.TransactionStatus.COMPLETE] = DonationStatus.COMPLETE,
    _a[common_1.TransactionStatus.DECLINED] = DonationStatus.DECLINED,
    _a[common_1.TransactionStatus.ERROR] = DonationStatus.ERROR,
    _a[common_1.TransactionStatus.FAILED] = DonationStatus.FAILED,
    _a[common_1.TransactionStatus.PENDING] = DonationStatus.PENDING,
    _a[common_1.TransactionStatus.REFUNDED] = DonationStatus.REFUNDED,
    _a);
/**
 * Mapping from PSL transaction provider to ERP donation provider values.
 */
exports.PROVIDER_MAP = (_b = {},
    _b[common_1.TransactionProvider.BRAINTREE] = DonationProvider.BRAINTREE,
    _b[common_1.TransactionProvider.DUMMY] = DonationProvider.DUMMY,
    _b[common_1.TransactionProvider.FONIX] = DonationProvider.FONIX,
    _b[common_1.TransactionProvider.GO_CARDLESS] = DonationProvider.GO_CARDLESS,
    _b[common_1.TransactionProvider.PAYPAL_EXPRESS] = DonationProvider.PAYPAL,
    _b[common_1.TransactionProvider.STRIPE] = DonationProvider.STRIPE,
    _b[common_1.TransactionProvider.UNKNOWN] = DonationProvider.UNKNOWN,
    _b[common_1.TransactionProvider.WORLDPAY] = DonationProvider.WORLDPAY,
    _b[common_1.TransactionProvider.WORLDPAY_CG] = DonationProvider.WORLDPAY,
    _b[common_1.TransactionProvider.WORLDPAY_RND] = DonationProvider.WORLDPAY,
    _b[common_1.TransactionProvider.JUST_GIVING] = DonationProvider.JUST_GIVING,
    _b[common_1.TransactionProvider.UPWARD_COMMS] = DonationProvider.UPWARD_COMMS,
    _b);
/**
 * Model for a `Donation` doctype in ERP.
 */
exports.Donation = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, exports.DOCTYPE, function () { return yup.object({
    id: yup.string().uuid().required(),
    type: yup.string().oneOf(Object.values(DonationType)).required(),
    method: yup.string().oneOf(Object.values(DonationMethod)).required(),
    amount: yup.number().required(),
    status: yup.string().oneOf(Object.values(DonationStatus)).required(),
    transaction_date: validation_1.Timestamp.required(),
    fund: yup.string().nullable().default(function () { return null; }).defined(),
    project: yup.string().nullable().default(function () { return null; }).defined(),
    activity: yup.string().nullable().default(function () { return null; }).defined(),
    provider: yup.string().oneOf(Object.values(DonationProvider)).required(),
    account_identifier: yup.string().nullable().default(function () { return null; }).defined(),
    provider_reference: yup.string().nullable().default(function () { return null; }).defined(),
    supporter: yup.string().uuid().required(),
    subscription: yup.string().uuid().nullable().default(function () { return null; })
        .defined(),
    giftaid_claim: yup.string().uuid().nullable().default(function () { return null; })
        .defined(),
    cart_id: yup.string().nullable().default(function () { return null; }).defined(),
    client: yup.string().nullable().default(function () { return null; }).defined(),
    sms_mobile_number: validation_1.NonEmptyString.nullable().default(function () { return null; }).defined(),
    sms_keyword: validation_1.NonEmptyString.nullable().default(function () { return null; }).defined(),
    sms_short_code: validation_1.NonEmptyString.nullable().default(function () { return null; }).defined(),
    justgiving_page: yup.string().nullable().default(function () { return null; }).defined(),
    is_anonymous: validation_1.NumericBoolField.nullable().default(function () { return validation_1.NumericBool.NO; }).defined(),
}); });
//# sourceMappingURL=Donation.js.map