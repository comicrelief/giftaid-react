import { ErpResources } from '../common';
export declare enum ExternalIdTypes {
    EDCO = "edco"
}
export declare const DOCTYPE = ErpResources.ORGANISATION;
export interface OrganisationProps {
    /** A uuid will be generated if this is omitted */
    uuid: string;
    /**
     * Organisations can be parents of other organisations (Link column on ERP)
     *
     * There's no restriction on the number of levels in a parent-child
     *  hierarchy.
     */
    parent_uuid?: string;
    /**
     * Can't just use `name` as this is reserved by ERP Next.
     */
    organisation_name: string;
    /**
     * Corresponds to FundraisingSegmentProps.code
     */
    fundraising_segment: string;
    /**
     * Corresponds to AddressProps.uuid (Link column on ERP)
     */
    postal_id: string;
    /**
     * If the organisation data is from some third-party service e.g. Edco,
     *  these fields can be used to store the ID from that service.
     */
    external_id_type?: string | ExternalIdTypes;
    external_id?: string;
    /**
     * An ID that is deterministically created based on the name and postcode.
     *
     * It is generated by the ERP service.
     */
    computed_id: string;
}
/**
 * ERP Organisation model
 */
export declare const Organisation: import("../../../../validation").Model<OrganisationProps>;
//# sourceMappingURL=Organisation.d.ts.map