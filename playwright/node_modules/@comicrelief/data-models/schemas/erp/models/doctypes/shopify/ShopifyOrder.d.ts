import { ErpCurrency, NumericBool } from '../../../../../validation';
import { ErpResources } from '../../common';
import { ErpShopifyOrderLineItemProps } from './ShopifyOrderLineItem';
/**
 * Name of this doctype in ERP.
 */
export declare const DOCTYPE = ErpResources.SHOPIFY_ORDER;
/**
 * Shopify order financial status.
 */
export declare enum PaymentStatus {
    /**
     * The payments are pending. Payment might fail in this state. Check again to
     * confirm whether the payments have been paid successfully.
     */
    PENDING = "Pending",
    /** The payments have been authorized. */
    AUTHORIZED = "Authorized",
    /** The order has been partially paid for. */
    PARTIALLY_PAID = "Partially paid",
    /** The payments have been paid. */
    PAID = "Paid",
    /** The payments have been partially refunded. */
    PARTIALLY_REFUNDED = "Partially refunded",
    /** The payments have been refunded. */
    REFUNDED = "Refunded",
    /** The payments have been voided. */
    VOIDED = "Voided"
}
/**
 * Shopify order fulfilment status.
 */
export declare enum FulfilmentStatus {
    /** Every line item in the order has been fulfilled. */
    FULFILLED = "Fulfilled",
    /** None of the line items in the order have been fulfilled. */
    UNFULFILLED = "Unfulfilled",
    /** At least one line item in the order has been fulfilled. */
    PARTIAL = "Partial",
    /** Every line item in the order has been restocked and the order canceled. */
    RESTOCKED = "Restocked"
}
/**
 * Shopify order cancellation reason.
 */
export declare enum CancelledReason {
    /** The customer canceled the order. */
    CUSTOMER = "Customer",
    /** The order was fraudulent. */
    FRAUD = "Fraud",
    /** Items in the order were not in inventory. */
    INVENTORY = "Inventory",
    /** The payment was declined. */
    DECLINED = "Declined",
    /** A reason not in this list. */
    OTHER = "Other"
}
/**
 * Type representing the `Shopify Order` doctype in ERP.
 */
export interface ErpShopifyOrderProps {
    /** Unique order ID within Shopify. */
    shopify_id: string;
    /** Shopify's `processed_at` timestamp. */
    shopify_processed_at: string;
    /** Shopify's `updated_at` timestamp. */
    shopify_updated_at: string;
    /** Shopify's `cancelled_at` timestamp. */
    shopify_cancelled_at: string | null;
    /** Shopify customer ID */
    shopify_customer_id: string;
    /** ID of the supporter who placed the order. */
    supporter_uuid?: string | null;
    /** Customer-facing order number. */
    order_number: string;
    /** If the order was cancelled, the reason why. */
    cancel_reason: string | null;
    /** The order's payment status. */
    payment_status: PaymentStatus;
    /** The order's fulfilment status, i.e. whether the items have been dispatched. */
    fulfilment_status: FulfilmentStatus;
    /** The customer's postcode. This comes from the billing address. */
    postcode: string;
    /** Value of all items in the order, including VAT, without discounts applied. */
    total_line_items_price: ErpCurrency;
    /** Sum of all discounts applied. */
    total_discounts: ErpCurrency;
    /** Total of line items after discounts have been applied. */
    subtotal_price: ErpCurrency;
    /** Whether or not the subtotal includes VAT. */
    subtotal_includes_vat: NumericBool;
    /** Remaining amount to be paid if the order was partially paid. */
    total_outstanding: ErpCurrency;
    /** The donation amount, if any, included in the order. */
    total_donation_received: ErpCurrency;
    /** The price charged for postage and packaging. */
    total_postage: ErpCurrency;
    /** Total amount paid (includes discounts, shipping, VAT). */
    total_price: ErpCurrency;
    /** Total VAT on this order. This includes VAT from postage costs. */
    total_vat: ErpCurrency;
    /** Total refunds to date made on this order. */
    total_refunded: ErpCurrency;
    /**
     * Currency code for the money fields.
     *
     * This will be the shop currency rather than the currency that was used to
     * pay for the order, so should always be 'GBP'.
     */
    currency: string;
    /** List of products ordered. */
    line_items: ErpShopifyOrderLineItemProps[];
}
/**
 * Model for a `Shopify Order` document in ERP.
 */
export declare const ErpShopifyOrder: import("../../../../../validation").Model<ErpShopifyOrderProps>;
//# sourceMappingURL=ShopifyOrder.d.ts.map