import { ErpCurrency, NumericBool } from '../../../../../validation';
import { ErpResources } from '../../common';
/**
 * Name of this doctype in ERP.
 */
export declare const DOCTYPE = ErpResources.PRODUCT_VARIANT;
/**
 * Type representing the `Product` doctype in ERP.
 */
export interface ErpProductVariantProps {
    /** Unique product variant ID within Shopify. */
    shopify_id: string;
    /**
     * Stock unit identifier for this specific variant.
     *
     * May be null in special cases, e.g. for donations.
     */
    sku: string | null;
    /**
     * The full name of this variant.
     *
     * This will include the name of the product, followed by the options for
     * this variant. Option values are also available separately in the three
     * `option` fields.
     */
    title: string;
    /** The price of this variant. The unit is specified in `currency`. */
    price: ErpCurrency;
    /** Price currency. Should always be 'GBP'. */
    currency: string;
    /** Whether this variant is available (currently on sale and not sold out). */
    available: NumericBool;
    /**
     * The variant's first option.
     *
     * See the Product's `option1` for the name of this option. If the product
     * has no options (i.e. only one variant), this value will be 'Default'.
     */
    option1: string;
    /**
     * The variant's second option, if applicable.
     *
     * See the Product's `option2` for the name of this option.
     */
    option2: string | null;
    /**
     * The variant's third option, if applicable.
     *
     * See the Product's `option3` for the name of this option.
     */
    option3: string | null;
}
/**
 * Model for a `Product` document in ERP.
 */
export declare const ErpProductVariant: import("../../../../../validation").Model<ErpProductVariantProps>;
//# sourceMappingURL=ProductVariant.d.ts.map