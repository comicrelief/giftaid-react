"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProducerRequest = exports.erpModelMap = void 0;
/* eslint-disable no-template-curly-in-string */
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../validation");
var FundraiserSignupSubmit_1 = require("../actions/FundraiserSignupSubmit");
var GiftaidSubmit_1 = require("../actions/GiftaidSubmit");
var GiftaidUpdate_1 = require("../actions/GiftaidUpdate");
var IdentityAdd_1 = require("../actions/IdentityAdd");
var PayinSubmit_1 = require("../actions/PayinSubmit");
var PostalPut_1 = require("../actions/PostalPut");
var SubscriptionExecute_1 = require("../actions/SubscriptionExecute");
var SubscriptionUpdate_1 = require("../actions/SubscriptionUpdate");
var TransactionExecute_1 = require("../actions/TransactionExecute");
var TransactionExecuteIvr_1 = require("../actions/TransactionExecuteIvr");
var TransactionSmsPut_1 = require("../actions/TransactionSmsPut");
var UserCreate_1 = require("../actions/UserCreate");
var DonationPut_1 = require("../actions/justgiving/DonationPut");
var GivingPagePut_1 = require("../actions/justgiving/GivingPagePut");
var PostalTicketPut_1 = require("../actions/prize/PostalTicketPut");
var PostalTicketSetState_1 = require("../actions/prize/PostalTicketSetState");
var PrizePut_1 = require("../actions/prize/PrizePut");
var TicketPut_1 = require("../actions/prize/TicketPut");
var PayinPut_1 = require("../actions/psl/PayinPut");
var OrderPut_1 = require("../actions/shopify/OrderPut");
var common_1 = require("../common");
/**
 * Maps all the erp action types
 * to their model
 *
 * Please add new models to this object
 * so that they can be validated as part
 * of an ERP ProducerRequest.
 *
 * IMPORTANT:
 * Models that are not added to this object
 * will be automatically rejected at runtime
 * via the rule `valid-erp-payload` defined below
 */
exports.erpModelMap = (_a = {},
    _a[common_1.ErpPayloadTypes.POSTAL__PUT] = PostalPut_1.PostalPut,
    _a[common_1.ErpPayloadTypes.PRIZE__PRIZE__PUT] = PrizePut_1.PrizePut,
    _a[common_1.ErpPayloadTypes.PRIZE__POSTALTICKET__PUT] = PostalTicketPut_1.PostalTicketPut,
    _a[common_1.ErpPayloadTypes.PRIZE__POSTALTICKET__SETSTATE] = PostalTicketSetState_1.PostalTicketSetState,
    _a[common_1.ErpPayloadTypes.PRIZE__TICKET__PUT] = TicketPut_1.TicketPut,
    _a[common_1.ErpPayloadTypes.IDENTITY__ADD] = IdentityAdd_1.IdentityAdd,
    _a[common_1.ErpPayloadTypes.USER__CREATE] = UserCreate_1.UserCreate,
    _a[common_1.ErpPayloadTypes.PAYIN__PUT] = PayinPut_1.PayinPut,
    _a[common_1.ErpPayloadTypes.TRANSACTION__EXECUTE] = TransactionExecute_1.TransactionExecute,
    _a[common_1.ErpPayloadTypes.TRANSACTION__EXECUTE_IVR] = TransactionExecuteIvr_1.TransactionExecuteIvr,
    _a[common_1.ErpPayloadTypes.TRANSACTION__SMS__PUT] = TransactionSmsPut_1.TransactionSmsPut,
    _a[common_1.ErpPayloadTypes.SUBSCRIPTION__EXECUTE] = SubscriptionExecute_1.SubscriptionExecute,
    _a[common_1.ErpPayloadTypes.SUBSCRIPTION__UPDATE] = SubscriptionUpdate_1.SubscriptionUpdate,
    _a[common_1.ErpPayloadTypes.GIFTAID__SUBMIT] = GiftaidSubmit_1.GiftaidSubmit,
    _a[common_1.ErpPayloadTypes.GIFTAID__UPDATE] = GiftaidUpdate_1.GiftaidUpdate,
    _a[common_1.ErpPayloadTypes.SHOPIFY__ORDER__PUT] = OrderPut_1.ShopifyOrderPut,
    _a[common_1.ErpPayloadTypes.PAYIN__SUBMIT] = PayinSubmit_1.PayinSubmit,
    _a[common_1.ErpPayloadTypes.FUNDRAISER__SIGNUP__SUBMIT] = FundraiserSignupSubmit_1.FundraiserSignupSubmit,
    _a[common_1.ErpPayloadTypes.JUSTGIVING__GIVINGPAGE__PUT] = GivingPagePut_1.GivingPagePut,
    _a[common_1.ErpPayloadTypes.JUSTGIVING__DONATION__PUT] = DonationPut_1.DonationPut,
    _a);
/**
 * ProducerRequest model
 */
exports.ProducerRequest = validation_1.defineModel(validation_1.Namespaces.ERP_SERVICE, 'ProducerRequest', function () {
    var action = yup
        .object()
        // In the test method, we cannot return a transformed value
        // therefore parsing, casting and transforming is lost.
        // Instead, we can parse, cast and transform beforehand
        .transform(function (value) {
        if (!value || !value.type) {
            // The value is so bad that it doesn't even define a payload type
            // Just return the value, let .test handle it
            return value;
        }
        try {
            var model = exports.erpModelMap[value.type];
            if (model) {
                var casted = model.schema().validateSync(value);
                return casted;
            }
            // The type didn't match any model
            // Let .test handle it
            return value;
        }
        catch (error) {
            // Got an exception while validating
            // Let .test validate again and handle the error
            return value;
        }
    })
        .test('valid-erp-payload', '${path} is an invalid ERP Payload. Original value: ${value}', function test(value) {
        return __awaiter(this, void 0, void 0, function () {
            var validKeys, model, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!value) {
                            throw this.createError({
                                path: this.path,
                                message: '${path} is a required field',
                            });
                        }
                        if (!value.type) {
                            throw this.createError({
                                path: this.path,
                                message: '${path}.type is a required field',
                            });
                        }
                        if (!(value.type in exports.erpModelMap)) {
                            validKeys = Object.keys(exports.erpModelMap).map(function (key) { return "'" + key + "'"; });
                            throw this.createError({
                                path: this.path,
                                message: "${path}.type is '" + value.type + "' but must be one of: " + validKeys.join(', '),
                            });
                        }
                        model = exports.erpModelMap[value.type];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, model.isValid(value, __assign(__assign({}, this.options), { strict: false }))];
                    case 2: 
                    // When using the `test` function
                    // `this.options.strict` defaults to `true`
                    // however we rely on `strict: false` across
                    // all the models and keeping `strict: true`
                    // leads to unpleasant surprises.
                    return [2 /*return*/, _a.sent()];
                    case 3:
                        error_1 = _a.sent();
                        throw this.createError({
                            path: this.path,
                            message: error_1.body.errors,
                            params: error_1.body,
                        });
                    case 4: return [2 /*return*/];
                }
            });
        });
    })
        .required();
    return yup.object({
        actions: yup.array().of(action).required(),
    });
});
//# sourceMappingURL=ProducerRequest.js.map