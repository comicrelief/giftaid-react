"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FundraiserSignupParquetSchema = exports.FundraiserSignupParquet = void 0;
var parquetjs_1 = require("parquetjs");
var yup = __importStar(require("yup"));
var enums_1 = require("../../../../../enums");
var Postcode_1 = require("../../../../../fields/Postcode");
var StrictString_1 = require("../../../../../fields/StrictString");
var validation_1 = require("../../../../../validation");
/**
 * Model for fundraiser signup Parquet records.
 *
 * This represents a stored record in the `fsu` table of Contact Store.
 */
exports.FundraiserSignupParquet = validation_1.defineModel(validation_1.Namespaces.CONTACT_STORE, 'FundraiserSignupParquet', function () { return yup.object({
    uuid: yup.string().uuid().required(),
    campaign_code: yup.string().oneOf(Object.values(enums_1.Campaigns)).required(),
    first_name: validation_1.FirstName.required(),
    last_name: validation_1.LastName.required(),
    email: validation_1.Email.required(),
    phone: yup.string().nullable().defined(),
    fundraising_group: yup.string().oneOf(Object.values(enums_1.FundraisingGroups)).required(),
    fundraising_segment: yup.string().oneOf(Object.values(enums_1.FundraisingSegments)).required(),
    org_name: StrictString_1.StrictString.nullable().defined(),
    org_id: yup.string().nullable().defined(),
    org_id_type: yup.string().nullable().oneOf(__spreadArray([null], Object.values(enums_1.OrganisationIdTypes))).defined(),
    job_title: StrictString_1.StrictString.nullable().defined(),
    address_id: yup.number().nullable().defined(),
    address_line_1: StrictString_1.StrictString.required(),
    address_line_2: StrictString_1.StrictString.nullable().defined(),
    address_line_3: StrictString_1.StrictString.nullable().defined(),
    town: StrictString_1.StrictString.required(),
    postcode: Postcode_1.Postcode.required(),
    fundraising_tools: validation_1.JsonString.nullable().defined(),
    fundraising_ideas: validation_1.JsonString.nullable().defined(),
    fundraising_target_text: StrictString_1.StrictString.required(),
    fundraising_target_pounds: yup.number().nullable().defined(),
    jg_page_title: StrictString_1.StrictString.nullable().defined(),
    jg_page_story: StrictString_1.StrictString.nullable().defined(),
    tshirt_size: yup.string().nullable().oneOf(__spreadArray([null], Object.values(enums_1.TShirtSize))).defined(),
    received_at: yup.number().required(),
    needs_followup_email: yup.boolean().nullable().defined(),
}).test('validate org_id_type and org_id', 
// eslint-disable-next-line no-template-curly-in-string
'${path} must have neither or both of `org_id_type` and `org_id`', function (value) { return !value
    || (value.org_id === null && value.org_id_type === null)
    || (value.org_id !== null && value.org_id_type !== null); }); });
/**
 * `ParquetSchema` instance for fundraiser signup Parquet records.
 */
exports.FundraiserSignupParquetSchema = new parquetjs_1.ParquetSchema({
    campaign_code: { type: 'UTF8' },
    uuid: { type: 'UTF8' },
    first_name: { type: 'UTF8' },
    last_name: { type: 'UTF8' },
    email: { type: 'UTF8' },
    phone: { type: 'UTF8', optional: true },
    fundraising_group: { type: 'UTF8' },
    fundraising_segment: { type: 'UTF8' },
    org_name: { type: 'UTF8', optional: true },
    org_id: { type: 'UTF8', optional: true },
    org_id_type: { type: 'UTF8', optional: true },
    job_title: { type: 'UTF8', optional: true },
    address_id: { type: 'INT32', optional: true },
    address_line_1: { type: 'UTF8' },
    address_line_2: { type: 'UTF8', optional: true },
    address_line_3: { type: 'UTF8', optional: true },
    town: { type: 'UTF8' },
    postcode: { type: 'UTF8' },
    fundraising_tools: { type: 'UTF8', optional: true },
    fundraising_ideas: { type: 'UTF8', optional: true },
    fundraising_target_text: { type: 'UTF8' },
    fundraising_target_pounds: { type: 'INT32', optional: true },
    jg_page_title: { type: 'UTF8', optional: true },
    jg_page_story: { type: 'UTF8', optional: true },
    tshirt_size: { type: 'UTF8', optional: true },
    received_at: { type: 'TIMESTAMP_MILLIS' },
    needs_followup_email: { type: 'BOOLEAN' },
});
//# sourceMappingURL=FundraiserSignup.js.map