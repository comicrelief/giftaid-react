"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fundraiserSignupParquetGenerator = exports.FUNDRAISER_SIGNUP_PARQUETS = exports.FUNDRAISER_SIGNUP_PARQUETS_INVALID = exports.FUNDRAISER_SIGNUP_PARQUETS_VALID = exports.FUNDRAISER_SIGNUP_PARQUET_VALUES = exports.VALUES_INVALID = exports.VALUES_VALID = void 0;
var enums_1 = require("../../../../../enums");
var utils_1 = require("../../../../../utils");
exports.VALUES_VALID = {
    uuid: '1eaade7c-fb8b-4f21-bde1-6916c5d772f5',
    campaign_code: enums_1.Campaigns.RND22,
    first_name: 'Dante',
    last_name: 'Alighieri',
    email: 'dante@example.com',
    phone: '+441234000000',
    fundraising_group: enums_1.FundraisingGroups.SCHOOL,
    fundraising_segment: enums_1.FundraisingSegments.PRIMARY,
    org_name: 'Fake Primary School',
    org_id: '22767',
    org_id_type: enums_1.OrganisationIdTypes.EDCO,
    job_title: 'Head of Philosophy',
    address_id: 13806059,
    address_line_1: '89 Albert Embankment',
    address_line_2: null,
    address_line_3: null,
    town: 'London',
    postcode: 'SE1 7TP',
    jg_page_title: 'My fundraising page',
    jg_page_story: 'Lorem ipsum dolor sit amet',
    tshirt_size: enums_1.TShirtSize.MEDIUM,
    fundraising_tools: '["digital_pack"]',
    fundraising_ideas: '["baking","fancy_dress"]',
    fundraising_target_text: 'Other',
    fundraising_target_pounds: 2000,
    received_at: 1622647418402,
    needs_followup_email: false,
};
exports.VALUES_INVALID = {
    uuid: 'not-a-uuid',
    campaign_code: 'not-a-campaign',
    first_name: 5,
    last_name: 6,
    email: 'not-an-email',
    phone: 0,
    fundraising_group: 'not-a-group',
    fundraising_segment: 'not-a-segment',
    org_name: 7,
    org_id: {},
    org_id_type: 'not-an-org-id-type',
    job_title: 9,
    address_id: 'not-a-number',
    address_line_1: null,
    address_line_2: 10,
    address_line_3: 11,
    town: 12,
    postcode: 'not-a-postcode',
    fundraising_tools: 'not-json',
    fundraising_ideas: 'not-json',
    fundraising_target_text: 14,
    fundraising_target_pounds: 'not-a-number',
    jg_page_title: 13,
    jg_page_story: 14,
    tshirt_size: 'not-a-tshirt-size',
    received_at: 'not-a-date',
    needs_followup_email: 'not-a-boolean',
};
exports.FUNDRAISER_SIGNUP_PARQUET_VALUES = {
    valid: exports.VALUES_VALID,
    invalid: exports.VALUES_INVALID,
};
exports.FUNDRAISER_SIGNUP_PARQUETS_VALID = {
    DEFAULT: exports.FUNDRAISER_SIGNUP_PARQUET_VALUES.valid,
    NUMERIC_ORG_ID: utils_1.override(exports.VALUES_VALID, { org_id: 123 }),
    STRING_ORG_ID: utils_1.override(exports.VALUES_VALID, { org_id: 'ABC' }),
    NULL_ORG_NAME: utils_1.override(exports.VALUES_VALID, { org_name: null }),
    NULL_ORG_ID_AND_ORG_ID_TYPE: utils_1.override(exports.VALUES_VALID, { org_id: null, org_id_type: null }),
    NULL_JOB_TITLE: utils_1.override(exports.VALUES_VALID, { job_title: null }),
    NULL_ADDRESS_ID: utils_1.override(exports.VALUES_VALID, { address_id: null }),
    NULL_ADDRESS_LINE_2: utils_1.override(exports.VALUES_VALID, { address_line_2: null }),
    NULL_ADDRESS_LINE_3: utils_1.override(exports.VALUES_VALID, { address_line_3: null }),
    NULL_FUNDRAISING_TOOLS: utils_1.override(exports.VALUES_VALID, { fundraising_tools: null }),
    NULL_FUNDRAISING_IDEAS: utils_1.override(exports.VALUES_VALID, { fundraising_ideas: null }),
    NULL_FUNDRAISING_TARGET_POUNDS: utils_1.override(exports.VALUES_VALID, { fundraising_target_pounds: null }),
    NULL_JG_PAGE_TITLE: utils_1.override(exports.VALUES_VALID, { jg_page_title: null }),
    NULL_JG_PAGE_STORY: utils_1.override(exports.VALUES_VALID, { jg_page_story: null }),
    NULL_TSHIRT_SIZE: utils_1.override(exports.VALUES_VALID, { tshirt_size: null }),
};
exports.FUNDRAISER_SIGNUP_PARQUETS_INVALID = {
    DEFAULT: exports.FUNDRAISER_SIGNUP_PARQUET_VALUES.invalid,
    NULL_ORG_ID_WITH_ORG_ID_TYPE: utils_1.override(exports.VALUES_VALID, { org_id: null, org_id_type: enums_1.OrganisationIdTypes.EDCO }),
    NULL_ORG_ID_TYPE_WITH_ORG_ID: utils_1.override(exports.VALUES_VALID, { org_id: 10, org_id_type: null }),
};
exports.FUNDRAISER_SIGNUP_PARQUETS = {
    valid: exports.FUNDRAISER_SIGNUP_PARQUETS_VALID,
    invalid: exports.FUNDRAISER_SIGNUP_PARQUETS_INVALID,
};
/**
 * Generates a random fundraiser signup Parquet record.
 *
 * @param overrides
 */
var fundraiserSignupParquetGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var base = {
        uuid: utils_1.getUuid(),
        campaign_code: utils_1.getRandomElement(Object.values(enums_1.Campaigns)),
        first_name: utils_1.getString(10),
        last_name: utils_1.getString(10),
        email: utils_1.getEmail(),
        phone: utils_1.getMobile(),
        fundraising_group: utils_1.getRandomElement(Object.values(enums_1.FundraisingGroups)),
        fundraising_segment: utils_1.getRandomElement(Object.values(enums_1.FundraisingSegments)),
        address_id: utils_1.getRandomElement([null, utils_1.getInteger()]),
        address_line_1: utils_1.getString(20),
        address_line_2: null,
        address_line_3: null,
        town: utils_1.getString(10),
        postcode: exports.VALUES_VALID.postcode,
        fundraising_tools: '[]',
        fundraising_ideas: '[]',
        fundraising_target_text: utils_1.getRandomElement(['£100 - £500', '£500 - £1,000', '£1000+', 'Other']),
        fundraising_target_pounds: null,
        jg_page_title: null,
        jg_page_story: null,
        tshirt_size: null,
        received_at: utils_1.getDate().getTime(),
        needs_followup_email: utils_1.getBoolean(),
        org_name: null,
        org_id: null,
        org_id_type: null,
        job_title: null,
    };
    if (base.fundraising_target_text === 'Other') {
        base.fundraising_target_pounds = utils_1.getInteger(10, 5000);
    }
    if (base.campaign_code === enums_1.Campaigns.SRCW22) {
        base.jg_page_title = utils_1.getString(20);
        base.jg_page_story = utils_1.getString(50);
        if (base.fundraising_group !== enums_1.FundraisingGroups.SCHOOL) {
            base.tshirt_size = utils_1.getRandomElement(enums_1.TShirtSize);
        }
    }
    switch (base.fundraising_group) {
        case enums_1.FundraisingGroups.SCHOOL:
            base.org_name = utils_1.getString(10);
            base.org_id = utils_1.getInteger(1, 50000).toString();
            base.org_id_type = enums_1.OrganisationIdTypes.EDCO;
            base.job_title = utils_1.getString(10);
            break;
        case enums_1.FundraisingGroups.WORK:
            base.org_name = utils_1.getString(10);
            base.job_title = utils_1.getString(10);
            break;
        default:
    }
    return __assign(__assign({}, base), overrides);
};
exports.fundraiserSignupParquetGenerator = fundraiserSignupParquetGenerator;
//# sourceMappingURL=FundraiserSignup.mock.js.map