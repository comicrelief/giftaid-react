"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transactionGenerator = exports.TRANSACTIONS = exports.TRANSACTION_INVALID = exports.TRANSACTION_VALID = exports.TRANSACTION_VALUES = exports.TRANSACTION_VALUES_INVALID = exports.TRANSACTION_VALUES_VALID = void 0;
var utils_1 = require("../../../utils");
var validation_1 = require("../../../validation");
var SupporterInfo_mock_1 = require("../../shared/mocks/SupporterInfo.mock");
var common_1 = require("../models/common");
exports.TRANSACTION_VALUES_VALID = {
    id: 'e53e0b3e-1830-4f4b-a8cd-b88c2195ebd8',
    amount: 10,
    currency: 'GBP',
    token: null,
    order_reference: '4da9082d-61c7-490d-b6ac-8da603b5d21a',
    payment_type: 'DUMMY',
    successUrl: null,
    failureUrl: null,
    ipnUrl: null,
    payerId: null,
    metadata: null,
    created: '2021-05-04T10:09:55.692Z',
    updated: '2021-05-04T10:09:55.692Z',
    status: common_1.TransactionStatus.PENDING,
    email: SupporterInfo_mock_1.SUPPORTER_INFOS.valid.DEFAULT.email,
    address1: '89 Albert Embankment',
    address2: null,
    postcode: 'SE1 7TP',
    town: 'London',
    country: 'UK',
    parameters: null,
    recoverUrl: null,
    client: 'client',
    provider: 'provider',
    customerName: 'customer',
    providerReference: null,
    responseCode: null,
    responseMessage: null,
    giftaid: validation_1.NumericBool.YES,
    entityClass: 'direct',
    affiliate: null,
    firstName: SupporterInfo_mock_1.SUPPORTER_INFOS.valid.DEFAULT.firstName,
    lastName: SupporterInfo_mock_1.SUPPORTER_INFOS.valid.DEFAULT.lastName,
    address3: null,
    cartId: null,
    permissionEmail: validation_1.NumericBool.YES,
    permissionPost: validation_1.NumericBool.YES,
    campaign: null,
    transSource: null,
    transSourceUrl: null,
    transType: null,
    subscriptionId: null,
    batchId: null,
    latitude: null,
    longitude: null,
    settled: null,
};
exports.TRANSACTION_VALUES_INVALID = {
    id: 'not-a-uuid',
    amount: 'not-a-number',
    currency: null,
    token: null,
    order_reference: null,
    payment_type: null,
    successUrl: null,
    failureUrl: null,
    ipnUrl: null,
    payerId: null,
    metadata: null,
    created: 'not-a-timestamp',
    updated: 'not-a-timestamp',
    status: 'not-a-status',
    email: null,
    address1: null,
    address2: null,
    postcode: null,
    town: null,
    country: null,
    parameters: null,
    recoverUrl: null,
    client: null,
    provider: null,
    customerName: null,
    providerReference: null,
    responseCode: null,
    responseMessage: null,
    giftaid: 'not-a-number',
    entityClass: null,
    affiliate: null,
    firstName: null,
    lastName: null,
    address3: null,
    cartId: null,
    permissionEmail: 'not-a-number',
    permissionPost: 'not-a-number',
    campaign: null,
    transSource: null,
    transSourceUrl: null,
    transType: null,
    subscriptionId: null,
    batchId: null,
    latitude: null,
    longitude: null,
    settled: null,
};
exports.TRANSACTION_VALUES = {
    valid: exports.TRANSACTION_VALUES_VALID,
    invalid: exports.TRANSACTION_VALUES_INVALID,
};
exports.TRANSACTION_VALID = {
    DEFAULT: exports.TRANSACTION_VALUES.valid,
};
exports.TRANSACTION_INVALID = {
    DEFAULT: exports.TRANSACTION_VALUES.invalid,
};
exports.TRANSACTIONS = {
    valid: exports.TRANSACTION_VALID,
    invalid: exports.TRANSACTION_INVALID,
};
/**
 * Generates a random Transaction object
 *
 * @param overrides
 */
var transactionGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ id: utils_1.getUuid(), amount: utils_1.getInteger(), currency: 'GBP', token: null, order_reference: utils_1.getString(10), payment_type: 'DUMMY', successUrl: null, failureUrl: null, ipnUrl: null, payerId: null, metadata: null, created: utils_1.getTimestamp(), updated: utils_1.getTimestamp(), status: utils_1.getRandomElement(common_1.TransactionStatus), email: utils_1.getEmail(), address1: utils_1.getString(), address2: utils_1.getString(), postcode: 'SE1 7TP', town: utils_1.getString(), country: utils_1.getString(), parameters: null, recoverUrl: null, client: 'client', provider: 'provider', customerName: 'customer', providerReference: null, responseCode: null, responseMessage: null, giftaid: utils_1.getRandomElement(validation_1.NumericBoolValues), entityClass: 'direct', affiliate: null, firstName: utils_1.getString(10), lastName: utils_1.getString(10), address3: utils_1.getString(), cartId: null, permissionEmail: utils_1.getRandomElement(validation_1.NumericBoolValues), permissionPost: utils_1.getRandomElement(validation_1.NumericBoolValues), campaign: null, transSource: null, transSourceUrl: null, transType: null, subscriptionId: null, batchId: null, latitude: null, longitude: null, settled: null }, overrides));
};
exports.transactionGenerator = transactionGenerator;
//# sourceMappingURL=Transaction.mock.js.map