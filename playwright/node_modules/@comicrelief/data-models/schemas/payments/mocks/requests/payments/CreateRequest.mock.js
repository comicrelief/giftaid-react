"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestGenerator = exports.CREATE_REQUESTS = exports.CREATE_REQUESTS_INVALID = exports.CREATE_REQUESTS_VALID = exports.CREATE_REQUEST_VALUES = exports.CREATE_REQUEST_VALUES_INVALID = exports.CREATE_REQUEST_VALUES_VALID = void 0;
var enums_1 = require("../../../../../enums");
var utils_1 = require("../../../../../utils");
var validation_1 = require("../../../../../validation");
var SupporterInfo_mock_1 = require("../../../../shared/mocks/SupporterInfo.mock");
var common_1 = require("../../../models/common");
exports.CREATE_REQUEST_VALUES_VALID = {
    client: 'test',
    token: '18a0e0f4-9e4f-4229-bb7c-14a873f208ee',
    amount: 99.4,
    currency: validation_1.Currencies.GBP,
    order_reference: '430f7d69-25cf-40ce-9bca-f4532002cd79',
    giftaid: validation_1.NumericBool.NO,
    campaign: enums_1.Campaigns.RND21,
    transSource: common_1.TransactionTypes.PRIZE,
    transSourceUrl: 'https://www.comicrelief.com/prizes/some-prize',
    transType: common_1.TransactionTypes.PRIZE,
    firstName: 'Dante',
    lastName: 'Alighieri',
    email: SupporterInfo_mock_1.EMAILS.valid,
    address1: SupporterInfo_mock_1.ADDRESSES.valid.address1,
    postcode: SupporterInfo_mock_1.ADDRESSES.valid.postcode,
    town: SupporterInfo_mock_1.ADDRESSES.valid.town,
    country: SupporterInfo_mock_1.ADDRESSES.valid.country,
    ipnUrl: null,
    successUrl: 'https://www.comicrelief.com/prizes/some-prize/success',
    failureUrl: 'https://www.comicrelief.com/prizes/some-prize/failure',
    metadata: '{}',
};
exports.CREATE_REQUEST_VALUES_INVALID = {
    client: null,
    token: null,
    amount: 'not-a-float',
    currency: 'ITL',
    order_reference: 'not-a-uuid',
    giftaid: 2,
    campaign: 'Not a CR campaign',
    transSource: null,
    transSourceUrl: null,
    transType: 'Invalid type',
    firstName: null,
    lastName: null,
    email: SupporterInfo_mock_1.EMAILS.invalid,
    address1: SupporterInfo_mock_1.ADDRESSES.invalid.address1,
    postcode: SupporterInfo_mock_1.ADDRESSES.invalid.postcode,
    town: SupporterInfo_mock_1.ADDRESSES.invalid.town,
    country: SupporterInfo_mock_1.ADDRESSES.invalid.country,
    // ipnUrl is always valid
    ipnUrl: undefined,
    successUrl: null,
    failureUrl: null,
    metadata: '{',
};
exports.CREATE_REQUEST_VALUES = {
    valid: exports.CREATE_REQUEST_VALUES_VALID,
    invalid: exports.CREATE_REQUEST_VALUES_INVALID,
};
exports.CREATE_REQUESTS_VALID = {
    DEFAULT: exports.CREATE_REQUEST_VALUES_VALID,
    PREVIOUS_CAMPAIGN: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { campaign: enums_1.Campaigns.RND19 }),
    GIFTAID_NO: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { giftaid: validation_1.NumericBool.NO }),
    GIFTAID_YES: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { giftaid: validation_1.NumericBool.YES }),
    TRANSACTION_DONATION: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transType: common_1.TransactionTypes.DONATION }),
    TRANSACTION_PRIZE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transType: common_1.TransactionTypes.PRIZE }),
    MISSING_METADATA: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['metadata']),
    WITH_TRANS_SOURCE_URL_LOCALHOST: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transSourceUrl: 'http://localhost:8080' }),
    WITH_SUCCESS_URL_LOCALHOST: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { successUrl: 'http://localhost:8080' }),
    WITH_FAILURE_URL_LOCALHOST: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { failureUrl: 'http://localhost:8080' }),
};
exports.CREATE_REQUESTS_INVALID = {
    DEFAULT: exports.CREATE_REQUEST_VALUES_INVALID,
    INVALID_CLIENT: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { client: exports.CREATE_REQUEST_VALUES.invalid.client }),
    INVALID_TOKEN: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { token: exports.CREATE_REQUEST_VALUES.invalid.token }),
    INVALID_AMOUNT: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: exports.CREATE_REQUEST_VALUES.invalid.amount }),
    INVALID_CURRENCY: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { currency: exports.CREATE_REQUEST_VALUES.invalid.currency }),
    INVALID_ORDER_REFERENCE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { order_reference: exports.CREATE_REQUEST_VALUES.invalid.order_reference }),
    INVALID_GIFTAID: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { giftaid: exports.CREATE_REQUEST_VALUES.invalid.giftaid }),
    INVALID_CAMPAIGN: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { campaign: exports.CREATE_REQUEST_VALUES.invalid.campaign }),
    INVALID_TRANS_SOURCE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transSource: exports.CREATE_REQUEST_VALUES.invalid.transSource }),
    INVALID_TRANS_SOURCE_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transSourceUrl: exports.CREATE_REQUEST_VALUES.invalid.transSourceUrl }),
    INVALID_TRANS_TYPE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { transType: exports.CREATE_REQUEST_VALUES.invalid.transType }),
    INVALID_FIRST_NAME: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { firstName: exports.CREATE_REQUEST_VALUES.invalid.firstName }),
    INVALID_LAST_NAME: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { lastName: exports.CREATE_REQUEST_VALUES.invalid.lastName }),
    INVALID_EMAIL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { email: exports.CREATE_REQUEST_VALUES.invalid.email }),
    INVALID_EMAIL_DOLLAR: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { email: 'test$email@test.comicrelief.com' }),
    INVALID_EMAIL_POUND: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { email: 'testÂ£email@test.comicrelief.com' }),
    INVALID_EMAIL_PERCENT: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { email: 'test%email$@test.comicrelief.com' }),
    INVALID_ADDRESS1: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { address1: exports.CREATE_REQUEST_VALUES.invalid.address1 }),
    INVALID_POSTCODE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { postcode: exports.CREATE_REQUEST_VALUES.invalid.postcode }),
    INVALID_TOWN: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { town: exports.CREATE_REQUEST_VALUES.invalid.town }),
    INVALID_COUNTRY: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { country: exports.CREATE_REQUEST_VALUES.invalid.country }),
    INVALID_SUCCESS_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { successUrl: exports.CREATE_REQUEST_VALUES.invalid.successUrl }),
    INVALID_FAILURE_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { failureUrl: exports.CREATE_REQUEST_VALUES.invalid.failureUrl }),
    INVALID_METADATA: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { metadata: exports.CREATE_REQUEST_VALUES.invalid.metadata }),
    AMOUNT_UNDER_MIN: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 0 }),
    AMOUNT_OVER_MAX: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: common_1.DONATION_MAXIMUM_AMOUNT + 1 }),
    MISSING_CLIENT: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['client']),
    MISSING_TOKEN: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['token']),
    MISSING_AMOUNT: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['amount']),
    MISSING_CURRENCY: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['currency']),
    MISSING_ORDER_REFERENCE: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['order_reference']),
    MISSING_GIFTAID: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['giftaid']),
    MISSING_CAMPAIGN: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['campaign']),
    MISSING_TRANS_SOURCE: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['transSource']),
    MISSING_TRANS_SOURCE_URL: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['transSourceUrl']),
    MISSING_TRANS_TYPE: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['transType']),
    MISSING_FIRST_NAME: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['firstName']),
    MISSING_LAST_NAME: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['lastName']),
    MISSING_EMAIL: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['email']),
    MISSING_ADDRESS1: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['address1']),
    MISSING_POSTCODE: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['postcode']),
    MISSING_TOWN: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['town']),
    MISSING_COUNTRY: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['country']),
    MISSING_SUCCESS_URL: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['successUrl']),
    MISSING_FAILURE_URL: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['failureUrl']),
};
exports.CREATE_REQUESTS = {
    valid: exports.CREATE_REQUESTS_VALID,
    invalid: exports.CREATE_REQUESTS_INVALID,
};
/**
 * Generates a random CreateRequest
 *
 * @param overrides
 */
var createRequestGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ client: 'test', token: utils_1.getString(16), amount: utils_1.getNumber(10, 200), currency: utils_1.getRandomElement(Object.values(validation_1.Currencies)), order_reference: utils_1.getUuid(), giftaid: utils_1.getRandomElement(validation_1.NumericBoolValues), campaign: utils_1.getRandomElement(Object.values(enums_1.Campaigns)), transSource: utils_1.getRandomElement(Object.values(common_1.TransactionTypes)), transSourceUrl: utils_1.getUrl({ path: '/prizes' }), transType: utils_1.getRandomElement(Object.values(common_1.TransactionTypes)), firstName: utils_1.getString(10), lastName: utils_1.getString(10), email: utils_1.getEmail(), address1: utils_1.getString(10), postcode: utils_1.getString(5), town: utils_1.getString(10), country: utils_1.getString(10), ipnUrl: null, successUrl: utils_1.getUrl({ path: '/prizes' }), failureUrl: utils_1.getUrl({ path: '/prizes' }), metadata: '{}' }, overrides));
};
exports.createRequestGenerator = createRequestGenerator;
//# sourceMappingURL=CreateRequest.mock.js.map