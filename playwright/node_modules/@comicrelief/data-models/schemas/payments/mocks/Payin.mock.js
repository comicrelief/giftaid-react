"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.payinGenerator = exports.PAYINS = exports.PAYIN_INVALID = exports.PAYIN_VALID = exports.PAYIN_VALUES = exports.PAYIN_VALUES_INVALID = exports.PAYIN_VALUES_VALID = void 0;
var enums_1 = require("../../../enums");
var utils_1 = require("../../../utils");
var Payin_1 = require("../models/Payin");
exports.PAYIN_VALUES_VALID = {
    id: 'a0f4d265-ea69-4241-8448-31b54f3d7bba',
    transactionId: '24664606-a314-4ad7-ab99-93a470a10d12',
    created: '2021-05-04T10:09:55.692Z',
    updated: '2021-05-04T10:09:55.692Z',
    address1: '89 Albert Embankment',
    address2: null,
    address3: null,
    town: 'London',
    country: 'UK',
    postcode: 'SE1 7TP',
    Event: null,
    audience: Payin_1.PayinAudience.WORK,
    WhatYouDid: 'Something was done',
    permission: true,
    permissionEmail: true,
    permissionPhone: true,
    permissionPost: true,
    permissionSMS: true,
    phone: '020 7820 2000',
    mobile: '0700 000 000',
    establishmentId: null,
    jobTitle: 'Engineer',
    schoolType: null,
    establishment_name: null,
    organisation: 'Comic Relief',
    organisationFreetext: null,
    fundraising_activity: enums_1.FundraisingActivities.BAKING,
    ukActiveMember: false,
    certificate: false,
};
exports.PAYIN_VALUES_INVALID = {
    id: 'not-a-uuid',
    transactionId: 'not-a-uuid',
    created: 'not-a-datetime',
    updated: 'not-a-datetime',
    address1: null,
    address2: NaN,
    address3: NaN,
    town: NaN,
    country: NaN,
    postcode: NaN,
    Event: null,
    audience: 'not-a-fundraising-group',
    WhatYouDid: NaN,
    permission: NaN,
    permissionEmail: NaN,
    permissionPhone: NaN,
    permissionPost: NaN,
    permissionSMS: NaN,
    phone: NaN,
    mobile: NaN,
    establishmentId: NaN,
    jobTitle: NaN,
    schoolType: NaN,
    establishment_name: NaN,
    organisation: NaN,
    organisationFreetext: NaN,
    fundraising_activity: NaN,
    ukActiveMember: NaN,
    certificate: NaN,
};
exports.PAYIN_VALUES = {
    valid: exports.PAYIN_VALUES_VALID,
    invalid: exports.PAYIN_VALUES_INVALID,
};
exports.PAYIN_VALID = {
    DEFAULT: exports.PAYIN_VALUES.valid,
    SCHOOL: utils_1.override(exports.PAYIN_VALUES.valid, {
        audience: Payin_1.PayinAudience.SCHOOL,
        establishmentId: '00000000-0000-0000-0000-000000054321',
        establishment_name: 'Some School',
        organisation: null,
    }),
    NO_ORGANISATION: utils_1.override(exports.PAYIN_VALUES.valid, {
        organisation: null,
        establishment_name: null,
        organisationFreetext: null,
    }),
    MISSING_ADDRESS2: utils_1.omit(exports.PAYIN_VALUES.valid, ['address2']),
    MISSING_ADDRESS3: utils_1.omit(exports.PAYIN_VALUES.valid, ['address3']),
    MISSING_EVENT: utils_1.omit(exports.PAYIN_VALUES.valid, ['Event']),
    MISSING_PERMISSION: utils_1.omit(exports.PAYIN_VALUES.valid, ['permission']),
    MISSING_PERMISSION_EMAIL: utils_1.omit(exports.PAYIN_VALUES.valid, ['permissionEmail']),
    MISSING_PERMISSION_PHONE: utils_1.omit(exports.PAYIN_VALUES.valid, ['permissionPhone']),
    MISSING_PERMISSION_POST: utils_1.omit(exports.PAYIN_VALUES.valid, ['permissionPost']),
    MISSING_PERMISSION_SMS: utils_1.omit(exports.PAYIN_VALUES.valid, ['permissionSMS']),
    MISSING_PHONE: utils_1.omit(exports.PAYIN_VALUES.valid, ['phone']),
    MISSING_MOBILE: utils_1.omit(exports.PAYIN_VALUES.valid, ['mobile']),
    MISSING_ESTABLISHMENT_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['establishmentId']),
    MISSING_JOB_TITLE: utils_1.omit(exports.PAYIN_VALUES.valid, ['jobTitle']),
    MISSING_SCHOOL_TYPE: utils_1.omit(exports.PAYIN_VALUES.valid, ['schoolType']),
    MISSING_ESTABLISHMENT_NAME: utils_1.omit(exports.PAYIN_VALUES.valid, ['establishment_name']),
    MISSING_ORGANISATION: utils_1.omit(exports.PAYIN_VALUES.valid, ['organisation']),
    MISSING_ORGANISATION_FREE_TEXT: utils_1.omit(exports.PAYIN_VALUES.valid, ['organisationFreetext']),
    MISSING_FUNDRAISING_ACTIVITY: utils_1.omit(exports.PAYIN_VALUES.valid, ['fundraising_activity']),
    MISSING_UK_ACTIVE_MEMBER: utils_1.omit(exports.PAYIN_VALUES.valid, ['ukActiveMember']),
    MISSING_CERTIFICATE: utils_1.omit(exports.PAYIN_VALUES.valid, ['certificate']),
};
exports.PAYIN_INVALID = {
    DEFAULT: exports.PAYIN_VALUES_INVALID,
    INVALID_ID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.id }),
    INVALID_TRANSACTION_ID: utils_1.override(exports.PAYIN_VALUES.valid, { id: exports.PAYIN_VALUES.invalid.transactionId }),
    INVALID_ADDRESS1: utils_1.override(exports.PAYIN_VALUES.valid, { address1: exports.PAYIN_VALUES.invalid.address1 }),
    INVALID_TOWN: utils_1.override(exports.PAYIN_VALUES.valid, { town: exports.PAYIN_VALUES.invalid.town }),
    INVALID_COUNTRY: utils_1.override(exports.PAYIN_VALUES.valid, { country: exports.PAYIN_VALUES.invalid.country }),
    INVALID_POSTCODE: utils_1.override(exports.PAYIN_VALUES.valid, { postcode: exports.PAYIN_VALUES.invalid.postcode }),
    INVALID_AUDIENCE: utils_1.override(exports.PAYIN_VALUES.valid, { audience: exports.PAYIN_VALUES.invalid.audience }),
    MISSING_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['id']),
    MISSING_TRANSACTION_ID: utils_1.omit(exports.PAYIN_VALUES.valid, ['transactionId']),
    MISSING_ADDRESS1: utils_1.omit(exports.PAYIN_VALUES.valid, ['address1']),
    MISSING_TOWN: utils_1.omit(exports.PAYIN_VALUES.valid, ['town']),
    MISSING_COUNTRY: utils_1.omit(exports.PAYIN_VALUES.valid, ['country']),
    MISSING_POSTCODE: utils_1.omit(exports.PAYIN_VALUES.valid, ['postcode']),
    MISSING_AUDIENCE: utils_1.omit(exports.PAYIN_VALUES.valid, ['audience']),
};
exports.PAYINS = {
    valid: exports.PAYIN_VALID,
    invalid: exports.PAYIN_INVALID,
};
/**
 * Generates a random Payin object
 *
 * @param overrides
 */
var payinGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ id: utils_1.getUuid(), transactionId: utils_1.getUuid(), created: utils_1.getTimestamp(), updated: utils_1.getTimestamp(), address1: utils_1.getString(), address2: null, address3: null, town: utils_1.getString(), country: utils_1.getString(), postcode: 'SE1 7TP', Event: null, audience: utils_1.getRandomElement(Payin_1.PayinAudience), WhatYouDid: utils_1.getString(), permission: utils_1.getBoolean(), permissionEmail: utils_1.getBoolean(), permissionPhone: utils_1.getBoolean(), permissionPost: utils_1.getBoolean(), permissionSMS: utils_1.getBoolean(), phone: utils_1.getString(), mobile: utils_1.getString(), establishmentId: null, jobTitle: utils_1.getString(), schoolType: null, establishment_name: null, organisation: utils_1.getString(), organisationFreetext: null, fundraising_activity: utils_1.getRandomElement(enums_1.FundraisingActivities), ukActiveMember: utils_1.getBoolean(), certificate: utils_1.getBoolean() }, overrides));
};
exports.payinGenerator = payinGenerator;
//# sourceMappingURL=Payin.mock.js.map