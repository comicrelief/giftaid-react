/**
 * Enumerates the transaction types
 */
export declare enum TransactionTypes {
    DONATION = "DONATION",
    PRIZE = "PRIZE",
    SHOP = "SHOP"
}
/**
 * Transaction statuses as defined on PSL
 *
 * See https://github.com/comicrelief/serverless-payments/blob/master/src/Model/Transaction.model.js#L42
 *
 * The only values that appear in production transactional store (as of 2021)
 * are `complete`, `failed`, and `pending`. Note that `failed` is not defined
 * in the PSL model (possibly because it only appears with SMS donations?)
 *
 * todo: consider splitting `TransactionStatus` for PSL and Transactional Store
 */
export declare enum TransactionStatus {
    ABANDONED = "abandoned",
    CANCELLED = "cancelled",
    COMPLETE = "complete",
    DECLINED = "declined",
    ERROR = "error",
    FAILED = "failed",
    PENDING = "pending",
    REFUNDED = "refunded"
}
/**
 * Payment provider values in PSL.
 *
 * `worldpay_cg` and `worldpay_rnd` are legacy values superceded by `worldpay`,
 * but may still be present in older transaction records.
 */
export declare enum TransactionProvider {
    DUMMY = "dummy",
    FONIX = "fonix",
    BRAINTREE = "braintree",
    STRIPE = "stripe",
    PAYPAL_EXPRESS = "paypal_express",
    WORLDPAY = "worldpay",
    WORLDPAY_CG = "worldpay_cg",
    WORLDPAY_RND = "worldpay_rnd",
    GO_CARDLESS = "go_cardless",
    JUST_GIVING = "just_giving",
    UNKNOWN = "n/a",
    UPWARD_COMMS = "upward_comms"
}
/**
 * Subscription status values in PSL.
 */
export declare enum SubscriptionStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    FAILED = "failed",
    PENDING = "pending",
    POST_DUE = "post_due"
}
/**
 * Subscription provider values in PSL.
 *
 * Currently GoCardless is the only provider used in production, but the other
 * values appear in dev/staging.
 */
export declare enum SubscriptionProvider {
    BRAINTREE = "braintree",
    DUMMY = "dummy",
    GO_CARDLESS = "go_cardless"
}
/**
 * Represents the maximum donation amount
 */
export declare const DONATION_MAXIMUM_AMOUNT = 25000;
/**
 * Email field closer to the email validation
 * used on `serverless-payments`.
 *
 * `serverless-payments` uses validate.js' email field to validate emails.
 * Its regex is more restrictive than the one
 * used by yup (which is correct in being less restrictive).
 *
 * The engineering team discussed the matter and we decided that
 *
 * 1. At some point (probably after RND2021)
 *    we will update `serverless-payments`
 *    validation to use `data-models`.
 *    This will make the email validation less restrictive.
 *    E2E will need to account for the change.
 *
 * 2. Until then we will update `payments:request.CreateRequest`
 *    to be more restrictive, matching `serverless-payments`.
 */
export declare const ServerlessPaymentsEmail: import("yup").StringSchema<string, object>;
//# sourceMappingURL=common.d.ts.map