import { Campaigns } from '../../../../../enums';
import { Currencies, NumericBool } from '../../../../../validation';
import { TransactionTypes } from '../../common';
/**
 * Props required to generate
 * a CreateRequest
 */
export interface CreateRequestProps {
    /**
     * The client to be used to generate the transaction.
     *
     * Validating this value is not trivial as each stage
     * defines its own set of env clients. This would mean
     * defining one enumeration for each stage and associate it
     * with the stage. Finally, validation would need to pass
     * a contextual value specifying the stage, raising an
     * exception if the stage is not found.
     *
     * `serverless-payments` will do the same job for us
     * so in this particular instance we are just checking
     * we got a string and let downstream alarm us.
     * */
    client: string;
    /** Token for the given client */
    token: string;
    /** Payment amount. This is a float, i.e. 94.5 */
    amount: number;
    /** Payment currency */
    currency: Currencies;
    /** Requesting order reference. This is a UUID */
    order_reference: string;
    /** Whether Giftaid is enabled or not. Values are 0 | 1 */
    giftaid: NumericBool;
    /** Related campaign */
    campaign: Campaigns;
    /** Transaction source */
    transSource: string;
    /** Transaction source URL */
    transSourceUrl: string;
    /** Transaction type. One of TransactionTypes */
    transType: TransactionTypes;
    /** Supporter's first name */
    firstName: string;
    /** Supporter's last name */
    lastName: string;
    /** Supporter's email */
    email: string;
    /** Supporter's house number or first line of address */
    address1: string;
    /** Supporter's postcode */
    postcode: string;
    /** Supporter's town */
    town: string;
    /** Supporter's country */
    country: string;
    /** Legacy. Acted similar to a webhook. Defaults to null now */
    ipnUrl: string | null;
    /** Return URL for a successful payment */
    successUrl: string;
    /** Return URL for a failed payment */
    failureUrl: string;
    /**
     * Additional metadata to be passed to `serverless-payments`.
     * It is a JSON string or undefined.
     */
    metadata?: string;
}
/**
 * CreateRequest.
 */
export declare const CreateRequest: import("../../../../../validation").Model<CreateRequestProps>;
//# sourceMappingURL=CreateRequest.d.ts.map