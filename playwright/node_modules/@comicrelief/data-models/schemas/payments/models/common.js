"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessPaymentsEmail = exports.DONATION_MAXIMUM_AMOUNT = exports.SubscriptionProvider = exports.SubscriptionStatus = exports.TransactionProvider = exports.TransactionStatus = exports.TransactionTypes = void 0;
var validation_1 = require("../../../validation");
/**
 * Enumerates the transaction types
 */
var TransactionTypes;
(function (TransactionTypes) {
    TransactionTypes["DONATION"] = "DONATION";
    TransactionTypes["PRIZE"] = "PRIZE";
    TransactionTypes["SHOP"] = "SHOP";
})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
/**
 * Transaction statuses as defined on PSL
 *
 * See https://github.com/comicrelief/serverless-payments/blob/master/src/Model/Transaction.model.js#L42
 *
 * The only values that appear in production transactional store (as of 2021)
 * are `complete`, `failed`, and `pending`. Note that `failed` is not defined
 * in the PSL model (possibly because it only appears with SMS donations?)
 *
 * todo: consider splitting `TransactionStatus` for PSL and Transactional Store
 */
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["ABANDONED"] = "abandoned";
    TransactionStatus["CANCELLED"] = "cancelled";
    TransactionStatus["COMPLETE"] = "complete";
    TransactionStatus["DECLINED"] = "declined";
    TransactionStatus["ERROR"] = "error";
    TransactionStatus["FAILED"] = "failed";
    TransactionStatus["PENDING"] = "pending";
    TransactionStatus["REFUNDED"] = "refunded";
})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
/**
 * Payment provider values in PSL.
 *
 * `worldpay_cg` and `worldpay_rnd` are legacy values superceded by `worldpay`,
 * but may still be present in older transaction records.
 */
var TransactionProvider;
(function (TransactionProvider) {
    TransactionProvider["DUMMY"] = "dummy";
    TransactionProvider["FONIX"] = "fonix";
    TransactionProvider["BRAINTREE"] = "braintree";
    TransactionProvider["STRIPE"] = "stripe";
    TransactionProvider["PAYPAL_EXPRESS"] = "paypal_express";
    TransactionProvider["WORLDPAY"] = "worldpay";
    TransactionProvider["WORLDPAY_CG"] = "worldpay_cg";
    TransactionProvider["WORLDPAY_RND"] = "worldpay_rnd";
    TransactionProvider["GO_CARDLESS"] = "go_cardless";
    TransactionProvider["JUST_GIVING"] = "just_giving";
    TransactionProvider["UNKNOWN"] = "n/a";
    TransactionProvider["UPWARD_COMMS"] = "upward_comms";
})(TransactionProvider = exports.TransactionProvider || (exports.TransactionProvider = {}));
/**
 * Subscription status values in PSL.
 */
var SubscriptionStatus;
(function (SubscriptionStatus) {
    SubscriptionStatus["ACTIVE"] = "active";
    SubscriptionStatus["CANCELLED"] = "cancelled";
    SubscriptionStatus["FAILED"] = "failed";
    SubscriptionStatus["PENDING"] = "pending";
    SubscriptionStatus["POST_DUE"] = "post_due";
})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
/**
 * Subscription provider values in PSL.
 *
 * Currently GoCardless is the only provider used in production, but the other
 * values appear in dev/staging.
 */
var SubscriptionProvider;
(function (SubscriptionProvider) {
    SubscriptionProvider["BRAINTREE"] = "braintree";
    SubscriptionProvider["DUMMY"] = "dummy";
    SubscriptionProvider["GO_CARDLESS"] = "go_cardless";
})(SubscriptionProvider = exports.SubscriptionProvider || (exports.SubscriptionProvider = {}));
/**
 * Represents the maximum donation amount
 */
exports.DONATION_MAXIMUM_AMOUNT = 25000;
/**
 * Email field closer to the email validation
 * used on `serverless-payments`.
 *
 * `serverless-payments` uses validate.js' email field to validate emails.
 * Its regex is more restrictive than the one
 * used by yup (which is correct in being less restrictive).
 *
 * The engineering team discussed the matter and we decided that
 *
 * 1. At some point (probably after RND2021)
 *    we will update `serverless-payments`
 *    validation to use `data-models`.
 *    This will make the email validation less restrictive.
 *    E2E will need to account for the change.
 *
 * 2. Until then we will update `payments:request.CreateRequest`
 *    to be more restrictive, matching `serverless-payments`.
 */
exports.ServerlessPaymentsEmail = validation_1.Email.required().test('match-serverless-payments', 
// eslint-disable-next-line no-template-curly-in-string
"${path}: email value will fail `serverless-payments` validation: '${value}'", function (value) {
    if (typeof value !== 'string') {
        // Let yup take care of non string values
        return true;
    }
    // Only care about of a subset because we are going
    // to migrate `serverless-payments` to yup at some point
    var invalidCharacters = /[$Â£%]/g;
    return value.match(invalidCharacters) === null;
});
//# sourceMappingURL=common.js.map