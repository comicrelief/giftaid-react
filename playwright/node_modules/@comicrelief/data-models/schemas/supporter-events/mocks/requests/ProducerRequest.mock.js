"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.producerRequestGenerator = exports.PRODUCER_REQUESTS = exports.PRODUCER_REQUESTS_INVALID = exports.PRODUCER_REQUESTS_VALID = exports.PRODUCER_REQUEST_VALUES = exports.PRODUCER_REQUEST_INVALID_VALUES = exports.PRODUCER_REQUEST_VALID_VALUES = void 0;
var utils_1 = require("../../../../utils");
var TicketPut_mock_1 = require("../../../erp/mocks/actions/prize/TicketPut.mock");
var ProducerRequest_mock_1 = require("../../../erp/mocks/requests/ProducerRequest.mock");
var SignupRequest_mock_1 = require("../../../user-service/mocks/requests/SignupRequest.mock");
exports.PRODUCER_REQUEST_VALID_VALUES = {
    'user-service': SignupRequest_mock_1.PARTIAL_SIGNUP_REQUESTS.valid.DEFAULT,
    'erp-service': ProducerRequest_mock_1.PRODUCER_REQUESTS.valid.DEFAULT,
};
exports.PRODUCER_REQUEST_INVALID_VALUES = {
    'user-service': SignupRequest_mock_1.PARTIAL_SIGNUP_REQUESTS.invalid.DEFAULT,
    'erp-service': ProducerRequest_mock_1.PRODUCER_REQUESTS.invalid.DEFAULT,
};
exports.PRODUCER_REQUEST_VALUES = {
    valid: exports.PRODUCER_REQUEST_VALID_VALUES,
    invalid: exports.PRODUCER_REQUEST_INVALID_VALUES,
};
exports.PRODUCER_REQUESTS_VALID = {
    DEFAULT: exports.PRODUCER_REQUEST_VALID_VALUES,
    ONLY_USER_SERVICE: utils_1.omit(exports.PRODUCER_REQUEST_VALID_VALUES, ['erp-service']),
    ONLY_ERP_SERVICE: utils_1.omit(exports.PRODUCER_REQUEST_VALID_VALUES, ['user-service']),
    ERP_SERVICE_WITH_IDENTITY_HASH: {
        'erp-service': { actions: [TicketPut_mock_1.TICKET_PUTS.valid.DEFAULT] },
    },
    USER_SERVICE_AND_ERP_SERVICE_WITH_IDENTITY_HASH: {
        'user-service': SignupRequest_mock_1.PARTIAL_SIGNUP_REQUESTS.valid.DEFAULT,
        'erp-service': { actions: [TicketPut_mock_1.TICKET_PUTS.valid.DEFAULT] },
    },
};
exports.PRODUCER_REQUESTS_INVALID = {
    DEFAULT: exports.PRODUCER_REQUEST_INVALID_VALUES,
    EMPTY_REQUEST: {},
    INVALID_USER_SERVICE: utils_1.override(exports.PRODUCER_REQUEST_VALID_VALUES, { 'user-service': SignupRequest_mock_1.PARTIAL_SIGNUP_REQUESTS.invalid.DEFAULT }),
    INVALID_ERP_SERVICE: utils_1.override(exports.PRODUCER_REQUEST_VALID_VALUES, { 'erp-service': ProducerRequest_mock_1.PRODUCER_REQUESTS.invalid.DEFAULT }),
};
exports.PRODUCER_REQUESTS = {
    valid: exports.PRODUCER_REQUESTS_VALID,
    invalid: exports.PRODUCER_REQUESTS_INVALID,
};
/**
 * Generates a random ProducerRequest
 *
 * @param overrides
 */
var producerRequestGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ 'user-service': SignupRequest_mock_1.partialSignupRequestGenerator(), 'erp-service': ProducerRequest_mock_1.producerRequestGenerator() }, overrides));
};
exports.producerRequestGenerator = producerRequestGenerator;
//# sourceMappingURL=ProducerRequest.mock.js.map