"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQSTicketsEndOfBatchPayload = exports.SQSTicketsEndOfBatchEvent = exports.SQSTicketsEndOfBatchPayloadAction = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../../validation");
/**
 * Action type to be used as part
 * of the queue message
 */
exports.SQSTicketsEndOfBatchPayloadAction = 'SQS_TICKETS_END_OF_BATCH';
var SQSTicketsEndOfBatchEvent;
(function (SQSTicketsEndOfBatchEvent) {
    /** Signifies the end of a batch of TicketsCreate messsages for postal entries */
    SQSTicketsEndOfBatchEvent["CREATED_POSTAL_TICKETS"] = "CREATED_POSTAL_TICKETS";
})(SQSTicketsEndOfBatchEvent = exports.SQSTicketsEndOfBatchEvent || (exports.SQSTicketsEndOfBatchEvent = {}));
/**
 * SQSTicketsEndOfBatchPayload.
 */
exports.SQSTicketsEndOfBatchPayload = validation_1.defineModel(validation_1.Namespaces.PRIZE_PLATFORM_SERVICE, 'SQSTicketsEndOfBatchPayload', function () { return yup
    .object({
    event: yup.string().oneOf(Object.values(SQSTicketsEndOfBatchEvent)).required(),
    count: yup.number().integer().min(0).required(),
}); });
//# sourceMappingURL=SQSTicketsEndOfBatchPayload.js.map