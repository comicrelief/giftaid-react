"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSupporter = exports.canEnterPrize = exports.PostalTicket = exports.MISSING_POSTAL_INFO = exports.MISSING_EMAIL = exports.MISSING_LAST_NAME = exports.MISSING_FIRST_NAME = exports.PostalTicketStates = void 0;
var yup = __importStar(require("yup"));
var StrictString_1 = require("../../../fields/StrictString");
var validation_1 = require("../../../validation");
/**
 * Represents the possible processing states
 * for a PostalTicket
 */
var PostalTicketStates;
(function (PostalTicketStates) {
    /** Still needs to be processed by serverless-prize-platform */
    PostalTicketStates["PENDING"] = "PENDING";
    /** Successfully processed by serverless-prize-platform */
    PostalTicketStates["PROCESSED"] = "PROCESSED";
    /** Rejected by serverless-prize-platform */
    PostalTicketStates["REJECTED"] = "REJECTED";
})(PostalTicketStates = exports.PostalTicketStates || (exports.PostalTicketStates = {}));
/**
 * Value used for missing first name.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have a partial name. The entry will be
 * rejected, but will still be loaded into ERP for reporting purposes.
 */
exports.MISSING_FIRST_NAME = 'MISSING_FIRST_NAME';
/**
 * Value used for missing last name.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have a partial name. The entry will be
 * rejected, but will still be loaded into ERP for reporting purposes.
 */
exports.MISSING_LAST_NAME = 'MISSING_LAST_NAME';
/**
 * Value used for missing email address.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have no contact details. The entry
 * will be rejected, but will still be loaded into ERP for reporting purposes.
 */
exports.MISSING_EMAIL = 'MISSING_EMAIL@comicrelief.com';
/**
 * Value used for missing postal address fields.
 *
 * Not all postal entries will contain the entrant's postal address. The
 * `PostalTicket` model fills missing address fields with this value during
 * validation (unless casting is disabled).
 */
exports.MISSING_POSTAL_INFO = 'MISSING_POSTAL_INFO';
/**
 * PostalTicket model.
 *
 * Represents a postal prize entry that we receive from Upward Comms.
 *
 * The entrant's full postal address is optional, but we require them to give
 * their country, at least one method of contact (email or phone), and their
 * full name.
 *
 * Missing postal address lines will be autofilled with `MISSING_POSTAL_INFO`,
 * but missing names or emails will not â€“ they are mandatory for a valid prize
 * entry, and if missing should raise an error so that we can ask Upward Comms
 * to double-check the entry. If it is confirmed that the details are missing,
 * they can be manually filled in with `MISSING_FIRST_NAME`, etc. to allow the
 * ticket to pass initial validation, but be rejected from the prize draw.
 */
exports.PostalTicket = validation_1.defineModel(validation_1.Namespaces.PRIZE_PLATFORM_SERVICE, 'PostalTicket', function () { return yup
    .object({
    id: StrictString_1.StrictString.required(),
    prize_id: StrictString_1.StrictString.required(),
    first_name: validation_1.FirstName.required(),
    last_name: validation_1.LastName.required(),
    email: validation_1.Email.default(function () { return ''; }).defined(),
    mobile: validation_1.Mobile.default(function () { return ''; }).defined(),
    address1: StrictString_1.StrictString.default(function () { return exports.MISSING_POSTAL_INFO; }).defined(),
    postcode: StrictString_1.StrictString.default(function () { return exports.MISSING_POSTAL_INFO; }).defined(),
    town: StrictString_1.StrictString.default(function () { return exports.MISSING_POSTAL_INFO; }).defined(),
    country: StrictString_1.StrictString.required(),
    over18: validation_1.NumericBoolField.required(),
    state: StrictString_1.StrictString.oneOf(Object.values(PostalTicketStates)).default(PostalTicketStates.PENDING).required(),
})
    .test(validation_1.EmailOrMobileTest); });
/**
 * Checks whether the postal ticket
 * can be converted into a valid ticket
 * and enter the prize.
 *
 * @param postalTicket
 */
var canEnterPrize = function (postalTicket) {
    if (postalTicket.first_name === exports.MISSING_FIRST_NAME
        || postalTicket.last_name === exports.MISSING_LAST_NAME
        || postalTicket.email === exports.MISSING_EMAIL) {
        return false;
    }
    if (postalTicket.over18 !== validation_1.NumericBool.YES) {
        return false;
    }
    if (!(['uk', 'united kingdom'].includes(postalTicket.country.toLowerCase()))) {
        return false;
    }
    return true;
};
exports.canEnterPrize = canEnterPrize;
/**
 * Generates a SupporterInfoProps object
 * from a Required<PostalTicketProps> object
 *
 * @param postalTicket
 */
var toSupporter = function (postalTicket) { return ({
    firstName: postalTicket.first_name,
    lastName: postalTicket.last_name,
    email: postalTicket.email || '',
    mobile: postalTicket.mobile || '',
    address1: postalTicket.address1,
    postcode: postalTicket.postcode,
    town: postalTicket.town,
    country: postalTicket.country,
}); };
exports.toSupporter = toSupporter;
//# sourceMappingURL=PostalTicket.js.map