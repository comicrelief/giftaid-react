"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTicketsPrice = exports.generatePrizeURLFromModels = exports.generatePrizeURL = exports.PRIZE_BASE_URL = exports.Prize = exports.PrizeBundleOption = exports.NO_TICKETS_LIMIT = void 0;
var lodash_1 = require("lodash");
var yup = __importStar(require("yup"));
var ValidationError_1 = require("../../../errors/ValidationError");
var validation_1 = require("../../../validation");
/**
 * Represents no tickets limit
 * for a prize. This is the default
 * for validation and on Contentful
 */
exports.NO_TICKETS_LIMIT = -1;
/**
 * Prize Bundle validation field
 */
exports.PrizeBundleOption = yup.object({
    tickets: yup.number().min(0).required(),
    price: yup.number().min(0).required(),
});
/**
 * Prize model.
 */
exports.Prize = validation_1.defineModel(validation_1.Namespaces.PRIZE_PLATFORM_SERVICE, 'Prize', function () { return yup
    .object({
    id: yup.string().required(),
    title: yup.string().required(),
    category_id: yup.string().required(),
    path: yup.string().required(),
    url: yup.string().url().default(function () { return ''; }).defined(),
    bundles: yup.array().of(exports.PrizeBundleOption.required()).required(),
    start_date: validation_1.Timestamp.required(),
    end_date: validation_1.Timestamp.required(),
    limit: yup.number().integer().min(exports.NO_TICKETS_LIMIT).default(function () { return exports.NO_TICKETS_LIMIT; })
        .defined(),
    winners: yup.number().integer().positive().required(),
    triggered_tickets_pick: validation_1.NumericBoolField.default(function () { return validation_1.NumericBool.NO; }).defined(),
    completed_tickets_pick: validation_1.NumericBoolField.default(function () { return validation_1.NumericBool.NO; }).defined(),
}); });
/** Expected base URL for prize pages */
exports.PRIZE_BASE_URL = 'https://www.comicrelief.com/prizes';
/**
 * Returns the frontend page URL
 * for the given categoryName and prizePath
 *
 * @param categoryName
 * @param prizePath
 * @param baseUrl
 */
var generatePrizeURL = function (categoryName, prizePath, baseUrl) {
    if (baseUrl === void 0) { baseUrl = exports.PRIZE_BASE_URL; }
    return baseUrl.replace(/\/+$/, '') + "/" + lodash_1.kebabCase(categoryName) + "/" + prizePath;
};
exports.generatePrizeURL = generatePrizeURL;
/**
 * Returns the frontend page URL
 * for the given prize category and prize
 *
 * @param category
 * @param prize
 * @param baseUrl
 */
var generatePrizeURLFromModels = function (category, prize, baseUrl) {
    if (baseUrl === void 0) { baseUrl = exports.PRIZE_BASE_URL; }
    return exports.generatePrizeURL(category.name, prize.path, baseUrl);
};
exports.generatePrizeURLFromModels = generatePrizeURLFromModels;
/**
 * Validates that the given amount
 * of tickets is defined in the prize bundles
 * and returns the associated price.
 *
 * Throws a validation error otherwise.
 *
 * @param prize
 * @param amount
 */
var getTicketsPrice = function (prize, amount) {
    var bundle = prize.bundles.find(function (el) { return el.tickets === amount; });
    if (!bundle) {
        var allowed = prize.bundles.map(function (el) { return el.tickets; });
        var error = new yup.ValidationError(amount + " is not a valid tickets amount for prize: '" + prize.id + "'. It must be one of: " + JSON.stringify(allowed), amount, 'amount');
        throw new ValidationError_1.ValidationError(error);
    }
    return bundle.price;
};
exports.getTicketsPrice = getTicketsPrice;
//# sourceMappingURL=Prize.js.map