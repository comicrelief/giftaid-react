"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toState = exports.s3Key = exports.Ticket = exports.TicketStates = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../validation");
/**
 * Ticket states
 */
var TicketStates;
(function (TicketStates) {
    TicketStates["PENDING"] = "PENDING";
    TicketStates["VERIFIED"] = "VERIFIED";
    TicketStates["WINNER"] = "WINNER";
})(TicketStates = exports.TicketStates || (exports.TicketStates = {}));
/**
 * Ticket model.
 *
 * Identifies a ticket created as part of a transaction.
 * Multiple tickets entries may share a transaction.
 * Multiple tickets entries may share uuid (but a different state).
 */
exports.Ticket = validation_1.defineModel(validation_1.Namespaces.PRIZE_PLATFORM_SERVICE, 'Ticket', function () {
    var states = Object.values(TicketStates);
    return yup
        .object({
        uuid: validation_1.UUID,
        postal: validation_1.NumericBoolField.default(function () { return validation_1.NumericBool.NO; }).defined(),
        postal_id: yup.string().default(function () { return null; }).nullable(),
        parent_uuid: yup.string().default(function () { return ''; }),
        prize_id: yup.string().required(),
        transaction_uuid: yup.string().uuid().required(),
        donation_uuid: yup.string()
            .when('postal', function (postal, schema) {
            if (Number(postal) === validation_1.NumericBool.YES) {
                return schema.nullable().oneOf([null]);
            }
            return schema.uuid().strict(true).required();
        }),
        supporter_uuid: validation_1.SupporterUUID,
        identity_hash: yup.string().required(),
        state: yup.string().oneOf(states).required(),
        timestamp: validation_1.TimestampOrNow.defined(),
    })
        // Automatically populate `donation_uuid`
        // based on the contents of `postal` and `transaction_uuid`
        .transform(function (value) {
        if (!value) {
            // Rubbish TicketProps value
            // return immediately, let validation handle this
            return value;
        }
        if (typeof value !== 'object') {
            // Avoid throwing because of spread operator
            // and let the validation handle this
            return value;
        }
        var clone = __assign({}, value);
        if (Number(clone.postal) === validation_1.NumericBool.YES) {
            // Discard `donation_uuid` immediately
            // and set it to null - there was no donation here
            clone.donation_uuid = null;
        }
        else {
            // The transaction_uuid will be the same
            // of the donation_uuid
            clone.donation_uuid = clone.transaction_uuid;
        }
        return clone;
    });
});
/**
 * Generates the S3 Key for the parquet file.
 * Since multiple rows can share the same parquet file
 * this function only requires generic arguments.
 *
 * @param prize_id
 * @param transaction_uuid
 * @param unixTimestamp
 */
var s3Key = function (prize_id, transaction_uuid, unixTimestamp) { return [
    'store',
    'tickets',
    "prize_id=" + prize_id,
    unixTimestamp + "__" + transaction_uuid + ".parquet",
].join('/'); };
exports.s3Key = s3Key;
/**
 * Generates a new ticket with the given state
 * starting frm the given ticket.
 *
 * @param ticket
 * @param state
 * @param timestamp Multiple tickets may share the same timestamp
 */
var toState = function (ticket, state, timestamp) { return exports.Ticket.validate(__assign(__assign({}, ticket), { uuid: validation_1.UUID.default(), state: state, parent_uuid: ticket.uuid, timestamp: timestamp || new Date() })); };
exports.toState = toState;
//# sourceMappingURL=Ticket.js.map