"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.s3Key = exports.Transaction = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../validation");
/**
 * Transaction model.
 *
 * Identifies a ticket group transaction.
 * Multiple tickets entries may share a transaction.
 */
exports.Transaction = validation_1.defineModel(validation_1.Namespaces.PRIZE_PLATFORM_SERVICE, 'Transaction', function () { return yup
    .object({
    uuid: yup.string().uuid().required(),
    order_reference: validation_1.UUID.required(),
    prize_id: yup.string().required(),
    postal: validation_1.NumericBoolField.default(function () { return validation_1.NumericBool.NO; }).defined(),
    postal_id: yup.string().default(function () { return null; }).nullable(),
    identity_hash: yup.string().required(),
    firstname: validation_1.FirstName.required(),
    lastname: validation_1.LastName.required(),
    email: validation_1.Email.default(function () { return ''; }).defined(),
    mobile: validation_1.Mobile.default(function () { return ''; }).defined(),
    timestamp: validation_1.TimestampOrNow.defined(),
})
    .test(validation_1.EmailOrMobileTest); });
/**
 * Generates the S3 Key for the parquet file.
 *
 * @param prize_id
 * @param transaction_uuid
 * @param unixTimestamp
 */
var s3Key = function (prize_id, transaction_uuid, unixTimestamp) { return [
    'store',
    'transactions',
    "prize_id=" + prize_id,
    unixTimestamp + "__" + transaction_uuid + ".parquet",
].join('/'); };
exports.s3Key = s3Key;
//# sourceMappingURL=Transaction.js.map