import { NumericBool, SupporterInfoProps } from '../../../validation';
/**
 * Represents the possible processing states
 * for a PostalTicket
 */
export declare enum PostalTicketStates {
    /** Still needs to be processed by serverless-prize-platform */
    PENDING = "PENDING",
    /** Successfully processed by serverless-prize-platform */
    PROCESSED = "PROCESSED",
    /** Rejected by serverless-prize-platform */
    REJECTED = "REJECTED"
}
/**
 * Value used for missing first name.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have a partial name. The entry will be
 * rejected, but will still be loaded into ERP for reporting purposes.
 */
export declare const MISSING_FIRST_NAME = "MISSING_FIRST_NAME";
/**
 * Value used for missing last name.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have a partial name. The entry will be
 * rejected, but will still be loaded into ERP for reporting purposes.
 */
export declare const MISSING_LAST_NAME = "MISSING_LAST_NAME";
/**
 * Value used for missing email address.
 *
 * This value should never appear in valid entries, but may be used to enable a
 * postal entry to pass validation if we have no contact details. The entry
 * will be rejected, but will still be loaded into ERP for reporting purposes.
 */
export declare const MISSING_EMAIL = "MISSING_EMAIL@comicrelief.com";
/**
 * Value used for missing postal address fields.
 *
 * Not all postal entries will contain the entrant's postal address. The
 * `PostalTicket` model fills missing address fields with this value during
 * validation (unless casting is disabled).
 */
export declare const MISSING_POSTAL_INFO = "MISSING_POSTAL_INFO";
/**
 * Props required to generate
 * an PostalTicket model.
 */
export interface PostalTicketProps {
    /**
     * Identifies a Postal Ticket.
     *
     * Upper Comms has agreed to provide unique IDs
     * across all rows in all CSVs.
     *
     * The agreed unique id format is as follows:
     * `${prize_id}-${row_number}`
     */
    id: string;
    /** Prize Contentful ID */
    prize_id: string;
    /** Related supporter first name */
    first_name: string;
    /** Related supporter last name */
    last_name: string;
    /** Related supporter email */
    email?: string;
    /** Related supporter mobile */
    mobile?: string;
    /** Related supporter first line of address */
    address1: string;
    /** Related supporter postcode */
    postcode: string;
    /** Related supporter town */
    town: string;
    /** Related supporter country */
    country: string;
    /** Whether the supporter is over 18 */
    over18: NumericBool;
    /** Metadata: `serverless-prize-platform` import state */
    state: PostalTicketStates;
}
/**
 * PostalTicket model.
 *
 * Represents a postal prize entry that we receive from Upward Comms.
 *
 * The entrant's full postal address is optional, but we require them to give
 * their country, at least one method of contact (email or phone), and their
 * full name.
 *
 * Missing postal address lines will be autofilled with `MISSING_POSTAL_INFO`,
 * but missing names or emails will not â€“ they are mandatory for a valid prize
 * entry, and if missing should raise an error so that we can ask Upward Comms
 * to double-check the entry. If it is confirmed that the details are missing,
 * they can be manually filled in with `MISSING_FIRST_NAME`, etc. to allow the
 * ticket to pass initial validation, but be rejected from the prize draw.
 */
export declare const PostalTicket: import("../../../validation").Model<PostalTicketProps>;
/**
 * Checks whether the postal ticket
 * can be converted into a valid ticket
 * and enter the prize.
 *
 * @param postalTicket
 */
export declare const canEnterPrize: (postalTicket: PostalTicketProps) => boolean;
/**
 * Generates a SupporterInfoProps object
 * from a Required<PostalTicketProps> object
 *
 * @param postalTicket
 */
export declare const toSupporter: (postalTicket: PostalTicketProps) => SupporterInfoProps;
//# sourceMappingURL=PostalTicket.d.ts.map