import { NumericBool } from '../../../validation';
/**
 * Ticket states
 */
export declare enum TicketStates {
    PENDING = "PENDING",
    VERIFIED = "VERIFIED",
    WINNER = "WINNER"
}
/**
 * Props required to generate
 * an Ticket model.
 */
export interface TicketProps {
    /** UUID generated by `serverless-prize-platform` */
    uuid?: string;
    /** Whether this is a postal entry */
    postal?: NumericBool;
    /** Postal Ticket ID if any */
    postal_id?: string | null;
    /** Contentful ID of the related Prize */
    prize_id: string;
    /** Parent Ticket UUID. Can't be nullable because it goes into Glue */
    parent_uuid?: string;
    /** Metadata associated with the ticket */
    transaction_uuid: string;
    /**
     * Donation UUID is a computed field based on
     * `postal` and `transaction_uuid`.
     *
     * If `postal === true`, then it `donation_uuid === null`
     * else `donation_uuid === transaction_uuid`.
     *
     * The computed value is generated by the validation
     * see .transform call.
     *
     * We need this duplication because on ERP Next
     * `transaction_uuid` is used to reference a donation
     * and postal entries don't have donations.
     * This is a limitation based on the fact that
     * `Transaction` should really be named `TicketsBundle` now
     * but there isn't enough time to rename the model
     * and related tables, nor update the UUID generation logic.
     *
     * The easiest solution is to compute the value of `donation_uuid`
     * so that the data integrity on ERP Next is preserved.
     */
    donation_uuid?: string | null;
    /** Associated supporter */
    supporter_uuid?: string | null;
    /** Associated identity_hash */
    identity_hash: string;
    /** State of the ticket */
    state: TicketStates;
    /** Timestamp of creation */
    timestamp?: string;
}
/**
 * Ticket model.
 *
 * Identifies a ticket created as part of a transaction.
 * Multiple tickets entries may share a transaction.
 * Multiple tickets entries may share uuid (but a different state).
 */
export declare const Ticket: import("../../../validation").Model<TicketProps>;
/**
 * Generates the S3 Key for the parquet file.
 * Since multiple rows can share the same parquet file
 * this function only requires generic arguments.
 *
 * @param prize_id
 * @param transaction_uuid
 * @param unixTimestamp
 */
export declare const s3Key: (prize_id: string, transaction_uuid: string, unixTimestamp: number) => string;
/**
 * Generates a new ticket with the given state
 * starting frm the given ticket.
 *
 * @param ticket
 * @param state
 * @param timestamp Multiple tickets may share the same timestamp
 */
export declare const toState: (ticket: Required<TicketProps>, state: TicketStates, timestamp?: Date | undefined) => Promise<TicketProps>;
//# sourceMappingURL=Ticket.d.ts.map