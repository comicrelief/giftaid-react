"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transactionGenerator = exports.TRANSACTIONS = exports.INVALID_TRANSACTIONS = exports.VALID_TRANSACTIONS = exports.TRANSACTION_VALUES = exports.TRANSACTION_VALUES_INVALID = exports.TRANSACTION_VALUES_VALID = void 0;
var utils_1 = require("../../../utils");
var validation_1 = require("../../../validation");
var SupporterInfo_mock_1 = require("../../shared/mocks/SupporterInfo.mock");
exports.TRANSACTION_VALUES_VALID = {
    uuid: '442137be-c06a-4045-a622-148191058281',
    order_reference: '0ab9b3b9-66fa-42d8-90f3-76177dff92db',
    prize_id: '27c26801-b0f7-4241-945d-bbec17772530',
    postal: validation_1.NumericBool.NO,
    postal_id: null,
    identity_hash: 'xxxxxxxxxxxxxxxxxxxxxxxx',
    firstname: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.firstName,
    lastname: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.lastName,
    email: SupporterInfo_mock_1.EMAILS.valid,
    mobile: SupporterInfo_mock_1.MOBILES.valid.DEFAULT,
    timestamp: new Date(1601302521147).toISOString(),
};
exports.TRANSACTION_VALUES_INVALID = {
    uuid: 'some',
    order_reference: 'some',
    prize_id: null,
    postal: 5,
    postal_id: NaN,
    identity_hash: null,
    firstname: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.invalid.firstName,
    lastname: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.invalid.lastName,
    email: SupporterInfo_mock_1.EMAILS.invalid,
    mobile: SupporterInfo_mock_1.MOBILES.invalid.DEFAULT,
    timestamp: 'not-a-timestamp',
};
exports.TRANSACTION_VALUES = {
    valid: exports.TRANSACTION_VALUES_VALID,
    invalid: exports.TRANSACTION_VALUES_INVALID,
};
exports.VALID_TRANSACTIONS = {
    DEFAULT: exports.TRANSACTION_VALUES.valid,
    POSTAL: utils_1.override(exports.TRANSACTION_VALUES.valid, { postal: validation_1.NumericBool.YES, postal_id: '48239c8d-17db-4080-b483-1eb471e2d99d' }),
    MISSING_POSTAL: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['postal']),
    MISSING_POSTAL_ID: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['postal_id']),
    MISSING_ORDER_REFERENCE: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['order_reference']),
    MISSING_EMAIL: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['email']),
    MISSING_MOBILE: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['mobile']),
    MISSING_TIMESTAMP: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['timestamp']),
    EMPTY_EMAIL: utils_1.override(exports.TRANSACTION_VALUES.valid, { email: '' }),
    EMPTY_MOBILE: utils_1.override(exports.TRANSACTION_VALUES.valid, { mobile: '' }),
};
exports.INVALID_TRANSACTIONS = {
    INVALID_UUID: utils_1.override(exports.TRANSACTION_VALUES.valid, { uuid: exports.TRANSACTION_VALUES.invalid.uuid }),
    INVALID_ORDER_REFERENCE: utils_1.override(exports.TRANSACTION_VALUES.valid, { order_reference: exports.TRANSACTION_VALUES.invalid.order_reference }),
    INVALID_PRIZE_ID: utils_1.override(exports.TRANSACTION_VALUES.valid, { prize_id: exports.TRANSACTION_VALUES.invalid.prize_id }),
    INVALID_IDENTITY_HASH: utils_1.override(exports.TRANSACTION_VALUES.valid, { identity_hash: exports.TRANSACTION_VALUES.invalid.identity_hash }),
    INVALID_FIRSTNAME: utils_1.override(exports.TRANSACTION_VALUES.valid, { firstname: exports.TRANSACTION_VALUES.invalid.firstname }),
    INVALID_LASTNAME: utils_1.override(exports.TRANSACTION_VALUES.valid, { lastname: exports.TRANSACTION_VALUES.invalid.lastname }),
    INVALID_EMAIL: utils_1.override(exports.TRANSACTION_VALUES.valid, { email: exports.TRANSACTION_VALUES.invalid.email }),
    INVALID_MOBILE: utils_1.override(exports.TRANSACTION_VALUES.valid, { mobile: exports.TRANSACTION_VALUES.invalid.mobile }),
    INVALID_POSTAL: utils_1.override(exports.TRANSACTION_VALUES.valid, { postal: exports.TRANSACTION_VALUES.invalid.postal }),
    MISSING_UUID: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['uuid']),
    MISSING_PRIZE_ID: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['prize_id']),
    MISSING_IDENTITY_HASH: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['identity_hash']),
    MISSING_FIRSTNAME: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['firstname']),
    MISSING_LASTNAME: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['lastname']),
    MISSING_EMAIL_AND_MOBILE: utils_1.omit(exports.TRANSACTION_VALUES.valid, ['email', 'mobile']),
    EMPTY_EMAIL_AND_MOBILE: utils_1.override(exports.TRANSACTION_VALUES.valid, { email: '', mobile: '' }),
};
exports.TRANSACTIONS = {
    invalid: exports.INVALID_TRANSACTIONS,
    valid: exports.VALID_TRANSACTIONS,
};
/**
 * Generates a random transaction
 *
 * @param overrides
 */
var transactionGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var postal = utils_1.getRandomElement(validation_1.NumericBoolValues);
    return __assign({ uuid: utils_1.getUuid(), order_reference: utils_1.getUuid(), prize_id: utils_1.getString(10), postal: postal, postal_id: postal ? utils_1.getString(10) : null, identity_hash: utils_1.getString(16), firstname: utils_1.getString(10), lastname: utils_1.getString(10), email: utils_1.getEmail(), mobile: utils_1.getMobile(), timestamp: utils_1.getTimestamp() }, overrides);
};
exports.transactionGenerator = transactionGenerator;
//# sourceMappingURL=Transaction.mock.js.map