"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.CONFIGS = exports.CONFIGS_INVALID = exports.CONFIGS_VALID = exports.CONFIG_VALUES = exports.CONFIG_VALUES_INVALID = exports.CONFIG_VALUES_VALID = void 0;
var utils_1 = require("../../../utils");
var Config_1 = require("../models/Config");
exports.CONFIG_VALUES_VALID = {
    state: Config_1.ConfigStates.OK,
};
exports.CONFIG_VALUES_INVALID = {
    state: 'not-a-state',
};
exports.CONFIG_VALUES = {
    valid: exports.CONFIG_VALUES_VALID,
    invalid: exports.CONFIG_VALUES_INVALID,
};
exports.CONFIGS_VALID = {
    DEFAULT: exports.CONFIG_VALUES.valid,
    OK: utils_1.override(exports.CONFIG_VALUES.valid, { state: Config_1.ConfigStates.OK }),
    TEMPORARILY_PAUSED: utils_1.override(exports.CONFIG_VALUES.valid, { state: Config_1.ConfigStates.TEMPORARILY_PAUSED }),
    INDEFINITELY_PAUSED: utils_1.override(exports.CONFIG_VALUES.valid, { state: Config_1.ConfigStates.INDEFINITELY_PAUSED }),
};
exports.CONFIGS_INVALID = {
    DEFAULT: exports.CONFIG_VALUES.invalid,
    INVALID_STATE: utils_1.override(exports.CONFIG_VALUES.valid, { state: exports.CONFIG_VALUES.invalid.state }),
    MISSING_STATE: utils_1.omit(exports.CONFIG_VALUES.valid, ['state']),
};
exports.CONFIGS = {
    invalid: exports.CONFIGS_INVALID,
    valid: exports.CONFIGS_VALID,
};
/**
 * Generates a random config
 *
 * @param overrides
 */
var createConfig = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ state: utils_1.getRandomElement(Object.values(Config_1.ConfigStates)) }, overrides));
};
exports.createConfig = createConfig;
//# sourceMappingURL=Config.mock.js.map