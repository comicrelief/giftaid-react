"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestGenerator = exports.CREATE_REQUESTS = exports.CREATE_REQUESTS_INVALID = exports.CREATE_REQUESTS_VALID = exports.CREATE_REQUEST_VALUES = exports.CREATE_REQUEST_INVALID_VALUES = exports.CREATE_REQUEST_VALID_VALUES = void 0;
var utils_1 = require("../../../../../utils");
var SupporterInfo_mock_1 = require("../../../../shared/mocks/SupporterInfo.mock");
var Prize_mock_1 = require("../../Prize.mock");
exports.CREATE_REQUEST_VALID_VALUES = {
    supporter: SupporterInfo_mock_1.SUPPORTER_INFOS.valid.DEFAULT,
    prize_id: Prize_mock_1.PRIZES.valid.DEFAULT.id,
    amount: 2,
    urls: {
        success: utils_1.getUrl({ path: '/prizes/my-magnificent-prize', randomSuffix: false }),
        failure: utils_1.getUrl({ path: '/prizes/my-magnificent-prize', randomSuffix: false }),
    },
};
exports.CREATE_REQUEST_INVALID_VALUES = {
    supporter: SupporterInfo_mock_1.SUPPORTER_INFOS.invalid.DEFAULT,
    prize_id: Prize_mock_1.PRIZES.invalid.DEFAULT.id,
    amount: null,
    urls: {
        success: null,
        failure: null,
    },
};
exports.CREATE_REQUEST_VALUES = {
    valid: exports.CREATE_REQUEST_VALID_VALUES,
    invalid: exports.CREATE_REQUEST_INVALID_VALUES,
};
exports.CREATE_REQUESTS_VALID = __assign({ DEFAULT: exports.CREATE_REQUEST_VALUES.valid, ONE_ENTRY: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 1 }), THREE_ENTRIES: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 3 }), WITH_LOCALHOST: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { urls: { success: 'http://localhost:8080/prize/x', failure: 'https://localhost:8080/prize/x' } }) }, utils_1.overrideFromMocks(exports.CREATE_REQUEST_VALUES.valid, 'supporter', SupporterInfo_mock_1.SUPPORTER_INFOS.valid));
exports.CREATE_REQUESTS_INVALID = __assign({ INVALID_PRIZE_ID: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { prize_id: exports.CREATE_REQUEST_VALUES.invalid.prize_id }), INVALID_AMOUNT_STRING: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 'a' }), INVALID_AMOUNT_DOUBLE: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 2.2 }), INVALID_AMOUNT_INSUFFICIENT: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { amount: 0 }), INVALID_SUCCESS_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { urls: { success: exports.CREATE_REQUEST_VALUES.invalid.urls.success, failure: exports.CREATE_REQUEST_VALUES.valid.urls.failure } }), INVALID_FAILURE_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { urls: { success: exports.CREATE_REQUEST_VALUES.valid.urls.success, failure: exports.CREATE_REQUEST_VALUES.invalid.urls.failure } }), MISSING_PRIZE_ID: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['prize_id']), MISSING_AMOUNT: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['amount']), MISSING_SUCCESS_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { urls: { failure: exports.CREATE_REQUEST_VALUES.valid.urls.failure } }), MISSING_FAILURE_URL: utils_1.override(exports.CREATE_REQUEST_VALUES.valid, { urls: { success: exports.CREATE_REQUEST_VALUES.valid.urls.success } }), MISSING_URLS: utils_1.omit(exports.CREATE_REQUEST_VALUES.valid, ['urls']) }, utils_1.overrideFromMocks(exports.CREATE_REQUEST_VALUES.valid, 'supporter', SupporterInfo_mock_1.SUPPORTER_INFOS.invalid));
exports.CREATE_REQUESTS = {
    valid: exports.CREATE_REQUESTS_VALID,
    invalid: exports.CREATE_REQUESTS_INVALID,
};
/**
 * Generates a random CreateRequest
 *
 * @param overrides
 */
var createRequestGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ supporter: SupporterInfo_mock_1.createSupporterInfo(), prize_id: utils_1.getString(10), amount: Math.round(utils_1.getNumber(1, 10)), urls: {
            success: utils_1.getUrl({ path: '/prizes' }),
            failure: utils_1.getUrl({ path: '/prizes' }),
        } }, overrides));
};
exports.createRequestGenerator = createRequestGenerator;
//# sourceMappingURL=CreateRequest.mock.js.map