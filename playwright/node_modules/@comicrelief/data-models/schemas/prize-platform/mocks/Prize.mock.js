"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prizeGenerator = exports.getBundles = exports.getBundle = exports.PRIZES = exports.PRIZES_INVALID = exports.PRIZES_VALID = exports.PRIZE_VALUES = exports.PRIZE_VALUES_INVALID = exports.PRIZE_VALUES_VALID = exports.PRIZE_BUNDLE_OPTIONS = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../../../utils");
var validation_1 = require("../../../validation");
var Prize_1 = require("../models/Prize");
var PrizeCategory_mock_1 = require("./PrizeCategory.mock");
exports.PRIZE_BUNDLE_OPTIONS = {
    valid: {
        ONE_TICKET: { tickets: 1, price: 10 },
        TEN_TICKETS: { tickets: 10, price: 90 },
        ONE_HUNDRED_TICKETS: { tickets: 100, price: 500 },
    },
    invalid: {
        UNDEFINED: undefined,
        NULL: null,
        EMPTY: {},
        RANDOM: { random: 1 },
        INVALID_TICKETS: { tickets: 'a', price: 10 },
        INVALID_PRICE: { tickets: 1, price: 'a' },
        MISSING_TICKETS: { price: 10 },
        MISSING_PRICE: { tickets: 1 },
    },
};
exports.PRIZE_VALUES_VALID = {
    id: '1ce06009-ea12-4952-a202-c3c54178d729',
    title: 'My Magnificent Prize',
    category_id: PrizeCategory_mock_1.PRIZE_CATEGORIES.valid.DEFAULT.id,
    path: 'my-magnificent-prize',
    url: Prize_1.generatePrizeURL(PrizeCategory_mock_1.PRIZE_CATEGORIES.valid.DEFAULT.name, 'my-magnificent-prize'),
    start_date: '2020-07-20T00:00+01:00',
    end_date: '2021-02-02T00:00',
    bundles: Object.values(exports.PRIZE_BUNDLE_OPTIONS.valid),
    limit: 100 * 1000,
    winners: 5,
    completed_tickets_pick: validation_1.NumericBool.NO,
    triggered_tickets_pick: validation_1.NumericBool.NO,
};
exports.PRIZE_VALUES_INVALID = {
    id: null,
    title: null,
    category_id: null,
    path: null,
    url: 'not-a-url',
    start_date: null,
    end_date: null,
    bundles: Object.values(exports.PRIZE_BUNDLE_OPTIONS.invalid),
    limit: 'limit',
    winners: 'winners',
    completed_tickets_pick: 'z',
    triggered_tickets_pick: 'z',
};
exports.PRIZE_VALUES = {
    valid: exports.PRIZE_VALUES_VALID,
    invalid: exports.PRIZE_VALUES_INVALID,
};
exports.PRIZES_VALID = {
    DEFAULT: exports.PRIZE_VALUES.valid,
    COMPLETED_TICKETS_PICK_NO: utils_1.override(exports.PRIZE_VALUES.valid, { completed_tickets_pick: validation_1.NumericBool.NO }),
    COMPLETED_TICKETS_PICK_YES: utils_1.override(exports.PRIZE_VALUES.valid, { completed_tickets_pick: validation_1.NumericBool.YES }),
    ONE_WINNER: utils_1.override(exports.PRIZE_VALUES.valid, { winners: 1 }),
    THREE_WINNERS: utils_1.override(exports.PRIZE_VALUES.valid, { winners: 3 }),
    LIMITED: utils_1.override(exports.PRIZE_VALUES.valid, { limit: 1 }),
    UNLIMITED: utils_1.override(exports.PRIZE_VALUES.valid, { limit: Prize_1.NO_TICKETS_LIMIT }),
    TRIGGERED_TICKETS_PICK_NO: utils_1.override(exports.PRIZE_VALUES.valid, { triggered_tickets_pick: validation_1.NumericBool.NO }),
    TRIGGERED_TICKETS_PICK_YES: utils_1.override(exports.PRIZE_VALUES.valid, { triggered_tickets_pick: validation_1.NumericBool.YES }),
    MISSING_LIMIT: utils_1.omit(exports.PRIZE_VALUES.valid, ['limit']),
    MISSING_COMPLETED_TICKETS_PICK: utils_1.omit(exports.PRIZE_VALUES.valid, ['completed_tickets_pick']),
    MISSING_URL: utils_1.omit(exports.PRIZE_VALUES.valid, ['url']),
    MISSING_TRIGGERED_TICKETS_PICK: utils_1.omit(exports.PRIZE_VALUES.valid, ['triggered_tickets_pick']),
};
exports.PRIZES_INVALID = {
    DEFAULT: exports.PRIZE_VALUES.invalid,
    INVALID_ID: utils_1.override(exports.PRIZE_VALUES.valid, { id: exports.PRIZE_VALUES.invalid.id }),
    INVALID_TITLE: utils_1.override(exports.PRIZE_VALUES.valid, { title: exports.PRIZE_VALUES.invalid.title }),
    INVALID_PATH: utils_1.override(exports.PRIZE_VALUES.valid, { path: exports.PRIZE_VALUES.invalid.path }),
    INVALID_CATEGORY_ID: utils_1.override(exports.PRIZE_VALUES.valid, { category_id: exports.PRIZE_VALUES.invalid.category_id }),
    INVALID_START_DATE: utils_1.override(exports.PRIZE_VALUES.valid, { start_date: exports.PRIZE_VALUES.invalid.start_date }),
    INVALID_END_DATE: utils_1.override(exports.PRIZE_VALUES.valid, { end_date: exports.PRIZE_VALUES.invalid.end_date }),
    INVALID_BUNDLES: utils_1.override(exports.PRIZE_VALUES.valid, { bundles: exports.PRIZE_VALUES.invalid.bundles }),
    INVALID_LIMIT: utils_1.override(exports.PRIZE_VALUES.valid, { limit: exports.PRIZE_VALUES.invalid.limit }),
    INVALID_LIMIT_NEGATIVE: utils_1.override(exports.PRIZE_VALUES.valid, { limit: -2 }),
    INVALID_LIMIT_DECIMAL: utils_1.override(exports.PRIZE_VALUES.valid, { limit: 5.5 }),
    INVALID_WINNERS: utils_1.override(exports.PRIZE_VALUES.valid, { winners: exports.PRIZE_VALUES.invalid.winners }),
    INVALID_COMPLETED_TICKETS_PICK: utils_1.override(exports.PRIZE_VALUES.valid, { completed_tickets_pick: exports.PRIZE_VALUES.invalid.completed_tickets_pick }),
    INVALID_TRIGGERED_TICKETS_PICK: utils_1.override(exports.PRIZE_VALUES.valid, { triggered_tickets_pick: exports.PRIZE_VALUES.invalid.triggered_tickets_pick }),
    EMPTY_BUNDLES: utils_1.override(exports.PRIZE_VALUES.valid, { bundles: [] }),
    MISSING_ID: utils_1.omit(exports.PRIZE_VALUES.valid, ['id']),
    MISSING_TITLE: utils_1.omit(exports.PRIZE_VALUES.valid, ['title']),
    MISSING_PATH: utils_1.omit(exports.PRIZE_VALUES.valid, ['path']),
    MISSING_CATEGORY_ID: utils_1.omit(exports.PRIZE_VALUES.valid, ['category_id']),
    MISSING_START_DATE: utils_1.omit(exports.PRIZE_VALUES.valid, ['start_date']),
    MISSING_END_DATE: utils_1.omit(exports.PRIZE_VALUES.valid, ['end_date']),
    MISSING_BUNDLES: utils_1.omit(exports.PRIZE_VALUES.valid, ['bundles']),
    MISSING_WINNERS: utils_1.omit(exports.PRIZE_VALUES.valid, ['winners']),
};
exports.PRIZES = {
    invalid: exports.PRIZES_INVALID,
    valid: exports.PRIZES_VALID,
};
/**
 * Generates a random PrizeBundleOptionProps
 *
 * @param tickets Optional. Tickets amount to be used for the bundle.
 * @param price Optional. Price of the bundle.
 */
var getBundle = function (tickets, price) {
    if (tickets && tickets < 1) {
        throw new Error('`serverless-payments` expects the `amount` to be at least 1');
    }
    if (price && price < 1) {
        throw new Error('`serverless-payments` expects the `amount` to be at least 1');
    }
    return {
        price: price || utils_1.getNumber(1, 100),
        tickets: tickets || utils_1.getNumber(1, 100),
    };
};
exports.getBundle = getBundle;
/**
 * Generates an array of PrizeBundleOptionProps
 *
 * @param tickets Optional. Tickets amount to be used for the last bundle.
 * @param totalBundles Optional. Defaults to 6 matching our use cases.
 */
var getBundles = function (tickets, totalBundles) {
    if (totalBundles === void 0) { totalBundles = 6; }
    // Most of the prizes will have 6 bundles
    var bundles = Array.from({ length: totalBundles - 1 }).map(function () { return exports.getBundle(); });
    bundles.push(exports.getBundle(tickets));
    return bundles;
};
exports.getBundles = getBundles;
/**
 * Generates a random prize
 *
 * @param overrides
 */
var prizeGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var path = utils_1.getString(10);
    /** Give limitless a fair chance of 50% */
    var limit = utils_1.getRandomElement([Prize_1.NO_TICKETS_LIMIT, utils_1.getInteger(100, 10000)]);
    return __assign({ id: uuid_1.v4(), title: utils_1.getString(10), category_id: utils_1.getString(10), path: path, url: Prize_1.generatePrizeURL(PrizeCategory_mock_1.PRIZE_CATEGORIES.valid.DEFAULT.name, path), start_date: utils_1.getTimestamp(null, -7), end_date: utils_1.getTimestamp(null, 7), bundles: exports.getBundles(), limit: limit, winners: utils_1.getInteger(1, 10), completed_tickets_pick: utils_1.getRandomElement(validation_1.NumericBoolValues), triggered_tickets_pick: utils_1.getRandomElement(validation_1.NumericBoolValues) }, overrides);
};
exports.prizeGenerator = prizeGenerator;
//# sourceMappingURL=Prize.mock.js.map