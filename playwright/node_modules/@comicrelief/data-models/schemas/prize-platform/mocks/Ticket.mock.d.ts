import { NumericBool } from '../../../validation';
import { TicketProps, TicketStates } from '../models/Ticket';
export declare const TICKET_VALUES: {
    invalid: {
        uuid: string;
        postal: number;
        postal_id: number;
        prize_id: null;
        transaction_uuid: string;
        donation_uuid: number;
        supporter_uuid: string;
        identity_hash: null;
        parent_uuid: null;
        state: string;
        timestamp: string;
    };
    valid: Required<TicketProps>;
};
export declare const TICKETS_VALID: {
    DEFAULT: Required<TicketProps>;
    PENDING: Required<TicketProps> & {
        parent_uuid: string;
        state: TicketStates;
    };
    VERIFIED: Required<TicketProps> & {
        state: TicketStates;
    };
    WINNER: Required<TicketProps> & {
        state: TicketStates;
    };
    POSTAL: Required<TicketProps> & {
        postal: NumericBool;
        donation_uuid: null;
        postal_id: string;
    };
    MISSING_UUID: Omit<Required<TicketProps>, "uuid">;
    MISSING_POSTAL: Omit<Required<TicketProps>, "postal">;
    MISSING_POSTAL_ID: Omit<Required<TicketProps>, "postal_id">;
    MISSING_TIMESTAMP: Omit<Required<TicketProps>, "timestamp">;
    MISSING_PARENT_UUID: Omit<Required<TicketProps>, "parent_uuid">;
};
export declare const TICKETS_INVALID: {
    DEFAULT: {
        uuid: string;
        postal: number;
        postal_id: number;
        prize_id: null;
        transaction_uuid: string;
        donation_uuid: number;
        supporter_uuid: string;
        identity_hash: null;
        parent_uuid: null;
        state: string;
        timestamp: string;
    };
    INVALID_UUID: Required<TicketProps> & {
        uuid: string;
    };
    INVALID_PRIZE_ID: never;
    INVALID_POSTAL: Required<TicketProps> & {
        postal: number;
    };
    INVALID_TRANSACTION: Required<TicketProps> & {
        transaction_uuid: string;
    };
    INVALID_SUPPORTER_UUID: Required<TicketProps> & {
        supporter_uuid: string;
    };
    INVALID_IDENTITY_HASH: never;
    INVALID_PARENT_UUID: never;
    INVALID_STATE: Required<TicketProps> & {
        state: string;
    };
    INVALID_TIMESTAMP: Required<TicketProps> & {
        timestamp: string;
    };
    MISSING_PRIZE_ID: Omit<Required<TicketProps>, "prize_id">;
    MISSING_TRANSACTION: Omit<Required<TicketProps>, "transaction_uuid">;
    MISSING_IDENTITY_HASH: Omit<Required<TicketProps>, "identity_hash">;
    MISSING_STATE: Omit<Required<TicketProps>, "state">;
    MISSING_SUPPORTER_UUID: Omit<Required<TicketProps>, "supporter_uuid">;
    SUPPORTER_UUID_NULL: Required<TicketProps> & {
        supporter_uuid: null;
    };
};
export declare const TICKETS: {
    valid: {
        DEFAULT: Required<TicketProps>;
        PENDING: Required<TicketProps> & {
            parent_uuid: string;
            state: TicketStates;
        };
        VERIFIED: Required<TicketProps> & {
            state: TicketStates;
        };
        WINNER: Required<TicketProps> & {
            state: TicketStates;
        };
        POSTAL: Required<TicketProps> & {
            postal: NumericBool;
            donation_uuid: null;
            postal_id: string;
        };
        MISSING_UUID: Omit<Required<TicketProps>, "uuid">;
        MISSING_POSTAL: Omit<Required<TicketProps>, "postal">;
        MISSING_POSTAL_ID: Omit<Required<TicketProps>, "postal_id">;
        MISSING_TIMESTAMP: Omit<Required<TicketProps>, "timestamp">;
        MISSING_PARENT_UUID: Omit<Required<TicketProps>, "parent_uuid">;
    };
    invalid: {
        DEFAULT: {
            uuid: string;
            postal: number;
            postal_id: number;
            prize_id: null;
            transaction_uuid: string;
            donation_uuid: number;
            supporter_uuid: string;
            identity_hash: null;
            parent_uuid: null;
            state: string;
            timestamp: string;
        };
        INVALID_UUID: Required<TicketProps> & {
            uuid: string;
        };
        INVALID_PRIZE_ID: never;
        INVALID_POSTAL: Required<TicketProps> & {
            postal: number;
        };
        INVALID_TRANSACTION: Required<TicketProps> & {
            transaction_uuid: string;
        };
        INVALID_SUPPORTER_UUID: Required<TicketProps> & {
            supporter_uuid: string;
        };
        INVALID_IDENTITY_HASH: never;
        INVALID_PARENT_UUID: never;
        INVALID_STATE: Required<TicketProps> & {
            state: string;
        };
        INVALID_TIMESTAMP: Required<TicketProps> & {
            timestamp: string;
        };
        MISSING_PRIZE_ID: Omit<Required<TicketProps>, "prize_id">;
        MISSING_TRANSACTION: Omit<Required<TicketProps>, "transaction_uuid">;
        MISSING_IDENTITY_HASH: Omit<Required<TicketProps>, "identity_hash">;
        MISSING_STATE: Omit<Required<TicketProps>, "state">;
        MISSING_SUPPORTER_UUID: Omit<Required<TicketProps>, "supporter_uuid">;
        SUPPORTER_UUID_NULL: Required<TicketProps> & {
            supporter_uuid: null;
        };
    };
};
/**
 * Generates a random ticket
 *
 * @param overrides
 */
export declare const ticketGenerator: (overrides?: Partial<TicketProps>) => Required<TicketProps>;
//# sourceMappingURL=Ticket.mock.d.ts.map