"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPostalTicket = exports.POSTAL_TICKETS = exports.INVALID_POSTAL_TICKETS = exports.VALID_POSTAL_TICKETS = exports.POSTAL_TICKET_VALUES = exports.POSTAL_TICKET_VALUES_INVALID = exports.POSTAL_TICKET_VALUES_VALID = void 0;
var utils_1 = require("../../../utils");
var validation_1 = require("../../../validation");
var SupporterInfo_mock_1 = require("../../shared/mocks/SupporterInfo.mock");
var PostalTicket_1 = require("../models/PostalTicket");
exports.POSTAL_TICKET_VALUES_VALID = {
    id: '27c6801b0f74241945dbbec17772530-99',
    prize_id: '27c6801b0f74241945dbbec17772530',
    first_name: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.firstName,
    last_name: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.lastName,
    email: SupporterInfo_mock_1.EMAILS.valid,
    mobile: SupporterInfo_mock_1.MOBILES.valid.DEFAULT,
    address1: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.address1,
    postcode: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.postcode,
    town: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.town,
    country: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.valid.country,
    over18: validation_1.NumericBool.YES,
    state: PostalTicket_1.PostalTicketStates.PENDING,
};
exports.POSTAL_TICKET_VALUES_INVALID = {
    id: null,
    prize_id: null,
    first_name: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.invalid.firstName,
    last_name: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.invalid.lastName,
    email: SupporterInfo_mock_1.EMAILS.invalid,
    mobile: SupporterInfo_mock_1.MOBILES.invalid.DEFAULT,
    address1: NaN,
    postcode: NaN,
    town: NaN,
    country: SupporterInfo_mock_1.SUPPORTER_INFO_VALUES.invalid.country,
    over18: 'any',
    state: 'any',
};
exports.POSTAL_TICKET_VALUES = {
    valid: exports.POSTAL_TICKET_VALUES_VALID,
    invalid: exports.POSTAL_TICKET_VALUES_INVALID,
};
exports.VALID_POSTAL_TICKETS = {
    DEFAULT: exports.POSTAL_TICKET_VALUES.valid,
    PENDING: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { state: PostalTicket_1.PostalTicketStates.PENDING }),
    PROCESSED: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { state: PostalTicket_1.PostalTicketStates.PROCESSED }),
    REJECTED: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { state: PostalTicket_1.PostalTicketStates.REJECTED }),
    MISSING_EMAIL: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['email']),
    MISSING_MOBILE: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['mobile']),
    MISSING_STATE: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['state']),
    MISSING_ADDRESS1: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['address1']),
    MISSING_POSTCODE: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['postcode']),
    MISSING_TOWN: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['town']),
    OVER_18: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { over18: validation_1.NumericBool.YES }),
    UNDER_18: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { over18: validation_1.NumericBool.NO }),
    COUNTRY_UK: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { country: 'UK' }),
    COUNTRY_UNITED_KINGDOM: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { country: 'United Kingdom' }),
    COUNTRY_ITALY: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { country: 'Italy' }),
};
exports.INVALID_POSTAL_TICKETS = {
    DEFAULT: exports.POSTAL_TICKET_VALUES.invalid,
    INVALID_ID: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { id: exports.POSTAL_TICKET_VALUES.invalid.id }),
    INVALID_PRIZE_ID: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { prize_id: exports.POSTAL_TICKET_VALUES.invalid.prize_id }),
    INVALID_FIRSTNAME: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { first_name: exports.POSTAL_TICKET_VALUES.invalid.first_name }),
    INVALID_LASTNAME: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { last_name: exports.POSTAL_TICKET_VALUES.invalid.last_name }),
    INVALID_EMAIL: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { email: exports.POSTAL_TICKET_VALUES.invalid.email }),
    INVALID_MOBILE: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { mobile: exports.POSTAL_TICKET_VALUES.invalid.mobile }),
    INVALID_ADDRESS1: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { address1: exports.POSTAL_TICKET_VALUES.invalid.address1 }),
    INVALID_POSTCODE: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { postcode: exports.POSTAL_TICKET_VALUES.invalid.postcode }),
    INVALID_TOWN: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { town: exports.POSTAL_TICKET_VALUES.invalid.town }),
    INVALID_COUNTRY: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { country: exports.POSTAL_TICKET_VALUES.invalid.country }),
    INVALID_STATE: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { state: exports.POSTAL_TICKET_VALUES.invalid.state }),
    INVALID_OVER_18: utils_1.override(exports.POSTAL_TICKET_VALUES.valid, { over18: exports.POSTAL_TICKET_VALUES.invalid.over18 }),
    MISSING_ID: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['id']),
    MISSING_PRIZE_ID: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['prize_id']),
    MISSING_FIRSTNAME: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['first_name']),
    MISSING_LASTNAME: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['last_name']),
    MISSING_EMAIL_AND_MOBILE: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['email', 'mobile']),
    MISSING_COUNTRY: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['country']),
    MISSING_OVER_18: utils_1.omit(exports.POSTAL_TICKET_VALUES.valid, ['over18']),
};
exports.POSTAL_TICKETS = {
    invalid: exports.INVALID_POSTAL_TICKETS,
    valid: exports.VALID_POSTAL_TICKETS,
};
/**
 * Generates a random postal ticket
 *
 * @param overrides
 */
var createPostalTicket = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var prize_id = overrides.prize_id || utils_1.getString(10);
    var id = overrides.id || prize_id + "-" + utils_1.getInteger(1, 9999);
    return __assign({ id: id,
        prize_id: prize_id, first_name: utils_1.getString(10), last_name: utils_1.getString(10), email: utils_1.getEmail(), mobile: utils_1.getMobile(), address1: utils_1.getString(10), postcode: utils_1.getString(5), town: utils_1.getString(10), country: 'United Kingdom', state: utils_1.getRandomElement(Object.values(PostalTicket_1.PostalTicketStates)), over18: utils_1.getRandomElement(validation_1.NumericBoolValues) }, overrides);
};
exports.createPostalTicket = createPostalTicket;
//# sourceMappingURL=PostalTicket.mock.js.map