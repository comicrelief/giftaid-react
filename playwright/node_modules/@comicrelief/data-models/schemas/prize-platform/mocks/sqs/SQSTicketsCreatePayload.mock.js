"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSQSTicketsCreatePayload = exports.SQS_TICKETS_CREATE_PAYLOADS = exports.SQS_TICKETS_CREATE_PAYLOADS_INVALID = exports.SQS_TICKETS_CREATE_PAYLOADS_VALID = exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES = exports.SQS_TICKETS_CREATE_PAYLOAD_INVALID_VALUES = exports.SQS_TICKETS_CREATE_PAYLOAD_VALID_VALUES = void 0;
var utils_1 = require("../../../../utils");
var validation_1 = require("../../../../validation");
var SupporterInfo_mock_1 = require("../../../shared/mocks/SupporterInfo.mock");
exports.SQS_TICKETS_CREATE_PAYLOAD_VALID_VALUES = {
    supporter: SupporterInfo_mock_1.SUPPORTER_INFOS.valid.DEFAULT,
    prize_id: '15036856-5534-4844-9ca4-905b46567ebf',
    amount: 10,
    order_reference: 'e1d23896-addc-409b-9990-2fcc135da0a0',
    transaction_uuid: 'e6deedca-fe79-4deb-82b2-6cb89ac715a0',
    postal: validation_1.NumericBool.NO,
    postal_id: null,
};
exports.SQS_TICKETS_CREATE_PAYLOAD_INVALID_VALUES = {
    supporter: SupporterInfo_mock_1.SUPPORTER_INFOS.invalid.DEFAULT,
    prize_id: null,
    order_reference: null,
    transaction_uuid: null,
    postal: 5,
    postal_id: NaN,
};
exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES = {
    valid: exports.SQS_TICKETS_CREATE_PAYLOAD_VALID_VALUES,
    invalid: exports.SQS_TICKETS_CREATE_PAYLOAD_INVALID_VALUES,
};
exports.SQS_TICKETS_CREATE_PAYLOADS_VALID = __assign({ DEFAULT: exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ONE_ENTRY: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { amount: 1 }), THREE_ENTRIES: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { amount: 3 }), POSTAL: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { postal: validation_1.NumericBool.YES }), MISSING_POSTAL: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['postal']) }, utils_1.overrideFromMocks(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, 'supporter', SupporterInfo_mock_1.SUPPORTER_INFOS.valid));
exports.SQS_TICKETS_CREATE_PAYLOADS_INVALID = __assign({ INVALID_PRIZE_ID: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { prize_id: exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.invalid.prize_id }), INVALID_ORDER_REFERENCE: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { order_reference: exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.invalid.order_reference }), INVALID_TRANSACTION_UUID: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { transaction_uuid: exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.invalid.transaction_uuid }), INVALID_AMOUNT_STRING: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { amount: 'a' }), INVALID_AMOUNT_DOUBLE: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { amount: 2.2 }), INVALID_AMOUNT_INSUFFICIENT: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { amount: 0 }), INVALID_POSTAL: utils_1.override(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, { postal: exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.invalid.postal }), MISSING_AMOUNT: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['amount']), MISSING_PRIZE_ID: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['prize_id']), MISSING_SUPPORTER: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['supporter']), MISSING_ORDER_REFERENCE: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['order_reference']), MISSING_TRANSACTION_UUID: utils_1.omit(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, ['transaction_uuid']) }, utils_1.overrideFromMocks(exports.SQS_TICKETS_CREATE_PAYLOAD_VALUES.valid, 'supporter', SupporterInfo_mock_1.SUPPORTER_INFOS.invalid));
exports.SQS_TICKETS_CREATE_PAYLOADS = {
    valid: exports.SQS_TICKETS_CREATE_PAYLOADS_VALID,
    invalid: exports.SQS_TICKETS_CREATE_PAYLOADS_INVALID,
};
/**
 * Generates a random SQSTicketsCreatePayloadProps
 *
 * @param overrides
 */
var createSQSTicketsCreatePayload = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var postal = utils_1.getRandomElement(validation_1.NumericBoolValues);
    return __assign({ supporter: SupporterInfo_mock_1.createSupporterInfo(), prize_id: utils_1.getString(10), amount: utils_1.getInteger(1, 100), order_reference: utils_1.getUuid(), transaction_uuid: utils_1.getUuid(), postal: postal, postal_id: postal ? utils_1.getString(10) : null }, overrides);
};
exports.createSQSTicketsCreatePayload = createSQSTicketsCreatePayload;
//# sourceMappingURL=SQSTicketsCreatePayload.mock.js.map