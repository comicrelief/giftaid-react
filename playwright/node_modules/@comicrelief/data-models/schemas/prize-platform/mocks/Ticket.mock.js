"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ticketGenerator = exports.TICKETS = exports.TICKETS_INVALID = exports.TICKETS_VALID = exports.TICKET_VALUES = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../../../utils");
var validation_1 = require("../../../validation");
var Ticket_1 = require("../models/Ticket");
var Transaction_mock_1 = require("./Transaction.mock");
var TICKET_VALID_VALUES = {
    uuid: '0f226bb6-c2a2-4233-b2e6-6ae599186d4a',
    postal: validation_1.NumericBool.NO,
    postal_id: null,
    prize_id: Transaction_mock_1.TRANSACTION_VALUES.valid.prize_id,
    transaction_uuid: Transaction_mock_1.TRANSACTION_VALUES.valid.uuid,
    donation_uuid: Transaction_mock_1.TRANSACTION_VALUES.valid.uuid,
    supporter_uuid: '5c403ea8-310b-48d3-9315-00b47efa99a9',
    identity_hash: 'hash',
    parent_uuid: '69949459-ee5a-4522-8ed8-d6638f7da316',
    state: Ticket_1.TicketStates.PENDING,
    timestamp: new Date(1601302521147).toISOString(),
};
var TICKET_INVALID_VALUES = {
    uuid: 'string',
    postal: 5,
    postal_id: NaN,
    prize_id: null,
    transaction_uuid: Transaction_mock_1.TRANSACTION_VALUES.invalid.uuid,
    donation_uuid: NaN,
    supporter_uuid: 'not-a-uuid',
    identity_hash: null,
    parent_uuid: null,
    state: 'some-state',
    timestamp: 'not-a-timestamp',
};
exports.TICKET_VALUES = {
    invalid: TICKET_INVALID_VALUES,
    valid: TICKET_VALID_VALUES,
};
exports.TICKETS_VALID = {
    DEFAULT: exports.TICKET_VALUES.valid,
    PENDING: utils_1.override(exports.TICKET_VALUES.valid, { parent_uuid: '', state: Ticket_1.TicketStates.PENDING }),
    VERIFIED: utils_1.override(exports.TICKET_VALUES.valid, { state: Ticket_1.TicketStates.VERIFIED }),
    WINNER: utils_1.override(exports.TICKET_VALUES.valid, { state: Ticket_1.TicketStates.WINNER }),
    POSTAL: utils_1.override(exports.TICKET_VALUES.valid, { postal: validation_1.NumericBool.YES, donation_uuid: null, postal_id: '48239c8d-17db-4080-b483-1eb471e2d99d' }),
    MISSING_UUID: utils_1.omit(exports.TICKET_VALUES.valid, ['uuid']),
    MISSING_POSTAL: utils_1.omit(exports.TICKET_VALUES.valid, ['postal']),
    MISSING_POSTAL_ID: utils_1.omit(exports.TICKET_VALUES.valid, ['postal_id']),
    MISSING_TIMESTAMP: utils_1.omit(exports.TICKET_VALUES.valid, ['timestamp']),
    MISSING_PARENT_UUID: utils_1.omit(exports.TICKET_VALUES.valid, ['parent_uuid']),
};
exports.TICKETS_INVALID = {
    DEFAULT: exports.TICKET_VALUES.invalid,
    INVALID_UUID: utils_1.override(exports.TICKET_VALUES.valid, { uuid: exports.TICKET_VALUES.invalid.uuid }),
    INVALID_PRIZE_ID: utils_1.override(exports.TICKET_VALUES.valid, { prize_id: exports.TICKET_VALUES.invalid.prize_id }),
    INVALID_POSTAL: utils_1.override(exports.TICKET_VALUES.valid, { postal: exports.TICKET_VALUES.invalid.postal }),
    INVALID_TRANSACTION: utils_1.override(exports.TICKET_VALUES.valid, { transaction_uuid: exports.TICKET_VALUES.invalid.transaction_uuid }),
    INVALID_SUPPORTER_UUID: utils_1.override(exports.TICKET_VALUES.valid, { supporter_uuid: exports.TICKET_VALUES.invalid.supporter_uuid }),
    INVALID_IDENTITY_HASH: utils_1.override(exports.TICKET_VALUES.valid, { identity_hash: exports.TICKET_VALUES.invalid.identity_hash }),
    INVALID_PARENT_UUID: utils_1.override(exports.TICKET_VALUES.valid, { parent_uuid: exports.TICKET_VALUES.invalid.parent_uuid }),
    INVALID_STATE: utils_1.override(exports.TICKET_VALUES.valid, { state: exports.TICKET_VALUES.invalid.state }),
    INVALID_TIMESTAMP: utils_1.override(exports.TICKET_VALUES.valid, { timestamp: exports.TICKET_VALUES.invalid.timestamp }),
    MISSING_PRIZE_ID: utils_1.omit(exports.TICKET_VALUES.valid, ['prize_id']),
    MISSING_TRANSACTION: utils_1.omit(exports.TICKET_VALUES.valid, ['transaction_uuid']),
    MISSING_IDENTITY_HASH: utils_1.omit(exports.TICKET_VALUES.valid, ['identity_hash']),
    MISSING_STATE: utils_1.omit(exports.TICKET_VALUES.valid, ['state']),
    MISSING_SUPPORTER_UUID: utils_1.omit(exports.TICKET_VALUES.valid, ['supporter_uuid']),
    SUPPORTER_UUID_NULL: utils_1.override(exports.TICKET_VALUES.valid, { supporter_uuid: null }),
};
exports.TICKETS = {
    valid: exports.TICKETS_VALID,
    invalid: exports.TICKETS_INVALID,
};
/**
 * Generates a random ticket
 *
 * @param overrides
 */
var ticketGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var postal = utils_1.getRandomElement(validation_1.NumericBoolValues);
    var transaction_uuid = uuid_1.v4();
    var ticket = __assign({ uuid: uuid_1.v4(), prize_id: utils_1.getString(10), transaction_uuid: transaction_uuid,
        postal: postal, postal_id: postal ? utils_1.getString(10) : null, donation_uuid: postal ? null : transaction_uuid, supporter_uuid: uuid_1.v4(), identity_hash: utils_1.getString(16), parent_uuid: utils_1.getRandomElement(['', uuid_1.v4()]), timestamp: utils_1.getTimestamp(), state: utils_1.getRandomElement(Object.values(Ticket_1.TicketStates)) }, overrides);
    return ticket;
};
exports.ticketGenerator = ticketGenerator;
//# sourceMappingURL=Ticket.mock.js.map