import { NumericBool } from '../../../validation';
import { PrizeBundleOptionProps, PrizeProps } from '../models/Prize';
export declare const PRIZE_BUNDLE_OPTIONS: {
    valid: {
        ONE_TICKET: {
            tickets: number;
            price: number;
        };
        TEN_TICKETS: {
            tickets: number;
            price: number;
        };
        ONE_HUNDRED_TICKETS: {
            tickets: number;
            price: number;
        };
    };
    invalid: {
        UNDEFINED: undefined;
        NULL: null;
        EMPTY: {};
        RANDOM: {
            random: number;
        };
        INVALID_TICKETS: {
            tickets: string;
            price: number;
        };
        INVALID_PRICE: {
            tickets: number;
            price: string;
        };
        MISSING_TICKETS: {
            price: number;
        };
        MISSING_PRICE: {
            tickets: number;
        };
    };
};
export declare const PRIZE_VALUES_VALID: Required<PrizeProps>;
export declare const PRIZE_VALUES_INVALID: {
    id: null;
    title: null;
    category_id: null;
    path: null;
    url: string;
    start_date: null;
    end_date: null;
    bundles: ({} | {
        random: number;
    } | {
        tickets: string;
        price: number;
    } | {
        tickets: number;
        price: string;
    } | {
        price: number;
    } | {
        tickets: number;
    } | null | undefined)[];
    limit: string;
    winners: string;
    completed_tickets_pick: string;
    triggered_tickets_pick: string;
};
export declare const PRIZE_VALUES: {
    valid: Required<PrizeProps>;
    invalid: {
        id: null;
        title: null;
        category_id: null;
        path: null;
        url: string;
        start_date: null;
        end_date: null;
        bundles: ({} | {
            random: number;
        } | {
            tickets: string;
            price: number;
        } | {
            tickets: number;
            price: string;
        } | {
            price: number;
        } | {
            tickets: number;
        } | null | undefined)[];
        limit: string;
        winners: string;
        completed_tickets_pick: string;
        triggered_tickets_pick: string;
    };
};
export declare const PRIZES_VALID: {
    DEFAULT: Required<PrizeProps>;
    COMPLETED_TICKETS_PICK_NO: Required<PrizeProps> & {
        completed_tickets_pick: NumericBool;
    };
    COMPLETED_TICKETS_PICK_YES: Required<PrizeProps> & {
        completed_tickets_pick: NumericBool;
    };
    ONE_WINNER: Required<PrizeProps> & {
        winners: number;
    };
    THREE_WINNERS: Required<PrizeProps> & {
        winners: number;
    };
    LIMITED: Required<PrizeProps> & {
        limit: number;
    };
    UNLIMITED: Required<PrizeProps> & {
        limit: number;
    };
    TRIGGERED_TICKETS_PICK_NO: Required<PrizeProps> & {
        triggered_tickets_pick: NumericBool;
    };
    TRIGGERED_TICKETS_PICK_YES: Required<PrizeProps> & {
        triggered_tickets_pick: NumericBool;
    };
    MISSING_LIMIT: Omit<Required<PrizeProps>, "limit">;
    MISSING_COMPLETED_TICKETS_PICK: Omit<Required<PrizeProps>, "completed_tickets_pick">;
    MISSING_URL: Omit<Required<PrizeProps>, "url">;
    MISSING_TRIGGERED_TICKETS_PICK: Omit<Required<PrizeProps>, "triggered_tickets_pick">;
};
export declare const PRIZES_INVALID: {
    DEFAULT: {
        id: null;
        title: null;
        category_id: null;
        path: null;
        url: string;
        start_date: null;
        end_date: null;
        bundles: ({} | {
            random: number;
        } | {
            tickets: string;
            price: number;
        } | {
            tickets: number;
            price: string;
        } | {
            price: number;
        } | {
            tickets: number;
        } | null | undefined)[];
        limit: string;
        winners: string;
        completed_tickets_pick: string;
        triggered_tickets_pick: string;
    };
    INVALID_ID: never;
    INVALID_TITLE: never;
    INVALID_PATH: never;
    INVALID_CATEGORY_ID: never;
    INVALID_START_DATE: never;
    INVALID_END_DATE: never;
    INVALID_BUNDLES: Required<PrizeProps> & {
        bundles: ({} | {
            random: number;
        } | {
            tickets: string;
            price: number;
        } | {
            tickets: number;
            price: string;
        } | {
            price: number;
        } | {
            tickets: number;
        } | null | undefined)[];
    };
    INVALID_LIMIT: Required<PrizeProps> & {
        limit: string;
    };
    INVALID_LIMIT_NEGATIVE: Required<PrizeProps> & {
        limit: number;
    };
    INVALID_LIMIT_DECIMAL: Required<PrizeProps> & {
        limit: number;
    };
    INVALID_WINNERS: Required<PrizeProps> & {
        winners: string;
    };
    INVALID_COMPLETED_TICKETS_PICK: never;
    INVALID_TRIGGERED_TICKETS_PICK: never;
    EMPTY_BUNDLES: Required<PrizeProps> & {
        bundles: never[];
    };
    MISSING_ID: Omit<Required<PrizeProps>, "id">;
    MISSING_TITLE: Omit<Required<PrizeProps>, "title">;
    MISSING_PATH: Omit<Required<PrizeProps>, "path">;
    MISSING_CATEGORY_ID: Omit<Required<PrizeProps>, "category_id">;
    MISSING_START_DATE: Omit<Required<PrizeProps>, "start_date">;
    MISSING_END_DATE: Omit<Required<PrizeProps>, "end_date">;
    MISSING_BUNDLES: Omit<Required<PrizeProps>, "bundles">;
    MISSING_WINNERS: Omit<Required<PrizeProps>, "winners">;
};
export declare const PRIZES: {
    invalid: {
        DEFAULT: {
            id: null;
            title: null;
            category_id: null;
            path: null;
            url: string;
            start_date: null;
            end_date: null;
            bundles: ({} | {
                random: number;
            } | {
                tickets: string;
                price: number;
            } | {
                tickets: number;
                price: string;
            } | {
                price: number;
            } | {
                tickets: number;
            } | null | undefined)[];
            limit: string;
            winners: string;
            completed_tickets_pick: string;
            triggered_tickets_pick: string;
        };
        INVALID_ID: never;
        INVALID_TITLE: never;
        INVALID_PATH: never;
        INVALID_CATEGORY_ID: never;
        INVALID_START_DATE: never;
        INVALID_END_DATE: never;
        INVALID_BUNDLES: Required<PrizeProps> & {
            bundles: ({} | {
                random: number;
            } | {
                tickets: string;
                price: number;
            } | {
                tickets: number;
                price: string;
            } | {
                price: number;
            } | {
                tickets: number;
            } | null | undefined)[];
        };
        INVALID_LIMIT: Required<PrizeProps> & {
            limit: string;
        };
        INVALID_LIMIT_NEGATIVE: Required<PrizeProps> & {
            limit: number;
        };
        INVALID_LIMIT_DECIMAL: Required<PrizeProps> & {
            limit: number;
        };
        INVALID_WINNERS: Required<PrizeProps> & {
            winners: string;
        };
        INVALID_COMPLETED_TICKETS_PICK: never;
        INVALID_TRIGGERED_TICKETS_PICK: never;
        EMPTY_BUNDLES: Required<PrizeProps> & {
            bundles: never[];
        };
        MISSING_ID: Omit<Required<PrizeProps>, "id">;
        MISSING_TITLE: Omit<Required<PrizeProps>, "title">;
        MISSING_PATH: Omit<Required<PrizeProps>, "path">;
        MISSING_CATEGORY_ID: Omit<Required<PrizeProps>, "category_id">;
        MISSING_START_DATE: Omit<Required<PrizeProps>, "start_date">;
        MISSING_END_DATE: Omit<Required<PrizeProps>, "end_date">;
        MISSING_BUNDLES: Omit<Required<PrizeProps>, "bundles">;
        MISSING_WINNERS: Omit<Required<PrizeProps>, "winners">;
    };
    valid: {
        DEFAULT: Required<PrizeProps>;
        COMPLETED_TICKETS_PICK_NO: Required<PrizeProps> & {
            completed_tickets_pick: NumericBool;
        };
        COMPLETED_TICKETS_PICK_YES: Required<PrizeProps> & {
            completed_tickets_pick: NumericBool;
        };
        ONE_WINNER: Required<PrizeProps> & {
            winners: number;
        };
        THREE_WINNERS: Required<PrizeProps> & {
            winners: number;
        };
        LIMITED: Required<PrizeProps> & {
            limit: number;
        };
        UNLIMITED: Required<PrizeProps> & {
            limit: number;
        };
        TRIGGERED_TICKETS_PICK_NO: Required<PrizeProps> & {
            triggered_tickets_pick: NumericBool;
        };
        TRIGGERED_TICKETS_PICK_YES: Required<PrizeProps> & {
            triggered_tickets_pick: NumericBool;
        };
        MISSING_LIMIT: Omit<Required<PrizeProps>, "limit">;
        MISSING_COMPLETED_TICKETS_PICK: Omit<Required<PrizeProps>, "completed_tickets_pick">;
        MISSING_URL: Omit<Required<PrizeProps>, "url">;
        MISSING_TRIGGERED_TICKETS_PICK: Omit<Required<PrizeProps>, "triggered_tickets_pick">;
    };
};
/**
 * Generates a random PrizeBundleOptionProps
 *
 * @param tickets Optional. Tickets amount to be used for the bundle.
 * @param price Optional. Price of the bundle.
 */
export declare const getBundle: (tickets?: number | undefined, price?: number | undefined) => PrizeBundleOptionProps;
/**
 * Generates an array of PrizeBundleOptionProps
 *
 * @param tickets Optional. Tickets amount to be used for the last bundle.
 * @param totalBundles Optional. Defaults to 6 matching our use cases.
 */
export declare const getBundles: (tickets?: number | undefined, totalBundles?: number) => PrizeBundleOptionProps[];
/**
 * Generates a random prize
 *
 * @param overrides
 */
export declare const prizeGenerator: (overrides?: Partial<PrizeProps>) => Required<PrizeProps>;
//# sourceMappingURL=Prize.mock.d.ts.map