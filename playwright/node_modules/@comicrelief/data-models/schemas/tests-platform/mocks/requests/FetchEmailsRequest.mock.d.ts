import { FetchEmailsRequestFilterKeys, FetchEmailsRequestProps } from '../../models/requests/FetchEmailsRequest';
export declare const FETCH_EMAIL_REQUEST_VALID_VALUES: Required<FetchEmailsRequestProps>;
export declare const FETCH_EMAIL_REQUEST_INVALID_VALUES: {
    filterKey: string;
    filterValue: null;
    consume: number;
};
export declare const FETCH_EMAIL_REQUEST_VALUES: {
    valid: Required<FetchEmailsRequestProps>;
    invalid: {
        filterKey: string;
        filterValue: null;
        consume: number;
    };
};
export declare const FETCH_EMAIL_REQUESTS_VALID: {
    DEFAULT: Required<FetchEmailsRequestProps>;
    CONSUME_FALSE: Required<FetchEmailsRequestProps> & {
        consume: boolean;
    };
    CONSUME_TRUE: Required<FetchEmailsRequestProps> & {
        consume: boolean;
    };
    FILTER_KEY_UUID: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    FILTER_KEY_SENDER: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    FILTER_KEY_RECEIVER: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    FILTER_KEY_SUBJECT: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    FILTER_KEY_HTML: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    FILTER_KEY_TEXT: Required<FetchEmailsRequestProps> & {
        filterKey: FetchEmailsRequestFilterKeys;
    };
    MISSING_CONSUME: Omit<Required<FetchEmailsRequestProps>, "consume">;
};
export declare const FETCH_EMAIL_REQUESTS_INVALID: {
    DEFAULT: {
        filterKey: string;
        filterValue: null;
        consume: number;
    };
    INVALID_FILTER_KEY: Required<FetchEmailsRequestProps> & {
        filterKey: string;
    };
    INVALID_FILTER_VALUE: never;
    INVALID_CONSUME: never;
};
export declare const FETCH_EMAIL_REQUESTS: {
    valid: {
        DEFAULT: Required<FetchEmailsRequestProps>;
        CONSUME_FALSE: Required<FetchEmailsRequestProps> & {
            consume: boolean;
        };
        CONSUME_TRUE: Required<FetchEmailsRequestProps> & {
            consume: boolean;
        };
        FILTER_KEY_UUID: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        FILTER_KEY_SENDER: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        FILTER_KEY_RECEIVER: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        FILTER_KEY_SUBJECT: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        FILTER_KEY_HTML: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        FILTER_KEY_TEXT: Required<FetchEmailsRequestProps> & {
            filterKey: FetchEmailsRequestFilterKeys;
        };
        MISSING_CONSUME: Omit<Required<FetchEmailsRequestProps>, "consume">;
    };
    invalid: {
        DEFAULT: {
            filterKey: string;
            filterValue: null;
            consume: number;
        };
        INVALID_FILTER_KEY: Required<FetchEmailsRequestProps> & {
            filterKey: string;
        };
        INVALID_FILTER_VALUE: never;
        INVALID_CONSUME: never;
    };
};
/**
 * Generates a random FetchEmailsRequest
 *
 * @param overrides
 */
export declare const fetchEmailRequestGenerator: (overrides?: Partial<FetchEmailsRequestProps>) => FetchEmailsRequestProps;
//# sourceMappingURL=FetchEmailsRequest.mock.d.ts.map