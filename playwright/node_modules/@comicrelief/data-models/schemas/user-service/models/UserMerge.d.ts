import { IdentityType } from './Identity';
export interface MergeIdentity {
    hash: string;
    kind: IdentityType;
    content: string;
}
/**
 * Props required to generate
 * an User model.
 */
export interface UserMergeProps {
    /** UUID used to index on DynamoDB */
    uuid?: string;
    /** Origin identity */
    origin: MergeIdentity;
    /** Destination identity */
    destination: MergeIdentity;
    /** Datetime of creation */
    created?: Date;
    /** Last datetime the merge was updated */
    updated?: Date;
}
/**
 * User Merge.
 *
 * Defines a correlation between two user identities.
 * We don't process them for the time being
 * but storing the associations will allow us
 * to eventually merge the related users together.
 */
export declare const UserMerge: import("../../../validation").Model<UserMergeProps>;
/**
 * Utility function setting the origin identity
 *
 * @param userMerge
 * @param origin
 */
export declare const setOrigin: (userMerge: Partial<UserMergeProps>, origin: MergeIdentity) => Partial<UserMergeProps> & {
    origin: MergeIdentity;
};
/**
 * Utility function setting the destination identity
 *
 * @param userMerge
 * @param destination
 */
export declare const setDestination: (userMerge: Partial<UserMergeProps>, destination: MergeIdentity) => Partial<UserMergeProps> & {
    destination: MergeIdentity;
};
//# sourceMappingURL=UserMerge.d.ts.map