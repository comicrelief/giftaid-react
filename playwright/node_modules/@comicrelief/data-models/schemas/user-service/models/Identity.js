"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identity = exports.IdentityBase = exports.IdentityContent = exports.IdentityKind = exports.IdentityType = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../validation");
/**
 * Either 'email' or 'mobile'
 */
var IdentityType;
(function (IdentityType) {
    IdentityType["EMAIL"] = "email";
    IdentityType["MOBILE"] = "mobile";
})(IdentityType = exports.IdentityType || (exports.IdentityType = {}));
var kinds = Object.values(IdentityType);
exports.IdentityKind = yup.string().oneOf(kinds).required();
exports.IdentityContent = yup.string().required().when('kind', function (value) {
    switch (value) {
        case IdentityType.EMAIL:
            return validation_1.Email.required();
        case IdentityType.MOBILE:
            return validation_1.Mobile.required();
        default:
            return yup.mixed().typeError('Invalid kind');
    }
});
exports.IdentityBase = validation_1.defineModel(validation_1.Namespaces.USER_SERVICE, 'IdentityBase', function () { return yup.object({
    kind: exports.IdentityKind,
    content: exports.IdentityContent,
}); });
/**
 * Identity model.
 *
 * Identifies either an `email` address or a `mobile` number.
 * Associate it to a `User` instance.
 *
 * Includes metadata regarding the identity:
 * - verified: Whether the user verified the identity
 * - hidden: Whether the user hid the identity
 * - created: Timestamp of creation
 * - updated: Timestamp of last update
 */
exports.Identity = validation_1.defineModel(validation_1.Namespaces.USER_SERVICE, 'Identity', function () { return yup
    .object({
    hash: yup.string().required(),
    kind: exports.IdentityKind,
    content: exports.IdentityContent,
    ownerUuid: yup.string().uuid().required(),
    verified: yup.boolean().default(function () { return false; }),
    hidden: yup.boolean().default(function () { return false; }),
    created: yup.date().default(function () { return new Date(); }),
    updated: yup.date().default(function () { return new Date(); }),
}); });
//# sourceMappingURL=Identity.js.map