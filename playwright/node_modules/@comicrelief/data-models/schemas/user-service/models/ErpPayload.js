"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addIdentity = exports.addUser = exports.ErpPayload = exports.ErpPayloadTypes = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../validation");
var Identity_1 = require("./Identity");
var ErpPayloadTypes;
(function (ErpPayloadTypes) {
    ErpPayloadTypes["USER__CREATE"] = "user:create";
    ErpPayloadTypes["IDENTITY__ADD"] = "identity:add";
})(ErpPayloadTypes = exports.ErpPayloadTypes || (exports.ErpPayloadTypes = {}));
/**
 * SignupRequest model.
 *
 * Specifies the payload to a request
 * to UserService's signup lambda.
 *
 * One and only one between
 * `email` or `mobile`
 * must be provided, and be valid.
 */
exports.ErpPayload = validation_1.defineModel(validation_1.Namespaces.USER_SERVICE, 'ErpPayload', function () {
    var types = Object.values(ErpPayloadTypes);
    var test = {
        name: 'email-or-mobile',
        message: 'Please provide either \'email\' or \'mobile\'',
        func: function (value) { var _a, _b; return Boolean(value && (((_a = value.email) === null || _a === void 0 ? void 0 : _a.length) || ((_b = value.mobile) === null || _b === void 0 ? void 0 : _b.length))); },
    };
    var email = yup
        .object({
        id: yup.string().required(),
        email: yup.string().email().required(),
        hidden: yup.boolean().default(function () { return false; }),
        verified: yup.boolean().default(function () { return false; }),
    })
        .required();
    var mobile = yup
        .object({
        id: yup.string().required(),
        number: yup.string().required(),
        hidden: yup.boolean().default(function () { return false; }),
        verified: yup.boolean().default(function () { return false; }),
    })
        .required();
    var nameField = yup.string().when('type', {
        is: ErpPayloadTypes.USER__CREATE,
        then: yup.string().required(),
        otherwise: yup.string().optional(),
    });
    var validator = yup
        .object({
        type: yup.string().oneOf(types).required(),
        cognito_user_id: yup.string().uuid().required(),
        first_name: nameField,
        last_name: nameField,
        email: yup.array().of(email),
        mobile: yup.array().of(mobile),
    })
        .test(test.name, test.message, test.func);
    return validator;
});
/**
 * Adds a user to the payload
 *
 * @param payload
 * @param user
 */
var addUser = function (payload, user) {
    var type = ErpPayloadTypes.USER__CREATE;
    var actions = (payload.actions || 0) + 1;
    return __assign(__assign({}, payload), { type: type, cognito_user_id: user.uuid, first_name: user.firstName, last_name: user.lastName, actions: actions });
};
exports.addUser = addUser;
/**
 * Adds an identity to the payload
 *
 * @param payload
 * @param identity
 */
var addIdentity = function (payload, identity) {
    var type = payload.type || ErpPayloadTypes.IDENTITY__ADD;
    var actions = (payload.actions || 0) + 1;
    if (payload.cognito_user_id && payload.cognito_user_id !== identity.ownerUuid) {
        var message = "Trying to add an identity to user '" + payload.cognito_user_id + "' but identity owner is '" + identity.ownerUuid + "'";
        throw new Error(message);
    }
    var email = payload.email || [];
    var mobile = payload.mobile || [];
    switch (identity.kind) {
        case Identity_1.IdentityType.EMAIL:
            email.push({
                id: identity.hash,
                email: identity.content,
                hidden: identity.hidden,
                verified: identity.verified,
            });
            break;
        case Identity_1.IdentityType.MOBILE:
            mobile.push({
                id: identity.hash,
                number: identity.content,
                hidden: identity.hidden,
                verified: identity.verified,
            });
            break;
        default:
            throw new Error("Invalid identity kind: '" + identity.kind + "'");
    }
    return __assign(__assign({}, payload), { type: type, cognito_user_id: identity.ownerUuid, email: email,
        mobile: mobile,
        actions: actions });
};
exports.addIdentity = addIdentity;
//# sourceMappingURL=ErpPayload.js.map