import type { IdentityProps } from './Identity';
import type { UserProps } from './User';
export declare enum ErpPayloadTypes {
    USER__CREATE = "user:create",
    IDENTITY__ADD = "identity:add"
}
export interface IdentityField {
    id: string;
    hidden?: boolean;
    verified?: boolean;
}
export interface EmailField extends IdentityField {
    email: string;
}
export interface MobileField extends IdentityField {
    number: string;
}
/**
 * Props required to generate
 * an SignupRequest.
 */
export interface ErpPayloadProps {
    type: ErpPayloadTypes;
    cognito_user_id: string;
    first_name?: string;
    last_name?: string;
    email?: EmailField[];
    mobile?: MobileField[];
}
/**
 * SignupRequest model.
 *
 * Specifies the payload to a request
 * to UserService's signup lambda.
 *
 * One and only one between
 * `email` or `mobile`
 * must be provided, and be valid.
 */
export declare const ErpPayload: import("../../../validation").Model<ErpPayloadProps>;
/**
 * Adds a user to the payload
 *
 * @param payload
 * @param user
 */
export declare const addUser: (payload: Partial<ErpPayloadProps> & {
    actions?: number | undefined;
}, user: UserProps & {
    uuid: string;
}) => ErpPayloadProps & {
    actions: number;
};
/**
 * Adds an identity to the payload
 *
 * @param payload
 * @param identity
 */
export declare const addIdentity: (payload: Partial<ErpPayloadProps> & {
    actions?: number | undefined;
}, identity: IdentityProps & {
    hash: string;
}) => ErpPayloadProps & {
    actions: number;
};
//# sourceMappingURL=ErpPayload.d.ts.map