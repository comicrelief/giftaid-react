"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDestination = exports.setOrigin = exports.UserMerge = void 0;
var yup = __importStar(require("yup"));
var validation_1 = require("../../../validation");
var Identity_1 = require("./Identity");
/**
 * User Merge.
 *
 * Defines a correlation between two user identities.
 * We don't process them for the time being
 * but storing the associations will allow us
 * to eventually merge the related users together.
 */
exports.UserMerge = validation_1.defineModel(validation_1.Namespaces.USER_SERVICE, 'UserMerge', function () {
    var kinds = Object.values(Identity_1.IdentityType);
    var identity = yup.object({
        hash: yup.string().required(),
        kind: yup.string().oneOf(kinds).required(),
        content: yup.string().required(),
    });
    return yup
        .object({
        uuid: validation_1.UUID,
        origin: identity.required(),
        destination: identity.required(),
        created: yup.date().default(function () { return new Date(); }).defined(),
        updated: yup.date().default(function () { return new Date(); }).defined(),
    });
});
/**
 * Utility function setting the origin identity
 *
 * @param userMerge
 * @param origin
 */
var setOrigin = function (userMerge, origin) { return (__assign(__assign({}, userMerge), { origin: origin })); };
exports.setOrigin = setOrigin;
/**
 * Utility function setting the destination identity
 *
 * @param userMerge
 * @param destination
 */
var setDestination = function (userMerge, destination) { return (__assign(__assign({}, userMerge), { destination: destination })); };
exports.setDestination = setDestination;
//# sourceMappingURL=UserMerge.js.map