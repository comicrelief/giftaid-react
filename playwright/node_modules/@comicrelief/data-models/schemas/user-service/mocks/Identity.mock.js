"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.identityGenerator = exports.PARTIAL_IDENTITIES = exports.IDENTITIES = exports.IDENTITIES_INVALID = exports.IDENTITIES_VALID = exports.IDENTITY_VALUES = exports.IDENTITY_INVALID_VALUES = exports.IDENTITY_VALID_VALUES = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../../../utils");
var SupporterInfo_mock_1 = require("../../shared/mocks/SupporterInfo.mock");
var Identity_1 = require("../models/Identity");
exports.IDENTITY_VALID_VALUES = {
    hash: '45e64813cd2a41129fef8561d3566dfe',
    ownerUuid: 'b6478c65-3109-447a-ace8-9e8ecdd8f590',
    kind: Identity_1.IdentityType.EMAIL,
    content: 'dante.alighieri@test.sandbox.comicrelief.com',
    hidden: false,
    verified: false,
    created: new Date(1599748412553),
    updated: new Date(1599748412553),
};
exports.IDENTITY_INVALID_VALUES = {
    hash: null,
    ownerUuid: 'invalid-uuid',
    kind: 'invalid-kind',
    content: null,
    hidden: Number.NaN,
    verified: Number.NaN,
    created: 'not-a-created-date',
    updated: 'not-a-updated-date',
};
exports.IDENTITY_VALUES = {
    valid: exports.IDENTITY_VALID_VALUES,
    invalid: exports.IDENTITY_INVALID_VALUES,
};
exports.IDENTITIES_VALID = {
    DEFAULT: exports.IDENTITY_VALID_VALUES,
    MISSING_HIDDEN: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['hidden']),
    MISSING_VERIFIED: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['verified']),
    MISSING_CREATED: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['created']),
    MISSING_UPDATED: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['updated']),
    EMAIL: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: Identity_1.IdentityType.EMAIL }),
    MOBILE: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: Identity_1.IdentityType.MOBILE, content: '+447847000000' }),
};
exports.IDENTITIES_INVALID = {
    DEFAULT: exports.IDENTITY_INVALID_VALUES,
    MISSING_HASH: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['hash']),
    MISSING_OWNERUUID: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['ownerUuid']),
    MISSING_KIND: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['kind']),
    MISSING_CONTENT: utils_1.omit(exports.IDENTITY_VALID_VALUES, ['content']),
    INVALID_HASH: utils_1.override(exports.IDENTITY_VALID_VALUES, { hash: exports.IDENTITY_INVALID_VALUES.hash }),
    INVALID_OWNERUUID: utils_1.override(exports.IDENTITY_VALID_VALUES, { ownerUuid: exports.IDENTITY_INVALID_VALUES.ownerUuid }),
    INVALID_KIND_NOT_RECOGNISED: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: 'some-kind' }),
    INVALID_KIND_NULL: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: null }),
    INVALID_CONTENT: utils_1.override(exports.IDENTITY_VALID_VALUES, { content: exports.IDENTITY_INVALID_VALUES.content }),
    INVALID_EMAIL: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: Identity_1.IdentityType.EMAIL, content: SupporterInfo_mock_1.EMAILS.invalid }),
    INVALID_MOBILE: utils_1.override(exports.IDENTITY_VALID_VALUES, { kind: Identity_1.IdentityType.MOBILE, content: SupporterInfo_mock_1.MOBILES.invalid.DEFAULT }),
    INVALID_HIDDEN: utils_1.override(exports.IDENTITY_VALID_VALUES, { hidden: exports.IDENTITY_INVALID_VALUES.hidden }),
    INVALID_VERIFIED: utils_1.override(exports.IDENTITY_VALID_VALUES, { verified: exports.IDENTITY_INVALID_VALUES.verified }),
    INVALID_CREATED: utils_1.override(exports.IDENTITY_VALID_VALUES, { created: exports.IDENTITY_INVALID_VALUES.created }),
    INVALID_UPDATED: utils_1.override(exports.IDENTITY_VALID_VALUES, { updated: exports.IDENTITY_INVALID_VALUES.updated }),
};
exports.IDENTITIES = {
    valid: exports.IDENTITIES_VALID,
    invalid: exports.IDENTITIES_INVALID,
};
exports.PARTIAL_IDENTITIES = {
    EMAIL: {
        kind: exports.IDENTITIES.valid.EMAIL.kind,
        content: exports.IDENTITIES.valid.EMAIL.content,
    },
    MOBILE: {
        kind: exports.IDENTITIES.valid.MOBILE.kind,
        content: exports.IDENTITIES.valid.MOBILE.content,
    },
};
/**
 * Generates a random identity
 *
 * @param overrides
 */
var identityGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var timestamp = utils_1.getUnixTimestamp();
    var kind = overrides.kind || utils_1.getRandomElement(Object.values(Identity_1.IdentityType));
    var content;
    if (kind === 'email') {
        content = utils_1.getEmail();
    }
    else {
        content = utils_1.getMobile();
    }
    return __assign({ hash: utils_1.getString(10), kind: kind,
        content: content, ownerUuid: uuid_1.v4(), verified: false, hidden: false, created: new Date(timestamp), updated: new Date(timestamp) }, overrides);
};
exports.identityGenerator = identityGenerator;
//# sourceMappingURL=Identity.mock.js.map