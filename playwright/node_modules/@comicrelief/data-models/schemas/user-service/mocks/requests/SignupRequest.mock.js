"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signupRequestGenerator = exports.partialSignupRequestGenerator = exports.SIGNUP_REQUESTS = exports.SIGNUP_REQUESTS_INVALID = exports.SIGNUP_REQUESTS_VALID = exports.SIGNUP_REQUEST_VALUES = exports.SIGNUP_REQUEST_INVALID_VALUES = exports.SIGNUP_REQUEST_VALID_VALUES = exports.PARTIAL_SIGNUP_REQUESTS = exports.PARTIAL_SIGNUP_REQUESTS_INVALID = exports.PARTIAL_SIGNUP_REQUESTS_VALID = exports.PARTIAL_SIGNUP_REQUEST_VALUES = exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES = exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES = void 0;
var utils_1 = require("../../../../utils");
var Identity_1 = require("../../models/Identity");
var Identity_mock_1 = require("../Identity.mock");
var User_mock_1 = require("../User.mock");
exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES = {
    firstName: User_mock_1.USER_VALUES.valid.firstName,
    lastName: User_mock_1.USER_VALUES.valid.lastName,
    identities: [
        Identity_mock_1.PARTIAL_IDENTITIES.EMAIL,
        Identity_mock_1.PARTIAL_IDENTITIES.MOBILE,
    ],
};
exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES = {
    firstName: null,
    lastName: null,
    identities: [
        Identity_mock_1.IDENTITIES.invalid.INVALID_KIND_NOT_RECOGNISED,
    ],
};
exports.PARTIAL_SIGNUP_REQUEST_VALUES = {
    valid: exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES,
    invalid: exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES,
};
exports.PARTIAL_SIGNUP_REQUESTS_VALID = {
    DEFAULT: exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES,
    ONE_IDENTITY_EMAIL: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.PARTIAL_IDENTITIES.EMAIL] }),
    ONE_IDENTITY_MOBILE: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.PARTIAL_IDENTITIES.MOBILE] }),
    TWO_IDENTITIES_EMAIL_AND_MOBILE: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.PARTIAL_IDENTITIES.EMAIL, Identity_mock_1.PARTIAL_IDENTITIES.MOBILE] }),
    MISSING_FIRSTNAME: utils_1.omit(exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES, ['firstName']),
    MISSING_LASTNAME: utils_1.omit(exports.PARTIAL_SIGNUP_REQUEST_VALID_VALUES, ['lastName']),
};
exports.PARTIAL_SIGNUP_REQUESTS_INVALID = {
    DEFAULT: exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES,
    INVALID_FIRSTNAME: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { firstName: exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES.firstName }),
    INVALID_LASTNAME: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { lastName: exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES.lastName }),
    INVALID_IDENTITY_EMAIL: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_EMAIL] }),
    INVALID_IDENTITY_MOBILE: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_MOBILE] }),
    INVALID_IDENTITY_KIND: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_KIND_NOT_RECOGNISED] }),
    NO_IDENTITIES: utils_1.override(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, { identities: [] }),
    MISSING_IDENTITIES: utils_1.omit(exports.PARTIAL_SIGNUP_REQUEST_INVALID_VALUES, ['identities']),
};
exports.PARTIAL_SIGNUP_REQUESTS = {
    valid: exports.PARTIAL_SIGNUP_REQUESTS_VALID,
    invalid: exports.PARTIAL_SIGNUP_REQUESTS_INVALID,
};
exports.SIGNUP_REQUEST_VALID_VALUES = {
    firstName: User_mock_1.USER_VALUES.valid.firstName,
    lastName: User_mock_1.USER_VALUES.valid.lastName,
    identities: [
        Identity_mock_1.IDENTITIES.valid.EMAIL,
        Identity_mock_1.IDENTITIES.valid.MOBILE,
    ],
};
exports.SIGNUP_REQUEST_INVALID_VALUES = {
    firstName: null,
    lastName: null,
    identities: [
        Identity_mock_1.IDENTITIES.invalid.INVALID_KIND_NOT_RECOGNISED,
    ],
};
exports.SIGNUP_REQUEST_VALUES = {
    valid: exports.SIGNUP_REQUEST_VALID_VALUES,
    invalid: exports.SIGNUP_REQUEST_INVALID_VALUES,
};
exports.SIGNUP_REQUESTS_VALID = {
    DEFAULT: exports.SIGNUP_REQUEST_VALID_VALUES,
    ONE_IDENTITY_EMAIL: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.valid.EMAIL] }),
    ONE_IDENTITY_MOBILE: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.valid.MOBILE] }),
    TWO_IDENTITIES_EMAIL_AND_MOBILE: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.valid.EMAIL, Identity_mock_1.IDENTITIES.valid.MOBILE] }),
    MISSING_FIRSTNAME: utils_1.omit(exports.SIGNUP_REQUEST_VALID_VALUES, ['firstName']),
    MISSING_LASTNAME: utils_1.omit(exports.SIGNUP_REQUEST_VALID_VALUES, ['lastName']),
};
exports.SIGNUP_REQUESTS_INVALID = {
    DEFAULT: exports.SIGNUP_REQUEST_INVALID_VALUES,
    INVALID_FIRSTNAME: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { firstName: exports.SIGNUP_REQUEST_INVALID_VALUES.firstName }),
    INVALID_LASTNAME: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { lastName: exports.SIGNUP_REQUEST_INVALID_VALUES.lastName }),
    INVALID_IDENTITY_EMAIL: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_EMAIL] }),
    INVALID_IDENTITY_MOBILE: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_MOBILE] }),
    INVALID_IDENTITY_KIND: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [Identity_mock_1.IDENTITIES.invalid.INVALID_KIND_NOT_RECOGNISED] }),
    NO_IDENTITIES: utils_1.override(exports.SIGNUP_REQUEST_VALID_VALUES, { identities: [] }),
    MISSING_IDENTITIES: utils_1.omit(exports.SIGNUP_REQUEST_VALID_VALUES, ['identities']),
};
exports.SIGNUP_REQUESTS = {
    valid: exports.SIGNUP_REQUESTS_VALID,
    invalid: exports.SIGNUP_REQUESTS_INVALID,
};
/**
 * Generates a random PartialSignupRequest
 *
 * @param overrides
 */
var partialSignupRequestGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ firstName: utils_1.getString(10, { numbers: false }), lastName: utils_1.getString(10, { numbers: false }), identities: [
            {
                kind: Identity_1.IdentityType.EMAIL,
                content: utils_1.getString(10) + "@test.sls.comicrelief.com",
            },
            {
                kind: Identity_1.IdentityType.MOBILE,
                content: "+447" + utils_1.getString(9, { uppercase: false, lowercase: false, numbers: true }),
            },
        ] }, overrides));
};
exports.partialSignupRequestGenerator = partialSignupRequestGenerator;
/**
 * Generates a random SignupRequest
 *
 * @param overrides
 */
var signupRequestGenerator = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ firstName: utils_1.getString(10, { numbers: false }), lastName: utils_1.getString(10, { numbers: false }), identities: [
            {
                hash: utils_1.getString(32),
                kind: Identity_1.IdentityType.EMAIL,
                content: utils_1.getString(10) + "@test.sls.comicrelief.com",
            },
            {
                hash: utils_1.getString(32),
                kind: Identity_1.IdentityType.MOBILE,
                content: "+447" + utils_1.getString(9, { uppercase: false, lowercase: false, numbers: true }),
            },
        ] }, overrides));
};
exports.signupRequestGenerator = signupRequestGenerator;
//# sourceMappingURL=SignupRequest.mock.js.map