import * as yup from 'yup';
/**
 * A stricter string validator, which doesn't accept anything other than strings,
 *  undefined, or - if you chain `nullable()` - null.
 *
 * (The standard `yup.string()` schema coerces types, i.e. it will do things like cast
 *  [] to '' or 1 to '1', and then treat them as valid strings.)
 *
 * Handling of `undefined` and `null` is unaffected compared with `yup.string()`, as those
 *  are for other validation conditions to deal with (e.g. `defined()`, `nullable()`,
 *  `required()` etc.)
 *
 * Similar to doing `yup.string().strict(true)`, except unlike `strict(true)`, it
 *  won't prevent custom transformations with `transform()`.
 *
 * Note: It may be better to use `test()` for this, however, first we need to update
 *  our version of yup, as `test` only has access to the untransformed `originalValue`
 *  in more recent versions.
 *
 * todo: use `test()` after updating yup.
 */
export declare const StrictString: yup.StringSchema<string | undefined, object>;
/**
 * `StrictString` with whitespace trimmed.
 *
 * Validating with `StrictString.trim()` has issues if the input value is not
 * a `string`, because `trim()` doesn't check that the current transform value
 * is actually a `string`. This results in a `TypeError` that causes the result
 * `errors` array to be `undefined`.
 */
export declare const TrimmedStrictString: yup.StringSchema<string | undefined, object>;
/**
 * In addition to the limits put on StrictString
 * this field will also lowercase and trims the string
 */
export declare const LowercaseString: yup.StringSchema<string | undefined, object>;
//# sourceMappingURL=StrictString.d.ts.map