"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LowercaseString = exports.TrimmedStrictString = exports.StrictString = void 0;
var yup = __importStar(require("yup"));
/**
 * A stricter string validator, which doesn't accept anything other than strings,
 *  undefined, or - if you chain `nullable()` - null.
 *
 * (The standard `yup.string()` schema coerces types, i.e. it will do things like cast
 *  [] to '' or 1 to '1', and then treat them as valid strings.)
 *
 * Handling of `undefined` and `null` is unaffected compared with `yup.string()`, as those
 *  are for other validation conditions to deal with (e.g. `defined()`, `nullable()`,
 *  `required()` etc.)
 *
 * Similar to doing `yup.string().strict(true)`, except unlike `strict(true)`, it
 *  won't prevent custom transformations with `transform()`.
 *
 * Note: It may be better to use `test()` for this, however, first we need to update
 *  our version of yup, as `test` only has access to the untransformed `originalValue`
 *  in more recent versions.
 *
 * todo: use `test()` after updating yup.
 */
exports.StrictString = yup.string().transform(function (_value, originalValue) { return originalValue; });
/**
 * `StrictString` with whitespace trimmed.
 *
 * Validating with `StrictString.trim()` has issues if the input value is not
 * a `string`, because `trim()` doesn't check that the current transform value
 * is actually a `string`. This results in a `TypeError` that causes the result
 * `errors` array to be `undefined`.
 */
exports.TrimmedStrictString = yup.string().transform(function (_value, originalValue) { return (typeof originalValue === 'string'
    ? originalValue.trim()
    : originalValue); });
/**
 * In addition to the limits put on StrictString
 * this field will also lowercase and trims the string
 */
exports.LowercaseString = exports.TrimmedStrictString.lowercase();
//# sourceMappingURL=StrictString.js.map